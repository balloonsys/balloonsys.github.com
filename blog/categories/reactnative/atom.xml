<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reactnative | Balloonsys Inc.]]></title>
  <link href="https://linkoubian.github.io/blog/categories/reactnative/atom.xml" rel="self"/>
  <link href="https://linkoubian.github.io/"/>
  <updated>2019-05-27T22:22:45+08:00</updated>
  <id>https://linkoubian.github.io/</id>
  <author>
    <name><![CDATA[Linkou Bian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React Native 项目实战]]></title>
    <link href="https://linkoubian.github.io/blog/2016/10/18/rn-put-it-all-together/"/>
    <updated>2016-10-18T15:02:29+08:00</updated>
    <id>https://linkoubian.github.io/blog/2016/10/18/rn-put-it-all-together</id>
    <content type="html"><![CDATA[<p>本文以 Twitter 工程师 Bonnie Eisenman 撰写的 Learning React Native 一书的第九章内容为蓝本，总结了 React Native 项目实践的一些经验。</p>

<!--more-->


<h2>项目组织结构</h2>

<p>所有的新增文件均放在项目根目录下的 src 里，主要有包含各页面的 components 子目录、数据模型的 data 子目录、负责数据存取的 stores 子目录、公共样式定义 styles 子目录、存放资源图片等的 resources 子目录等。</p>

<p><img src="https://c2.staticflickr.com/6/5781/30365572286_b0c35d2176_o.png" width="226" alt="RN Project Structure" /></p>

<p>index.ios.js 是 Native 应用的入口，该文件尽量简洁，指向 RN 项目里负责页面跳转的主文件 components/Zebreto.js。</p>

<h2>案例项目简介</h2>

<p>作者提供的示例项目包含三个页面，包含多副牌（Deck）的列表页、为选中的某副牌增加一张卡牌（Card）的页面、为某张卡牌选择答案（Review）的页面。</p>

<p>在列表页点击 Create Deck 按钮，按钮上方出现输入框，填写内容作为 Deck 的名称。点击 Deck 右侧按钮则进入增加卡牌页面，点击 Deck 左侧则进入 Review 的页面。</p>

<h2>构建基础组件</h2>

<h3>公共样式</h3>

<p>全局的颜色、字号等，可以在 js 里直接定义字典数据结构，然后 exports 以供外界访问。比如：</p>

<pre><code class="js">var palette = {
  pink: '#FDA6CD'
};

module.exports = palette;
</code></pre>

<p>所以，像平安好房的应用可以参照上述结构定义 pa_orange 等色值。值得注意的是，我们也可以在一个 js 文件里定义多个字典，然后 exports 时将他们包含在花括号中即可。</p>

<pre><code class="js">module.exports = {fonts, color};
</code></pre>

<p>在使用上述结构时，就需要这么 import 了：</p>

<pre><code class="js">import { fonts, color } from '&lt;PATH-OF-FILE&gt;';
</code></pre>

<h3>公共组件</h3>

<p>我们不直接用 Text 组件，而是包装成 HeadingText 和 NormalText 供项目里的不同页面使用。同样的，为了代码重用与使用便捷，我们封装 Button、Input、LabeldInput 等组件。</p>

<p>其中 Button 组件构建在 TouchableOpacity 基础之上，支持 func 类型的属性以在点击时调用使用方的方法，也支持 View.propTypes.style 类型的属性以方便定制其样式等。</p>

<p>需要注意的是，为了让 Button 组件能包含其他子组件，我们使用了一个 object 类型的属性，然后在 render 时输出 children 即可。</p>

<p>HeadingText 和 NormalText 建立在 Text 组件之上，自定义样式是通过 Text.propTypes.style 类型的属性支持的。注意此处类型不同于前面 Button 使用过的样式类型。</p>

<p>Input 组件建立在 TextInput 之上，LabeledInput 组合了 Input 和 NormalText 两个组件，体现了复用的理念。</p>

<h2>页面开发</h2>

<h3>Deck 列表页</h3>

<h4>数据建模</h4>

<p>在 React Native 项目试点过程中，尚不熟悉 JavaScript 的类相关语法。当时都是用的字典:[</p>

<pre><code class="js">class Deck {
  constructor() {
  }
}

module.exports = Deck;
</code></pre>

<p>数据在本地使用 AsyncStorage 存取，所有的存取方法均封装在 DeckStore.js 里。</p>

<h4>Reflux 架构</h4>

<p>作者使用 Reflux 架构实现数据的单项流动，主要的两个概念便是 Store 和 Action 了。</p>

<p>用户在 View 上操作，触发 Action，示例 View 的事件响应代码如下：
<code>js
DeckActions.createDeck(deck)
</code></p>

<p>而 createDeck 是在 actions.js 里定义的：
<code>js
export var DeckActions = Reflux.createActions([
  'createDeck'
]);
</code></p>

<p>Store 的 init 方法里监听 Action：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">decksStore</span> <span class="o">=</span> <span class="nx">Reflux</span><span class="p">.</span><span class="nx">createStore</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_decks</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="c1">// &amp;hellip;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">listenTo</span><span class="p">(</span><span class="nx">DeckActions</span><span class="p">.</span><span class="nx">createDeck</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">createDeck</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// &amp;hellip;</span>
</span><span class='line'>  <span class="p">},</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// ...</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">createDeck</span><span class="p">(</span><span class="nx">deck</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_decks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">deck</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// ...</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">emit</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// &amp;hellip;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_decks</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">decksStore</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这样在 createDeck 这一 action 触发后，Store 变回执行 createDeck 方法以更新 Store 中的数据，再通过 emit 方法通知出去。</p>

<p>View 里面监听 DeckStore 的消息，将通知携带来的数据模型存在 state 里以触发 render 方法的执行（更新 UI）。</p>

<p><img src="https://c2.staticflickr.com/6/5816/29772102074_b8ec9b3328_o.png" width="328" alt="Reflux Architecture" /></p>

<h4>页面组装</h4>

<p>src/components/Decks/index.js 是该页面的主文件，会包含一些子组件以完成整个页面的渲染。</p>

<p>在 index.js 的 render 方法里，将这一段代码封装在一个独立的工具方法，然后在 render 里面引用其返回的 UI 结构。</p>

<pre><code class="js">  _getDecks() {
    if (!this.state.decks) {
      return null;
    }

    return this.state.decks.map((deck) =&gt; {
      return (
        &lt;Deck deck={deck} .../&gt;
      );
    });
  },
</code></pre>

<p>使用高阶函数 map 根据每个 deck 数据对象生成对应的 Deck 标签，作为数据返回。</p>

<pre><code class="js">  render() {
    return (
      &lt;View&gt;
        {this._getDecks()}
        &lt;DeckCreation .../&gt;
      &lt;/View&gt;
    );
  }
</code></pre>

<p>输入 Deck 名时比正常情况下多一行输入框，所以在 DeckCreation.js 中根据一个 state 变量分别返回不同的两个子组件：EnterDeck 和 CreateDeckButton。前者由公共组件 Input 和 CreateDeckButton 组合而成。CreateDeckButton 由公共组件 Button 和 NormalText 组合而成。</p>

<p>详细代码不在本文中提供，以思路为重。</p>

<h3>Card 新建页</h3>

<p>整体过程类似于 Decks 页面的构建。主要就是在 View 触发 CardActions.createCard 这一 Action，在 Card 的 Store 中监听以更新数据集合。</p>

<h3>Review 交互页</h3>

<p>本页面有两种场景，若存在尚未 Review 过的 Card 则显示可选择答案的 Review 页面，否则显示 Review 结果（正确率）。所以 src/components/Review/index.js 里分两种情况返回 UI 结构。</p>

<p>选择答案的 UI 结构，其封装在 ViewCard.js 中，做法类似于之前 Decks 利用 map 高阶函数的方案。Review 这一块稍微难懂一点的是其 Store 里根据录入的卡片构造选项的逻辑，但这其实已不是 React Native 的范围，耐心的多看一会儿就可以懂。</p>

<h2>问题与解决方案</h2>

<h3>Decks 页面不展示模拟数据</h3>

<p>我在完成 Decks 页面的展示时，就不等 Create Deck 功能的实现，就开始测试一下页面。比如在 components/Decks/index.js 的 getInitialState 中直接构造几个 Deck 对象。但是并没有展示出来:[</p>

<p>原因在于 Store 发出的消息，导致 View 的 state 里的数据立即被置空。我们可以临时在加个判断，为空就不 setState({decks}) 即可。</p>

<h3>Review 结果展示页告警</h3>

<p>该页使用公共组件 NormalText 并传递 color 给它，但作者提供的 NormalText 代码里使用的是 View.propTypes.style，应改为 Text.propTypes.style！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native 组件间数据传递]]></title>
    <link href="https://linkoubian.github.io/blog/2016/10/11/rn-components-communication/"/>
    <updated>2016-10-11T11:14:48+08:00</updated>
    <id>https://linkoubian.github.io/blog/2016/10/11/rn-components-communication</id>
    <content type="html"><![CDATA[<p>在 React Native 项目试点过程中，封装的组件之间难免需要传递数据。本文总结了子组件如何将数据传递到使用方，以及对开发过程中遇到的一个 setState 问题的探究。</p>

<!--more-->


<h2>设计一个可定制的组件</h2>

<p>当设计一个组件供团队使用，通常使用时需要向其传递一些信息。这个过程可以参考国庆节前写的<a href="http://balloonsys.com/blog/2016/09/30/create-your-first-reusable-react-native-component/">创建一个 React Native 分隔线组件</a>。</p>

<p>主要思路就是定义属性（propTypes），并提供默认属性值（getDefaultProps）。这里不再赘述。</p>

<h2>组件返回数据给使用方</h2>

<h3>应用场景</h3>

<p>假设我们的某个页面 P 使用到封装房产信息的 houseInfo 等组件，需要在 houseInfo 填写完房源总价 totalPrice 后能根据当前整个页面（含多个组件）的输入项去验证是否可以 enable 提交按钮，而且在点击提交时需要能访问到 houseInfo 等组件录入的数据（包括 totalPrice 等）。</p>

<h3>组件设计</h3>

<p>houseInfo 组件包含若干由 React Native 提供的 TextInput 组件，在 TextInput 的 onChangeText 事件绑定我们的方法：</p>

<pre><code class="js">onChangeText={this._updateTotalPrice}
</code></pre>

<p>使用到的 _updateTotalPrice 是定义在该组件里的事件响应方法，使用最精简的写法设置状态机变量：</p>

<pre><code class="js">  _updateTotalPrice(totalPrice) {
    this.setState({totalPrice}, this._onStateUpdated);
  },
</code></pre>

<p>特别需要注意的是，上述 setState 方法是异步执行的函数，将变化通知到组件的使用者的方法 _onStateUpdated 需要放在 setState 的第二个参数处，否则取 this.state.totalPrice 仍将是旧值。官方的解释如下：</p>

<blockquote><p>setState() does not immediately mutate this.state but creates a pending state transition. Accessing this.state after calling this method can potentially return the existing value.</p></blockquote>

<p>在实现 _onStateUpdated 方法之前，我们先声明一个函数类型的属性：</p>

<pre><code class="js">  propTypes: {
    onGetHouseInfo: React.PropTypes.func
  },
</code></pre>

<p>这样使用者就可以传递一个函数给该组件，该组件在合适的时机调用此方法即可传递数据给使用方。</p>

<pre><code class="js">  _onStateUpdated() {
    this.props.onGetHouseInfo({totalPrice: this.state.totalPrice,
                                                             // 其他输入项 ...
                              }, this._validate());
  },
</code></pre>

<p>我们在传递输入的值时，还将本组件的验证结果传递出去，这样使用方即可综合各组件的 valid 值以控制提交按钮的状态。</p>

<pre><code class="js">  _validate() {
    if (XXX) {
      return false;
    }

    return true;
  },
</code></pre>

<h3>使用方</h3>

<p>我们在使用 houseInfo 等组件 render 表单页面 P，参考代码如下：</p>

<pre><code class="js">&lt;HouseInfo onGetHouseInfo={this._getHouseInfo} /&gt;
</code></pre>

<p>此处的 _getHouseInfo 用于从组件接收数据，以存放在页面的 state 里面：</p>

<pre><code class="js">  _getHouseInfo(houseInfo, houseInfoValid) {
    this.setState({houseInfo, houseInfoValid});
  },
</code></pre>

<p>至于 state 的定义及初始化，放在 getInitialState 中即可，较为基础，此处略。</p>

<h2>收工</h2>

<p>👏👏👏</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建一个 React Native 分隔线组件]]></title>
    <link href="https://linkoubian.github.io/blog/2016/09/30/create-your-first-reusable-react-native-component/"/>
    <updated>2016-09-30T10:24:06+08:00</updated>
    <id>https://linkoubian.github.io/blog/2016/09/30/create-your-first-reusable-react-native-component</id>
    <content type="html"><![CDATA[<p>在移动端表单页面里有不少分隔线绘制需求，构造一个组件以在不同页面复用是个很自然的做法。</p>

<!--more-->


<h2>目标</h2>

<p>期望在各页面导入 require 该组件后，直接使用如下的方式绘制分隔线：</p>

<pre><code class="js">&lt;Line height={1} paddingLeft={10} paddingRight={0} backgroundColor='white' /&gt;
</code></pre>

<p>当然也为上述四个属性提供默认值，如果默认值符合需求，则只需：</p>

<pre><code class="js">&lt;Line /&gt;
</code></pre>

<h2>所需技术</h2>

<h3>创建类</h3>

<p>我采用的是 ES 5 的语法创建类的，代码如下：</p>

<pre><code class="js">let Line = React.createClass({
  render() {
    return (
    );
  },
});

module.exports = Line;
</code></pre>

<p>其中 render 方法类似于 Native 开发中视图的绘制方法。我们稍后在其 return 中加上构建与 React Native 基础组件之上的 XML 代码。</p>

<h3>添加属性</h3>

<p>构建该分隔线组件给客户程序使用，需要让别人知道支持哪些属性，比如线的高度、左右缩进、背景色及线的颜色等。</p>

<pre><code class="js">  propTypes: {
    height: React.PropTypes.number,
    paddingLeft: React.PropTypes.number,
    paddingRight: React.PropTypes.number,
    backgroundColor: React.PropTypes.string,
    lineColor: React.PropTypes.string,
  },
</code></pre>

<p>为了用起来方便，我们还可以给这些属性提供默认值：</p>

<pre><code class="js">  getDefaultProps() {
    return {
      height: 0.5,
      paddingLeft: 0,
      paddingRight: 0,
      backgroundColor: '#FFFFFF',
      lineColor: '#D3D3D3',
    }
  },
</code></pre>

<h3>绘制控件</h3>

<p>具体的绘制代码在 render 方法中完成。如前面所述，我们将用到 React Native 提供的基础组件，所以我们需要在代码顶部导入。</p>

<pre><code class="js">import React, { Component } from 'react';
import { View } from 'react-native';
</code></pre>

<p>此时我们就可以在 render 方法的 return 语句中加上下面代码以完成分隔线的绘制了：</p>

<pre><code class="xml">      &lt;View style={} &gt;
        &lt;View style={} /&gt;
      &lt;/View&gt;
</code></pre>

<p>外层的 View 的 style 属性设置为：</p>

<pre><code class="js">{backgroundColor: this.props.backgroundColor, height: this.props.height, paddingLeft: this.props.paddingLeft, paddingRight: this.props.paddingRight}
</code></pre>

<p>内层的 View 的 style 属性设置为：</p>

<pre><code class="js">{flex: 1, backgroundColor: this.props.lineColor}
</code></pre>

<h2>总结</h2>

<p>本文选取最最简单的分隔线介绍 React Native 实践过程中的代码编写思路，完成的其他控件有表单填写进度等。</p>
]]></content>
  </entry>
  
</feed>
