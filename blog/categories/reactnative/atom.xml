<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reactnative | Balloonsys Inc.]]></title>
  <link href="http://balloonsys.github.io/blog/categories/reactnative/atom.xml" rel="self"/>
  <link href="http://balloonsys.github.io/"/>
  <updated>2016-10-12T16:36:22+08:00</updated>
  <id>http://balloonsys.github.io/</id>
  <author>
    <name><![CDATA[Linkou Bian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React Native 组件间数据传递]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/11/rn-components-communication/"/>
    <updated>2016-10-11T11:14:48+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/11/rn-components-communication</id>
    <content type="html"><![CDATA[<p>在 React Native 项目试点过程中，封装的组件之间难免需要传递数据。本文总结了子组件如何将数据传递到使用方，以及对开发过程中遇到的一个 setState 问题的探究。</p>

<!--more-->


<h2>设计一个可定制的组件</h2>

<p>当设计一个组件供团队使用，通常使用时需要向其传递一些信息。这个过程可以参考国庆节前写的<a href="http://balloonsys.com/blog/2016/09/30/create-your-first-reusable-react-native-component/">创建一个 React Native 分隔线组件</a>。</p>

<p>主要思路就是定义属性（propTypes），并提供默认属性值（getDefaultProps）。这里不再赘述。</p>

<h2>组件返回数据给使用方</h2>

<h3>应用场景</h3>

<p>假设我们的某个页面 P 使用到封装房产信息的 houseInfo 等组件，需要在 houseInfo 填写完房源总价 totalPrice 后能根据当前整个页面（含多个组件）的输入项去验证是否可以 enable 提交按钮，而且在点击提交时需要能访问到 houseInfo 等组件录入的数据（包括 totalPrice 等）。</p>

<h3>组件设计</h3>

<p>houseInfo 组件包含若干由 React Native 提供的 TextInput 组件，在 TextInput 的 onChangeText 事件绑定我们的方法：</p>

<pre><code class="js">onChangeText={this._updateTotalPrice}
</code></pre>

<p>使用到的 _updateTotalPrice 是定义在该组件里的事件响应方法，使用最精简的写法设置状态机变量：</p>

<pre><code class="js">  _updateTotalPrice(totalPrice) {
    this.setState({totalPrice}, this._onStateUpdated);
  },
</code></pre>

<p>特别需要注意的是，上述 setState 方法是异步执行的函数，将变化通知到组件的使用者的方法 _onStateUpdated 需要放在 setState 的第二个参数处，否则取 this.state.totalPrice 仍将是旧值。官方的解释如下：</p>

<blockquote><p>setState() does not immediately mutate this.state but creates a pending state transition. Accessing this.state after calling this method can potentially return the existing value.</p></blockquote>

<p>在实现 _onStateUpdated 方法之前，我们先声明一个函数类型的属性：</p>

<pre><code class="js">  propTypes: {
    onGetHouseInfo: React.PropTypes.func
  },
</code></pre>

<p>这样使用者就可以传递一个函数给该组件，该组件在合适的时机调用此方法即可传递数据给使用方。</p>

<pre><code class="js">  _onStateUpdated() {
    this.props.onGetHouseInfo({totalPrice: this.state.totalPrice,
                                                             // 其他输入项 ...
                              }, this._validate());
  },
</code></pre>

<p>我们在传递输入的值时，还将本组件的验证结果传递出去，这样使用方即可综合各组件的 valid 值以控制提交按钮的状态。</p>

<pre><code class="js">  _validate() {
    if (XXX) {
      return false;
    }

    return true;
  },
</code></pre>

<h3>使用方</h3>

<p>我们在使用 houseInfo 等组件 render 表单页面 P，参考代码如下：</p>

<pre><code class="js">&lt;HouseInfo onGetHouseInfo={this._getHouseInfo} /&gt;
</code></pre>

<p>此处的 _getHouseInfo 用于从组件接收数据，以存放在页面的 state 里面：</p>

<pre><code class="js">  _getHouseInfo(houseInfo, houseInfoValid) {
    this.setState({houseInfo, houseInfoValid});
  },
</code></pre>

<p>至于 state 的定义及初始化，放在 getInitialState 中即可，较为基础，此处略。</p>

<h2>收工</h2>

<p>👏👏👏</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建一个 React Native 分隔线组件]]></title>
    <link href="http://balloonsys.github.io/blog/2016/09/30/create-your-first-reusable-react-native-component/"/>
    <updated>2016-09-30T10:24:06+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/09/30/create-your-first-reusable-react-native-component</id>
    <content type="html"><![CDATA[<p>在移动端表单页面里有不少分隔线绘制需求，构造一个组件以在不同页面复用是个很自然的做法。</p>

<!--more-->


<h2>目标</h2>

<p>期望在各页面导入 require 该组件后，直接使用如下的方式绘制分隔线：</p>

<pre><code class="js">&lt;Line height={1} paddingLeft={10} paddingRight={0} backgroundColor='white' /&gt;
</code></pre>

<p>当然也为上述四个属性提供默认值，如果默认值符合需求，则只需：</p>

<pre><code class="js">&lt;Line /&gt;
</code></pre>

<h2>所需技术</h2>

<h3>创建类</h3>

<p>我采用的是 ES 5 的语法创建类的，代码如下：</p>

<pre><code class="js">let Line = React.createClass({
  render() {
    return (
    );
  },
});

module.exports = Line;
</code></pre>

<p>其中 render 方法类似于 Native 开发中视图的绘制方法。我们稍后在其 return 中加上构建与 React Native 基础组件之上的 XML 代码。</p>

<h3>添加属性</h3>

<p>构建该分隔线组件给客户程序使用，需要让别人知道支持哪些属性，比如线的高度、左右缩进、背景色及线的颜色等。</p>

<pre><code class="js">  propTypes: {
    height: React.PropTypes.number,
    paddingLeft: React.PropTypes.number,
    paddingRight: React.PropTypes.number,
    backgroundColor: React.PropTypes.string,
    lineColor: React.PropTypes.string,
  },
</code></pre>

<p>为了用起来方便，我们还可以给这些属性提供默认值：</p>

<pre><code class="js">  getDefaultProps() {
    return {
      height: 0.5,
      paddingLeft: 0,
      paddingRight: 0,
      backgroundColor: '#FFFFFF',
      lineColor: '#D3D3D3',
    }
  },
</code></pre>

<h3>绘制控件</h3>

<p>具体的绘制代码在 render 方法中完成。如前面所述，我们将用到 React Native 提供的基础组件，所以我们需要在代码顶部导入。</p>

<pre><code class="js">import React, { Component } from 'react';
import { View } from 'react-native';
</code></pre>

<p>此时我们就可以在 render 方法的 return 语句中加上下面代码以完成分隔线的绘制了：</p>

<pre><code class="xml">      &lt;View style={} &gt;
        &lt;View style={} /&gt;
      &lt;/View&gt;
</code></pre>

<p>外层的 View 的 style 属性设置为：</p>

<pre><code class="js">{backgroundColor: this.props.backgroundColor, height: this.props.height, paddingLeft: this.props.paddingLeft, paddingRight: this.props.paddingRight}
</code></pre>

<p>内层的 View 的 style 属性设置为：</p>

<pre><code class="js">{flex: 1, backgroundColor: this.props.lineColor}
</code></pre>

<h2>总结</h2>

<p>本文选取最最简单的分隔线介绍 React Native 实践过程中的代码编写思路，完成的其他控件有表单填写进度等。</p>
]]></content>
  </entry>
  
</feed>
