<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 3rd-party-lib | Balloonsys Inc.]]></title>
  <link href="http://balloonsys.github.io/blog/categories/3rd-party-lib/atom.xml" rel="self"/>
  <link href="http://balloonsys.github.io/"/>
  <updated>2014-04-04T16:48:04+08:00</updated>
  <id>http://balloonsys.github.io/</id>
  <author>
    <name><![CDATA[Linkou Bian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[基于模板引擎的新闻内容展示]]></title>
    <link href="http://balloonsys.github.io/blog/2014/04/04/template-engine-in-action/"/>
    <updated>2014-04-04T16:45:39+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/04/04/template-engine-in-action</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于iCarousel构建新闻头条]]></title>
    <link href="http://balloonsys.github.io/blog/2014/03/24/news-headline-in-action/"/>
    <updated>2014-03-24T16:25:24+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/03/24/news-headline-in-action</id>
    <content type="html"><![CDATA[<p>市面上大部分新闻客户端的布局，都是顶部放一个可以左右滑动的头条，下方是新闻列表。像网易新闻的头条部分，通常是新闻与广告穿插。因为近期正在开发类似的一个APP，现总结头条部分的构建步骤。</p>

<!--more-->


<h2>技术选型</h2>

<p>去code4app.com上搜索ScrollView相关的代码，会找到一些类似的代码示例，比如这个<a href="http://code4app.com/ios/EScrollerView/51935e166803fac572000003">EScrollView</a>。如果是本着学习的出发点，借鉴其思路并酌情修改其代码以满足自身项目需求，也不是难事。但如果要用在商业项目里，并期望获得足够的灵活性可能还需花费很多精力。</p>

<p>经过一番Google，在Github里找到了<a href="https://github.com/nicklockwood/iCarousel">iCarousel</a>这个控件，其示例代码中含不少例子，不过大部分例子的效果都是CoverFlow风格。但其中的Paging Example给了我灵感，把iCarousel View的高度设小一点，再额外加个page control及text label不就刚好么？欣喜之余，快速打开该示例的代码仔细阅读。</p>

<p>下面详细介绍如何基于iCarousel构建新闻头条。</p>

<h2>iCarousel简介</h2>

<h3>定制iCarousel视图</h3>

<p>拖一个UIView到View Controller的顶部，大小为320X190，类名设置为iCarousel，连接到一个名为headlinesView的Outlet。</p>

<p>在viewDidLoad中调用如下方法，
``` objc
&ndash; (void)setupHeadlinesView
{</p>

<pre><code>self.headlinesView.type = iCarouselTypeLinear;
self.headlinesView.pagingEnabled = YES;
self.headlinesView.dataSource = self;
self.headlinesView.delegate = self;
</code></pre>

<p>}
```
此处关键的一个属性便是pagingEnabled，设置后刚好符合期望的效果。</p>

<h3>为iCarousel提供数据</h3>

<p>iCarousel采用类似于table view的设计方式，提供了不少datasource及delegate方法。</p>

<p>下面这个方法告诉iCarousel共有几个cell item，
``` objc
&ndash; (NSUInteger)numberOfItemsInCarousel:(iCarousel *)carousel
{</p>

<pre><code>return kCoundOfHeadlineNews;
</code></pre>

<p>}
```</p>

<p>当需要加载某个cell view时，会调用viewForItemAtIndex，我们需在该方法里确保用于显示新闻头条图片的imageView被构建并设置相应地image。
``` objc
&ndash; (UIView <em>)carousel:(iCarousel </em>)carousel viewForItemAtIndex:(NSUInteger)index reusingView:(UIView *)view
{</p>

<pre><code>UIImageView *headlineImageView = nil;

// Create new view if no view is available for recycling
if (view == nil) {
    view = [[UIView alloc] initWithFrame:self.headlinesView.bounds];
    headlineImageView = [[UIImageView alloc] initWithFrame:view.bounds];
    [headlineImageView setImage:[UIImage imageNamed:@"Headline_Placehold"]];
    headlineImageView.tag = kHeadlineImageViewTag;
    [view addSubview:headlineImageView];
}
else {
    headlineImageView = (UIImageView *)[view viewWithTag:kHeadlineImageViewTag];
}

// Load image for headline news
if (index &lt; self.headlineNews.count) {
    [headlineImageView setImageWithURL:[NSURL URLWithString:[self.headlineNews[index] img]]];
}

return view;
</code></pre>

<p>}
```
上面代码中的headlineNews是一个数组，用来存从远程服务器获得的头条新闻（Model）列表，其中img属性（头条新闻的字段）为对应图片的URL。当加载cell view时headlineNews可能还没有数据，所以上述代码做了个判断，即if (index &lt; self.headlineNews.count)。</p>

<p>当远端数据加载完毕，我们可以调用[self.headlinesView reloadData]以更新界面。</p>

<p>另外，往Image View设置远程图片，可以用SDWebImage提供的方法setImageWithURL，该框架可以有效的管理图片的缓存。</p>

<h3>定制iCarousel的行为</h3>

<p>当头条新闻滑到最后一页时，通常需要能够回到第一页。iCarousel提供了一个delegate方法以定制该控件的属性。
``` objc
&ndash; (CGFloat)carousel:(iCarousel *)carousel valueForOption:(iCarouselOption)option withDefault:(CGFloat)value
{</p>

<pre><code>switch (option) {
    case iCarouselOptionWrap:
        return YES;
    default:
        return value;
}
</code></pre>

<p>}
```</p>

<p>点击某一个cell view时，需要展示新闻详情页面。跳转的逻辑可以放在carousel:didSelectItemAtIndex:中。</p>

<h2>添加新闻标题</h2>

<p>标题（Label）与当前页指示控件（page control）并不属于iCarousel的cell view，因为整个滑动过程中只有一个Label和一个Page Control。所以我们可以在Storyboard中拖放相应控件作为iCarousel的子视图，再设置属性即可。</p>

<p>当滑动后，到达新页面时，可以在carouselCurrentItemIndexDidChange:中设置Label及Current Page。</p>
]]></content>
  </entry>
  
</feed>
