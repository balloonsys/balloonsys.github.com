<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Balloonsys Inc.]]></title>
  <link href="http://balloonsys.github.io/atom.xml" rel="self"/>
  <link href="http://balloonsys.github.io/"/>
  <updated>2016-07-01T14:48:26+08:00</updated>
  <id>http://balloonsys.github.io/</id>
  <author>
    <name><![CDATA[Linkou Bian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第七期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/07/01/tech-notes-7/"/>
    <updated>2016-07-01T14:46:10+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/07/01/tech-notes-7</id>
    <content type="html"><![CDATA[<p>本期周报主要包括试玩iOS 10 SDK时遇到的问题、处理把nil插入到NSDictionary里引起crash问题的方案等。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.cac.gov.cn/2016-06/28/c_1119123114.htm">网信办：App须对注册用户真实身份进行认证 不合规将被整改</a></h4>

<p>另外，国家新闻出版广电总局办公厅印发了关于移动游戏出版服务管理的通知。现在，中国区App Store近日发出通告，移动游戏需要通过国家新闻出版广电总局的审批才可发布。在App审核信息部分的备注字段需要输入游戏类App的批准号码和批准日期。</p>

<h4>2) <a href="http://www.recode.net/2016/6/30/12067578/spotify-apple-app-store-rejection">Spotify更新遭拒</a></h4>

<p>Spotify不想和Apple分成，不使用苹果的订阅服务，这下子遇到麻烦了。</p>

<h2>开发</h2>

<h4>1) iOS 10 beta 1 SDK 初体验</h4>

<p>本周我在实践iOS 10的部分新特性时遇到了不少问题，并且报了三个bug给苹果：
a. CSSearchQuery 没能查出中文
b. 把竖屏拍的照片添加到notification中，显示偏转90°
c. widget移到Today Extension页面顶部，切换展开与收起，视图位置有偏移</p>

<p>另外，在实践Today Extension时遇到tableview的delegate方法未执行的问题，可参考<a href="http://stackoverflow.com/a/28449837">StackOverflow</a>解决。</p>

<h4>2) <a href="http://tech.glowing.com/cn/how-we-made-nsdictionary-nil-safe/">当 NSDictionary 遇见 nil</a></h4>

<p>当把nil插入到NSDictionary里，会引起crash，简单粗暴的解决办法是插入之前加if判断，弊端是代码有bad smell。作者基于Method Swizzle提供了一个全局的处理方案。</p>

<h2>工具</h2>

<h4>1) <a href="https://github.com/cyanzhong/xTextHandler/">xTextHandler</a></h4>

<p>基于 Xcode Source Editor Extension 的插件集，提高 Xcode 文本处理的体验，你可以通过简单的几行代码扩展它。</p>

<h4>2) <a href="http://wereadteam.github.io/2016/05/23/GYBootingProtection/">iOS 启动连续闪退保护方案</a></h4>

<p>这是微信读书团队分享的方案。之前也看到某猫分享的『APP安全模式』，读起来都云山雾绕的，差评。</p>

<h2>其他</h2>

<h4>1) <a href="http://www.jianshu.com/p/61707af65a48">GMTC2016移动技术大会参会感想</a></h4>

<p>没有参加过此类会议，看了链家网移动敏捷之术，感觉还挺不错的。</p>

<h4>2) <a href="https://www.infoq.com/news/2016/03/agileindia-7sins-scrum">Seven Sins of Scrum and other Agile Antipatterns</a></h4>

<blockquote><p>一些事情看上去是好主意，但在使用的时候会产生意想不到的后果。</p></blockquote>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第六期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/06/27/tech-notes-6/"/>
    <updated>2016-06-27T09:57:31+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/06/27/tech-notes-6</id>
    <content type="html"><![CDATA[<p>本期周报主要包括iOS 10中通知相关的变化、Swift中try的用法、颜色与标注稿不一致的问题等。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.loopinsight.com/2016/06/23/apple-discontinues-thunderbolt-display/">Apple discontinues Thunderbolt Display</a></h4>

<p>服役五年的 Thunderbolt Display已经正式停产，剩下的存货仍会在Apple线上商店与零售点销售。</p>

<h4>2) <a href="http://fichek.com/blog/wwdc16-notifications/">WWDC16 - New in Notifications</a></h4>

<p>Notification相关的API从UIKit挪到了新的framework，<a href="http://fichek.com/contact/">Filip Radelic</a>对其变化做了很好的总结。</p>

<p>另附一篇介绍Notification的中文文章<a href="http://www.jianshu.com/p/9b720efe3779">iOS 10  推送Notification新特性</a>。</p>

<h2>开发</h2>

<h4>1) <a href="https://ashfurrow.com/blog/uicollectionview-unjustly-maligned/">UICollectionView: Unjustly Maligned</a></h4>

<p>500px首个iPad版本、Artsy都出自本文作者<a href="https://ashfurrow.com/about/">Ash Furrow</a>之手。同时他也是iOS UICollectionView: The Complete Guide一书的作者。</p>

<p>Ash在文中介绍了如何用UICollectionView构建Artsy的页面。</p>

<p>另外有两篇文章不错，建议一读：<a href="https://adoptioncurve.net/archives/2016/06/collection-view-updates-in-ios10/">Collection View Updates in iOS10 Part 1</a>和<a href="https://adoptioncurve.net/archives/2016/06/collection-view-updates-in-ios10-part-2/">Collection View Updates in iOS10 Part 2</a>。</p>

<h4>2) <a href="http://stackoverflow.com/a/32390612">Swift - try, try! &amp; try?的区别</a></h4>

<p>guard let result = try? doSomething() else {}是一个较为常用的代码范式。另外这种范式下若有异常，会被『翻译』成nil，所以不会捕获到具体的出错原因。故适用于只关注成功或失败这一结果的场景。</p>

<h2>工具</h2>

<h4>1) <a href="http://jaykon.github.io/2014/06/17/ioskai-fa-zhong-de-yan-se-wen-ti/">iOS开发中的颜色问题</a></h4>

<p>设计师给的颜色值标注，设置到app里显示不一致？可能和色彩标准不同有关。比如设计师用的是Generic RBG或者Adobe RGB，而程序里是基于sRGB。</p>

<h4>2) <a href="https://github.com/gskbyte/GSKStretchyHeaderView">GSKStretchyHeaderView</a></h4>

<p>类似Twitter个人中心页面的弹性视图。</p>

<h2>其他</h2>

<h4>1) <a href="https://github.com/linkedin/swift-style-guide">Swift Style Guide</a></h4>

<p>据说LinkedIn用Swift重写了自家的app，这是他们的代码规范。</p>

<h4>2) <a href="http://www.ituring.com.cn/book/397">写给大家看的设计书</a></h4>

<blockquote><p>如果要在简单表达和并不专业的设计之间做出选择，你应该选择简单表达。设计技能的逐步提高是从简单表达开始的。</p></blockquote>

<p>iPhone的成功，降低了产品经理（大部分只有抄袭还抄不好的能力）的门槛；APP的泛滥，降低了软件工程师（鱼龙混杂，水货较多）的门槛；iOS 7开始，降低了设计师（大部分也就是个Photoshop熟练工）的门槛。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第五期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/06/23/tech-notes-5/"/>
    <updated>2016-06-23T16:31:43+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/06/23/tech-notes-5</id>
    <content type="html"><![CDATA[<p>本期周报主要包括Xcode扩展、Method Swizzle、Git分支实践等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://daringfireball.net/linked/2016/06/22/ios-10-kernel">iOS 10 内核未加密</a></h4>

<p>苹果发言人称: “The kernel cache doesn’t contain any user info, and by unencrypting it we’re able to optimize the operating system’s performance without compromising security.”</p>

<h4>2) <a href="https://www.raywenderlich.com/135655/whats-new-swift-3">What’s New in Swift 3?</a></h4>

<p>虽然暂时还没必要迁移至Swift 3（下半年还会有改动），但语言的主要变动还是需要了解的。</p>

<h2>开发</h2>

<h4>1) <a href="http://www.russbishop.net/xcode-extensions">Xcode Source Editor Extension</a></h4>

<p>在菜单触发插件，XCSourceEditorCommand 拦截到该消息。我们从 invocation 中拿到 buffer，根据当前行可以获取到需要的数据。我的<a href="https://github.com/balloonsys/PAXcodePlugin">示例</a>是直接增加一行NSLog代码，所以把数据设置回去即可。</p>

<p>该教程不仅教你怎么做，还将可能遇到的问题及可尝试的解决方案写的很明白。我实现了一个打印当前方法名的插件，用以快速插入代码。另外，如果需要中文教程，可参看钟颖的<a href="https://zhuanlan.zhihu.com/p/21374552">文章</a>。</p>

<h4>2) <a href="http://xiongzenghuidegithub.github.io/blog/2016/04/22/runtimeying-yong-fang-zhi-an-niu-lian-xu-dian-ji/">借助Runtime防止按钮连续点击</a></h4>

<p>按钮连续点击的问题解决起来不难，使用Runtime交换SEL即可控制。</p>

<h4>3) <a href="http://www.jianshu.com/p/cabec2786241">UICollectionView的自定义布局</a></h4>

<p>这篇文章不是分享UICollectionView的详细使用教程，而是属于比较高级的使用技巧。</p>

<h2>工具</h2>

<h4>1) <a href="https://simpholders.com">SimPholders</a></h4>

<p>从menu快速访问iOS模拟器里的app目录。</p>

<h4>2) <a href="https://www.sqlitepro.com">SQLPro for SQLite</a></h4>

<p>移动端数据通常使用SQLite存储，若需要方便的管理其中的数据，请不要错过SQLPro for SQLite。另外插一句使用Core Data的经验，不同版本对应的sqlite文件最好本地保存一份。这样哪天需要测试数据迁移会省不少精力。</p>

<h2>其他</h2>

<h4>1) <a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a></h4>

<p>自从转行做iOS开发以来，一直使用Git做代码版本管理。而Git分支的最佳实践，个人最推崇<a href="http://nvie.com/about/">Vincent Driessen</a>的做法。之所以po这个，是因为昨天运维部宣讲了服务端代码分支的管理方案。</p>

<h4>2) <a href="http://mp.weixin.qq.com/s?__biz=MzA4ODgwNjk1MQ==&amp;mid=2653788317&amp;idx=1&amp;sn=b5ca8129c2ae99b37f1872d1bbe367c4">漫谈 Airbnb 支付的国际化</a></h4>

<blockquote><p>为了让古巴人也可以在 Airbnb 上租房，我们使用了 VaCuba 这种支付方式，其本质就是人工开着游艇、驾着飞机、骑着自行车，将现金像送货那样送到房东的家里。</p></blockquote>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第四期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/06/21/tech-notes-4/"/>
    <updated>2016-06-21T13:13:13+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/06/21/tech-notes-4</id>
    <content type="html"><![CDATA[<p>本期周报主要包括iMessage Extension的开发、Reveal的使用等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.augustyniak.me/post/2016/06/wwdc-sessions-watching-guide/">WWDC Videos Watching Guide</a></h4>

<p>另外也可以看一下百度Hi iOS团队写的<a href="http://baiduhidevios.github.io/2016/06/14/WWDC-2016-%E8%A7%82%E5%BD%B1%E6%8C%87%E5%8D%97/">WWDC 2016 观影指南</a>。</p>

<h4>2) <a href="http://www.theverge.com/2016/6/15/11940010/walt-mossberg-apple-wwdc-2016-recap-themes">Apple is still a world of its own</a></h4>

<p>文中提到了an Apple executive匿名回答为何不提供Android版iMessage。一是卖出的设备足够多，已经有足够量级的数据支撑其AI；二是有助于卖出更多苹果设备。</p>

<h2>开发</h2>

<h4>1) <a href="https://developer.apple.com/library/prerelease/content/samplecode/IceCreamBuilder/Introduction/Intro.html">iMessage App开发</a></h4>

<p>上周看<a href="https://twitter.com/jquave">Jason Newell</a>的文章<a href="http://jamesonquave.com/blog/creating-imessage-apps-with-xcode-8-tutorial-part-1/">Creating iMessage Apps on iOS 10 with Swift – Tutorial (Part 1)</a>做过一个iMessage Sticker，让用户发送平安『医食住行玩』这样的GIF动画。</p>

<p>最好的案例非苹果的官方Sample莫属，请点击标题中的链接。</p>

<h4>2) <a href="http://colin1994.github.io/2016/06/17/Call-Directory-Extension-Study/">来电黑名单</a></h4>

<p>iOS 10中引入了CallKit，意味着现在可以通过 Call Directory Extension 来实现电话黑名单功能了。</p>

<h4>3) <a href="http://jamesonquave.com/blog/adding-siri-to-ios-10-apps-in-swift-tutorial/">Intents Extension</a></h4>

<p>把玩SiriKit，更多内容请见该文的<a href="http://jamesonquave.com/blog/sirikit-swift-3-resolutions-sirikit-tutorial-part-2/">下篇</a>。更翔实的<a href="https://developer.apple.com/library/prerelease/content/samplecode/UnicornChat/Introduction/Intro.html#//apple_ref/doc/uid/TP40017332-Intro-DontLinkElementID_2">案例</a>还是看苹果的吧。</p>

<h2>工具</h2>

<h4>1) <a href="http://revealapp.com/blog/reveal-common-tips-cn.html">Reveal常用技巧</a></h4>

<p>通过Xcode中加断点的方式集成Reveal比较惊艳。iOS系统越狱之后使用Reveal查看别人App视图结构的过程可以参考这篇<a href="http://hihilong.com/2015/11/20/ios9-reveal-jailbreak-app/">文章</a>。</p>

<p>另外，听云某位工程师在某版本Reveal的dylib不支持arm时制作支持arm版的<a href="http://blog.tingyun.com/web/article/detail/262">实践</a>（其实那个时间点最新的Reveal完全支持啊！！！）</p>

<h4>2) <a href="https://github.com/noodlewerk/NWPusher">NWPusher</a></h4>

<p>做iOS 消息推送，需要测试推送证书、推送功能是否正常，强烈推荐使用这款小工具。省时、省力，避免和服务端扯皮。</p>

<h2>其他</h2>

<h4>1) <a href="http://azureyu.com/iOSDevRecord.html">iOS独立开发记录</a></h4>

<p>从想法、设计、开发到最终发布，总结个人开发APP的历程。</p>

<h4>2) <a href="http://www.ruanyifeng.com/blog/2016/05/time-management.html">时间管理的七句话</a></h4>

<p>网上有不少转载Facebook内部高效工作PPT指南的文章，配的中文不忍直视。推荐看这篇带注释的精华版。</p>

<blockquote><p>不要同时做多件事，结果可能都没做好，还拖长了工作时间。</p></blockquote>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第三期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/06/18/tech-notes-3/"/>
    <updated>2016-06-18T10:50:14+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/06/18/tech-notes-3</id>
    <content type="html"><![CDATA[<p>本期周报主要包括iOS 10的一些资讯，以及iOS一些常见问题的设计方案等。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://onevcat.com/2016/06/ios-10-sdk/">开发者所需要知道的iOS 10 SDK新特性</a></h4>

<p>从应用开发者的角度看，iOS 10中并没有加入太多内容。</p>

<h4>2) <a href="https://onevcat.com/2016/06/ios-10-ats/">关于iOS 10中ATS的问题</a></h4>

<p>从2017年1月1日起，所有的新提交app默认是不允许使用NSAllowsArbitraryLoads来绕过ATS限制的。</p>

<h2>开发</h2>

<h4>1) <a href="http://www.jianshu.com/p/0497afdad36d#">可复用而且高度解耦的用户统计埋点实现</a></h4>

<p>该埋点方案和我上个月做的统计SDK思路比较一致。不同的在于用户点击事件，文中的做法是拦截UIControl的方法，而我倾向于由APP自行埋点。主要原因在于，被hook的范围较广，同时我们点击事件埋点时，有酌情传入参数的额外需求。</p>

<h4>2) <a href="https://segmentfault.com/a/1190000005744865">iOS释放自注销模式设计</a></h4>

<p>作者描述的问题的确是我们开发中的痛点，只不过我对这篇文章理解的还不够，毕竟工程师的层次也是有差异的:P</p>

<h2>工具</h2>

<h4>1) <a href="https://medium.com/swift-and-ios-writing/a-quick-look-at-uiviewpropertyanimator-a107fb9da5b5">iOS 10 UIKit Animations</a></h4>

<p>我倒是对文章作者的开源库<a href="https://github.com/marmelroy/Interpolate">Interpolate</a>更感兴趣，哈哈！</p>

<h4>2) <a href="https://luckymarmot.com/zh-hans/paw">Mac最先进的HTTP客户端</a></h4>

<p>做iOS开发，联调API是件很麻烦的事情，特别是当提供API的是个开发新手。联调阶段我通常选用Paw而不是Postman。</p>

<h2>其他</h2>

<h4>1) <a href="https://developer.apple.com/support/beta-software/install-ios-beta/">iOS beta Software Installation Guide</a></h4>

<p>本周已采用Configuration Profile的方式安装了iOS 10的beta版，比Restore Image的方案更简便。</p>

<h4>2) <a href="http://www.jianshu.com/p/080d109a9984">每个IT人都应该了解的工作观和商业思维</a></h4>

<p>文中整理了来自37signals的两位联合创始人Rework一书的要点，个人特别喜欢这条：</p>

<blockquote><p>工作狂使得真正高效且不崇尚加班的员工感到无所适从，心怀愧疚，士气低落而且跟风加班，根本就不管到底有没有生产力。</p></blockquote>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/06/15/tech-notes-2/"/>
    <updated>2016-06-15T11:18:44+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/06/15/tech-notes-2</id>
    <content type="html"><![CDATA[<p>本期周报主要包括平安好房APP在模块化架构推进过程中遇到的一些有意思的技术问题，当然也有一点点关于WWDC 16的资讯（开发者版）。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.mac52ipod.cn/post/apple-wwdc-2016-event-5-min-briefintroduction.php">WWDC 2016 新系统发布会5分钟无废话版简介</a></h4>

<p>苹果还宣布了一个为 Flash/SSD储存设备优化的新文件系统Apple File System（APFS），希望对我那台老MBP有所帮助（前不久刚自己动手换了SSD）。APFS预计将在2017年发布，暂不会提供它的开源实现。</p>

<p>技术人员的目光不要被各类媒体的无脑小编带偏，至于其他方面的更新，此处不表，冷嘲也好、热讽也罢。</p>

<h4>2) <a href="https://zhuanlan.zhihu.com/p/21354243">关于 WWDC 16 总得说点什么</a></h4>

<p>开发者记录的一些感想，作者曾在QQ音乐团队独立完成Apple Watch端第一个版本，目前在阿里巴巴。</p>

<h2>开发</h2>

<h4>1) <a href="http://stackoverflow.com/questions/22018272/nsinvocation-returns-value-but-makes-app-crash-with-exc-bad-access">NSInvocation returns value but crash the app</a></h4>

<p>在平安好房APP推进模块化架构过程中，对一些曾经使用MRC的代码做了ARC迁移。冷不丁的被NSInvocation调用给坑了一把。</p>

<p>在ARC模式下，getReturnValue：仅仅是从invocation的返回值拷贝到指定的内存地址，如果返回值是一个NSObject对象的话，是没有处理内存管理的。而我们在定义returnValue时使用的是__strong类型的id类型，ARC就会假设该内存块已被retain（实际没有）。当returnValue出了定义域，被释放时，导致crash。</p>

<h4>2) <a href="http://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown">performSelector may cause a leak because its selector is unknown</a></h4>

<p>依旧是ARC迁移相关。在迁移到ARC之后，编译器给出了一个可能leak的警告。仔细研究后，决定采用SuppressPerformSelectorLeakWarning宏解决。</p>

<h4>3) <a href="https://www.raywenderlich.com/126365/ios-frameworks-tutorial">Creating and Distributing iOS Frameworks</a></h4>

<p>文章介绍了Framework模板的用法，特别是如何在项目中使用新建的Framework，其中的方案在好房统计SDK开发、架构演进过程中均实践过。</p>

<h2>工具</h2>

<h4>1) <a href="http://ayjkdev.top/2016/01/10/cocoapods-questions/">CocoaPods中一些问题的解决</a></h4>

<p>上一期周报提到过，目前不少公司模块化架构采用的CocoaPods方案。在使用CocoaPods的过程中难免遇到各类问题，翻翻这篇文章的总结，相信你会有些收获。</p>

<h4>2) <a href="http://www.schukin.com/achieving-awesomeness-with-local-cocoapods/">Achieving Awesomeness with Local CocoaPods</a></h4>

<p>作者（曾经是Twitter for Apple Watch的负责人）介绍了使用私有Pods的一些思考，有一段话非常赞同：</p>

<blockquote><p>While this approach works great if your Pods are stable, I’ve found that this doesn’t work too well if your Pods are still in active development; keeping them in lockstep with your application code can be a huge pain, particularly on larger teams with multiple feature branches.</p></blockquote>

<h4>3) <a href="http://soledad.me/blog/2015/12/21/octopress-and-el-capitan/">Octopress与El Capitan冲突问题解决方案</a></h4>

<p>近一年没有写blog，近一年没有用Octopress，所以与El Capitan冲突的问题也是上周末才知道。</p>

<p>小结一下：新系统下需要新的依赖库，而这些库需要ruby2.2.3的版本安装。</p>

<h2>其他</h2>

<h4>1) <a href="https://zhuanlan.zhihu.com/p/21350212">注册在开曼的公司，其期权究竟能不能买？</a></h4>

<p>updated on June 19: 当事公司是青云，看其<a href="http://media.weibo.cn/article?id=2309403987980699197994">回应</a>。</p>

<h4>2) 文摘</h4>

<p>人生的困扰大抵来自四个方面：不可避免的死亡，内心深处的孤独感，我们追求的自由以及生活并无显而易见的意义可言。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第一期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/06/12/tech-notes-1/"/>
    <updated>2016-06-12T05:18:37+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/06/12/tech-notes-1</id>
    <content type="html"><![CDATA[<p>每天都会读一些iOS开发相关的技术文章，以及一些移动平台资讯。零散的转发链接不如汇聚成文。作为首期，明确下周报的标准：分享的每篇文章质量需上乘、且必须是自己读过的。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://daringfireball.net/2016/06/the_new_app_store">Phil Schiller: Apple making major changes to the App Store</a></h4>

<p>苹果公司高级副总裁Phil确认50%的APP一天内审核，90%的APP会在两天内审核。所以近期平安好房的版本提交后迅速上线，不是偶然。</p>

<p>不只是期刊类应用可以按订阅收费，所有类型的APP均可以采用这种定价方式。而且，用户订阅一年后，开发者可以得到该用户所付金额的85%哦。</p>

<p>另外一点就是关于搜索广告了，详见链接。顺便插一句，daringfireball网站的博主是自媒体赚钱典范:-)</p>

<h4>2) <a href="http://techcrunch.com/2016/05/26/apple-is-working-rapidly-to-launch-apple-pay-in-more-countries-in-asia-and-europe">VP of Apple Pay: Apple Pay在欧洲及亚洲扩张</a></h4>

<p>说句题外话：Apple Pay在中国上线首日，我就去星巴克（员工熟悉度秒杀其他商户）体验了一把。刷完手机，需要再输入密码（此处的业务逻辑不赘述），手机相当于一张卡（我绑招行信用卡后，分配了个适用于该设备的虚拟卡号，Apple Watch对应另一个不同的虚拟卡号）。</p>

<h2>开发</h2>

<h4>1) <a href="https://www.raywenderlich.com/store/core-data-by-tutorials">Core Data by Tutorials, Second Edition</a></h4>

<p>iOS 9之后，Ray家的教程薄了许多，但质量依旧不赖。如果对Core Data不熟但想学习一下，建议翻看这本Core Data by Tutorials。如果了解一些，但对Core Data的版本化及历史数据迁移不熟，强烈推荐精读第六章Versioning and Migration（作者是Magical Record的作者）。阅读加实践，端午节期间我花了一个下午，很值。</p>

<h4>2) <a href="http://product.hubspot.com/blog/architecting-a-large-ios-app-with-cocoapods">Using CocoaPods to Modularize a Big iOS App</a></h4>

<p>近期看了些对新浪微博、滴滴打车等技术人员的访谈文章，深感基于CocoaPods的模块化架构是比较流行的做法。两年前hubspot分享的这篇文章貌似是源头，他们还提供了实例代码（自己动手找），对理解这一架构思路很有帮助。接下来打算在好房也实践一下，多一点动手、少一些空谈！</p>

<h4>3) <a href="http://www.jianshu.com/p/d684693f1d77">为遗留系统替换数据库</a></h4>

<p>系统级的重构，从来就不是个简单的活儿。好房APP在去年夏天做代码级的重构还引入了两个线上bug。该文作者采用先抽象数据访问层再替换数据库的思路值得借鉴。</p>

<h2>工具</h2>

<h4>1) <a href="https://developer.apple.com/library/ios/technotes/tn2434/_index.html">Minimizing your app’s Memory Footprint</a></h4>

<p>这是苹果近期释出的官方技术文档，教你如何优化APP的内存使用量。</p>

<h4>2) <a href="https://code.facebook.com/posts/583946315094347/automatic-memory-leak-detection-on-ios/">FBMemoryProfiler: Automatic memory leak detection on iOS</a></h4>

<p>这是Facebook一个多月前推出的工具，用于查找内存泄露问题。上周我在平安好房APP集成了下FBMemoryProfiler，但其目前的实用性并不理想。建议看看官方这篇介绍原理的文章。目前那些人云亦云、东抄西摘的技术周报尚无人提及这新潮的“玩具”，本人仅发现途牛网的工程师对此有所关注。</p>

<h2>其他</h2>

<h4>1) <a href="http://www.ui.cn/detail/67329.html">一款APP，从设计稿到切图</a></h4>

<p>如果设计师能把这篇文章好好消化下，且能将一部分付诸行动，项目的推进无疑会更顺畅些。作为首期周报，会穿插一些有价值但可能不是刚过去一周的文章。</p>

<h4>2）<a href="http://www.scrumguides.org/docs/scrumguide/v1/scrum-guide-us.pdf">The Scrum Guide</a></h4>

<p>多少公司、多少领导在扯敏捷开发的大旗？可能很多连软件工程、软件项目管理的门还没摸到呢，推荐看看这份简短的Scrum官方指南。其中有一段话还是很犀利的，好好体会吧。</p>

<blockquote><p>Scrum recognizes no sub-teams in the Development Team, regardless of particular domains
that need to be addressed like testing or business analysis; there are no exceptions to this
rule</p></blockquote>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这些年读过的iOS开发类图书]]></title>
    <link href="http://balloonsys.github.io/blog/2015/08/02/books-for-ios-programming/"/>
    <updated>2015-08-02T22:18:45+08:00</updated>
    <id>http://balloonsys.github.io/blog/2015/08/02/books-for-ios-programming</id>
    <content type="html"><![CDATA[<p>本文记录一下自2009年夏天接触iOS开发以来读过的书，仅是当时读完后不觉得后悔的那部分。</p>

<!--more-->


<h2>2015年（iOS 9 announced on June 8）</h2>

<h3><a href="http://book.douban.com/subject/26279783/">Programming iOS 8</a></h3>

<p>第二次在Amazon.com海淘技术书籍，一个月都没收到货，联系Amazon.com后他们用DHL重新发货，一周内收到。拿到书吓了一跳，太厚了！！！</p>

<p>作者是个博士，写的东西比较深入。该书还有一本姊妹篇，叫<a href="http://book.douban.com/subject/25929842/">iOS 8 Programming Fundamentals with Swift</a>。上半年我在Mac上挑着看的，已读完Chapter 2、3、4、5、10、11、12、13，对掌握Swift大有裨益。</p>

<p><img src="http://img4.douban.com/lpic/s28069906.jpg" alt="Programming iOS 8" /></p>

<h2>2014年（iOS 8 announced on June 2）</h2>

<h3><a href="http://book.douban.com/subject/26287812/">iOS Programming 4th Edition</a></h3>

<p>这是国外一个比较好的培训机构（BNR）出品的书，质量上乘。入门时若是借助此书，或许基本功可以更扎实些。他们家有一本<a href="http://book.douban.com/subject/19962787/">Objective-C编程</a>，是学习Objective-C的优秀教程，我是在手机上断断续续看完的。</p>

<p>离开前司，英文原版虽未看完，但也不得不归还。后来买了中译本，逐篇读完。其中第24章讲的程序状态恢复，是我之前不曾了解的内容。此书一直拖到2015年年中才读完，略微汗颜。</p>

<p><img src="http://img3.douban.com/lpic/s27970290.jpg" alt="iOS Programming 4th Edition" /></p>

<h2>2013年（iOS 7 announced on June 10）</h2>

<h3><a href="http://book.douban.com/subject/12890783/">iOS 6 Programming Pushing the Limits</a></h3>

<p>在Amazon.cn上买的原版书，该书干货多多，读起来偶尔会有点吃力，但多花点时间非常值得。关于缓存的设计，我直接用在了给绿城物业做的APP中。</p>

<p><img src="http://img3.douban.com/lpic/s24216653.jpg" alt="iOS 6 Programming Pushing the Limits" /></p>

<h2>2012年（iOS 6 announced on June 11）</h2>

<h3><a href="http://book.douban.com/subject/10750982/">iOS 5 By Tutorials</a></h3>

<p>第一次在Amazon.com海淘英文技术书籍。上下两卷，内容丰富，案例详实。但作者众多，个别章节写得不够好，然并不妨碍此书在我心中的地位。其中ARC、Storyboard、UIKit Customization等章节深入仔细的研读过。</p>

<p><img src="http://img3.douban.com/lpic/s9117190.jpg" alt="iOS 5 By Tutorials" /></p>

<h2>2011年（iOS 5 previewed on June 6）</h2>

<h3><a href="http://book.douban.com/subject/6697217/">iOS 4 in Action</a></h3>

<p>这一年的十月份在加州出差，期间在Amazon.com买了这本书（另外还买了本关于Cocos-2d的）。书么，中规中矩，不算差。第一次读英文原版的iOS教程，知识点并没记住太多。</p>

<p><img src="http://img3.douban.com/lpic/s6752591.jpg" alt="iOS 4 in Action" /></p>

<h2>2010年（iOS 4 available on June 21）</h2>

<h3><a href="http://book.douban.com/subject/4886880/">iPhone for Programmers: An App-Driven Approach</a></h3>

<p>这本书中文名叫iPhone应用程序开发名家解析，里面包含了好几个完整的小例子（基于3.x SDK）。这一年，我以某些例子为基础开发了若干自己的APP并发布到App Store（排名还不错哦）。</p>

<p><img src="http://img3.douban.com/lpic/s4529615.jpg" alt="iPhone for Programmers: An App-Driven Approach" /></p>

<h2>2009年（iPhone OS 3.0 available on June 17）</h2>

<h3><a href="http://book.douban.com/subject/3604295/">iPhone开发基础教程</a></h3>

<p>拿到本科学位证书没两个月，买了此书。2009年夏天那会儿，iOS中文资料并不多（下半年此书更新到3.0 SDK）。</p>

<p>作者讲解颇为细致，即使没有Objective-C的基础知识，照着书中的代码练练，很快就上手了。</p>

<p><img src="http://img4.douban.com/lpic/s3664046.jpg" alt="iPhone开发基础教程" /></p>

<h2>后记</h2>

<p>回头等定做的书架到了，把这些书顺序排列。每当瞥过书脊，应有一种好的回味。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid Nested Push Animation]]></title>
    <link href="http://balloonsys.github.io/blog/2015/07/04/avoid-nested-push-animation/"/>
    <updated>2015-07-04T21:28:39+08:00</updated>
    <id>http://balloonsys.github.io/blog/2015/07/04/avoid-nested-push-animation</id>
    <content type="html"><![CDATA[<p>在iOS 8里使用UINavigationController把一个页面Push出来后，很短的时间内再次Push一个页面，并没有太大问题，两个页面相继显示。但在iOS 7里运行会遇到nested push animation can result in corrupted navigation bar问题。</p>

<!--more-->


<h2>模拟项目</h2>

<h3>方法一</h3>

<p>给一个按钮添加点击事件，在事件响应里：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UIViewController</span> <span class="o">*</span><span class="n">detailPage</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIViewController</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'><span class="n">UIViewController</span> <span class="o">*</span><span class="n">anotherPage</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIViewController</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">detailPage</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="mf">0.3</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">),</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">anotherPage</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样一点击此按钮，便可模拟本文着重讨论的问题。</p>

<h3>方法二</h3>

<p>实际项目里有两个基于View实现的控件，点击时首先缩放一下控件里的图标，然后push一个页面。当点击控件A后，若快速点击控件B，就会发生nested push问题。</p>

<p>方法二中控件带有一定时长的缩放动画，给了用户足够的反应时间去连续点击。而方法一中是基于GCD代码模拟，可精确控制nested push的间隔。示例代码参见<a href="https://github.com/balloonsys/PushVC">PushVC示例之Initial Commit</a></p>

<h2>问题剖析</h2>

<p>首先，从UINavigationController这一层面考虑，在第一个push的动画还没完成，到来的第二个push请求，是否可以忽略？印象中貌似iOS 6就是这么处理的。</p>

<p>然后，我们也可以从UI层面控制，尽量不要在push过程中发起第二次push请求。</p>

<h2>解决方案</h2>

<p>UINavigationController在push过程中，如何忽略其他push请求呢？查看其Delegate，发现其中有如下两个方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="nf">navigationController:willShowViewController:animated:</span>
</span><span class='line'><span class="k">-</span> <span class="nf">navigationController:didShowViewController:animated:</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，我们可以基于UINavigationController建立NavController，增加一个名为inTransition的BOOL属性。将NavController的delegate指向自身，并实现上述两个delegate方法。在willShow中将inTransition置为YES，在didShow中置为NO。接下来重写pushViewController:animated方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pushViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">inTransition</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="err">@“</span><span class="n">Ignore</span> <span class="n">push</span> <span class="n">request</span> <span class="n">when</span> <span class="n">top</span> <span class="n">page</span> <span class="n">is</span> <span class="n">still</span> <span class="n">animating</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">pushViewController:</span><span class="n">viewController</span> <span class="nl">animated:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时运行模拟项目，快速点击两个控件后，控制台会出现“Ignore push request when top page is still animating”消息，说明使用NavController可以像iOS 6的UINavigationController那样成功避免Nested Push问题。</p>

<p>如前分析，我们也可以在UI层做控制，避免在Push过程中发起Push请求。仔细分析一下，第二次Push请求可能在控件的动画过程中发起，也可能在第一次Push过程中发起。所以，控件（示例中是基于View实现的）是否响应事件（示例中是基于tapGesture实现的）需要考虑两个条件。</p>

<h2>前端控制</h2>

<p>如何在动画过程中，避免另一个控件发起Push请求？我们可以在第一个控件的动画过程中，忽略触摸事件即可。核心代码是UIApplication的beginIgnoringInteractionEvents和endIgnoringInteractionEvents方法。主要代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tapped</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">iconView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">iconView</span><span class="p">.</span><span class="n">layer</span> <span class="nl">animationForKey:</span><span class="n">TAP_ANIMATION_KEY</span><span class="p">]</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">iconView</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation:</span><span class="p">[</span><span class="n">self</span> <span class="n">tapAnimation</span><span class="p">]</span> <span class="nl">forKey:</span><span class="n">TAP_ANIMATION_KEY</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">beginIgnoringInteractionEvents</span><span class="p">];</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">inAnimating</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="err">@“</span><span class="n">Do</span> <span class="n">NOT</span> <span class="n">tap</span> <span class="n">until</span> <span class="n">animation</span> <span class="k">for</span> <span class="o">%</span><span class="err">@</span> <span class="n">stopped</span><span class="err">”</span><span class="p">,</span> <span class="n">self</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">super</span> <span class="n">tapped</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">animationDidStop:</span><span class="p">(</span><span class="n">CAAnimation</span> <span class="o">*</span><span class="p">)</span><span class="nv">anim</span> <span class="nf">finished:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">flag</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">endIgnoringInteractionEvents</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">inAnimating</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">tapped</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然也可以判断是否有其他控件处于inAnimating状态，以决定是否忽略当前控件的触摸事件（gestureRecognizer:shouldReceiveTouch:）。</p>

<p>如何避免在Push过程中再次发送Push请求呢？我们可以在UIGestureRecognizerDelegate方法（方法名前面刚刚提过）中判断：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">recogniser</span> <span class="nf">shouldReceiveTouch:</span><span class="p">(</span><span class="n">UITouch</span> <span class="o">*</span><span class="p">)</span><span class="nv">touch</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NavController</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NavController</span> <span class="o">*</span><span class="n">nav</span> <span class="o">=</span> <span class="p">(</span><span class="n">NavController</span> <span class="o">*</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">!</span><span class="n">nav</span><span class="p">.</span><span class="n">inTransition</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的代码可以从Github获得，<a href="https://github.com/balloonsys/PushVC">PushVC之最新commit</a>。</p>

<p><strong>注</strong>：至于如何在不同commit之间切换代码，本文不再赘述。</p>

<h2>参考资料</h2>

<ol>
<li>苹果官方文档：<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UINavigationControllerDelegate_Protocol/">UINavigationControllerDelegate</a></li>
<li>苹果官方文档：<a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/multitouch_background/multitouch_background.html">Turn off delivery of touch events for a period</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于自定义表视图Cell遇到的一个bug]]></title>
    <link href="http://balloonsys.github.io/blog/2015/03/25/analysis-of-a-bug-in-customized-tableview-cell/"/>
    <updated>2015-03-25T23:02:19+08:00</updated>
    <id>http://balloonsys.github.io/blog/2015/03/25/analysis-of-a-bug-in-customized-tableview-cell</id>
    <content type="html"><![CDATA[<p>今天同事A遇到一个问题：包含一个按钮的TableView Cell，在iOS 6、iOS 8上点击按钮正常工作，但是在iOS 7上却无反应。同事B帮忙review了下代码发现，自定义的Cell在layout时，没有像平常那样调用一下[super layoutSubviews]。</p>

<!--more-->


<p>到这里本来事情也就过去了，但坐在旁边的我听了后，心中仍有几个疙瘩未解。</p>

<h2>iOS 7上点击Cell中的按钮，为何没有响应？</h2>

<h3>剖析问题</h3>

<p>因为没有安装iOS 7模拟器，就在手上的一台装有iOS 7系统的iPad Mini上运行。无法利用Color Blended Layer分析视图，便给Cell嵌套的各个子View分别设置了不同的背景色。最后发现在iPad上，content view只有一小块，目测仅320*44的样子，并没有期望的那么大（在iPhone上也没有覆盖到出状况的那个按钮范围啦）。此时基本可以判断出：<strong>子View在父视图边界之外，对其触摸无法被检测</strong>。但这终究是表面结论，问题的本质是什么呢？</p>

<p>对于iOS设备用户来说，操作设备的方式主要有三种：触摸屏幕、晃动设备、远程控制设备。对应的事件类型有以下三种：<br/>
- 触屏事件（Touch Event）<br/>
- 运动事件（Motion Event）<br/>
- 远端控制事件（Remote-Control Event）</p>

<p>点击按钮属于Touch Event，故接下来重点讨论触摸事件。</p>

<p>当应用发生触摸事件后，系统会将该事件添加至一个由UIApplication单例管理的事件队列。然后UIApplication会把触摸事件发给应用的key window对象，该window对象尝试将事件传递给事件所发生的那个view。这个view就是所谓的hit-test view。寻找hit-test view的过程叫hit-testing。</p>

<p>具体说来，此处table view是window的根视图，因此window首先对table view进行hit-test；显然用户点击范围在table view内，因此pointInside:withEvent:返回了YES，继续检查table view的子视图；为简化问题，假设仅有两个cell，分别称为CellA、CellB，点击范围不在CellA中，因此CellA的pointInside:withEvent返回NO，对应的hitTest:withEvent:返回nil；点击范围“看起来”在CellB中，但是，但是啊，CellB的content view没有期望的那么大，没有“包含”按钮范围，所以pointInside:withEvent：也是返回NO（注意：hitTest:withEvent:会在view的所有子view中递归调用，但在CellB上第一次调用pointInside:withEvent:方法时就返回NO的时候不会也没必要继续在该cell的子视图上递归了）。所以，此处触摸事件的hit-test view是table view，而不是期望的button。</p>

<p>table view（作为first responder）作为此时的hit-test view，但它并没有处理触摸事件，所以事件被传递给table view的next responder，此处为table view所在的controller。如果在controller里，实现了didSelectRow方法，则事件在此被处理掉；否则一直往next responder传递，到了window也处理不了则传递给application（响应链的最后一环）。如果application对象仍然无法处理，则系统会丢弃该事件。</p>

<p>以上通过分析事件的传递及响应，解释了第一个问题，即iOS 7上按钮关联的事件代码为何没有执行。</p>

<h3>解决问题</h3>

<p>方案一，在自定义Cell里重写hitTest:withEvent:方法，轮到检查按钮这个子view时，返回按钮视图。</p>

<p>方案二，既然问题出在content view没有期望的大上，就应该“尽量”让他如期望的那样大，即在cell的layoutSubViews时调用super方法。</p>

<h2>为何iOS 8正常，就iOS 7掉链子？</h2>

<h3>剖析问题</h3>

<p>iOS 6、8上自定义的cell既然能够正常设置content view的大小，说明content view本来是可以自动按照需要去设置自身大小的。毕竟，你在自定义的cell里都没有去特意为content view布局（未调super的layout方法）。</p>

<p>但iOS 7上content view没有自动调整，需要调用table view cell的layoutSubViews方法才行。说明iOS 7里table view cell的layout方法做了特别处理。</p>

<p>为何要特别处理？先大胆的猜测是跟cell的视图结构有关。本来嘛，从6到7时Cell滑动删除的样式都变了。但光猜测是不够的，我们可以一探其cell结构之究竟。</p>

<p>借助View的隐藏方法recursiveDescription，可以打印视图的层次结构。调用该方法时可以给View临时加下方法声明。</p>

<p>最终在iOS 7上我们发现：<strong>cell与contentView之间多了一层UITableViewCellScrollView</strong>。</p>

<p>给这个Scroll View设置背景色，发现它的bounds是期望的大小。可以猜测，不调用super的layout方法时，table view cell的根视图的大小会自动调整好（table view的宽、cell的高），但iOS 7上其根视图是Scroll View，Scroll View的大小调整好了，但是Scroll View的子视图（Content View）的大小需要我们自己保证。</p>

<h3>解决问题</h3>

<p>根据以上分析，该BUG场景下，明显应该采用方案二。</p>

<p>同时获得的教训是，苹果对其基础框架的实现是会有调整的，我们应该按照API的使用习惯来编码，比如调用super的viewDidLoad、layoutSubviews等不能少。否则，客户代码便会因框架代码的调整而受到影响。</p>

<p>再把开头说过的结论小结一遍：<strong>在当前view的bounds之外的触摸不会被接收，即使它是当前view的sub view。当你把当前view的clipToBounds属性设置成false，并且把subView移动到当前view的bounds之外的时候，这种情况就会出现</strong>。</p>

<h2>参考资料</h2>

<ol>
<li>苹果官方文档：<a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html#//apple_ref/doc/uid/TP40009541-CH4-SW2">Event Delivery: The Responder Chain</a></li>
<li>网络上的译文：<a href="http://nsdifficult.com/blog/20140314/event/">事件传递之响应链</a></li>
<li>一年前我写过的一篇关于hitTest文章：<a href="http://balloonsys.com/blog/2014/04/08/hit-test-sample/">hitTest示例</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 回顾]]></title>
    <link href="http://balloonsys.github.io/blog/2014/12/30/2014-summary/"/>
    <updated>2014-12-30T14:39:15+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/12/30/2014-summary</id>
    <content type="html"><![CDATA[<p>匆匆2014，仅剩明日。</p>

<!--more-->


<h2>工作</h2>

<h3>第一波求职，无果</h3>

<p>去年五月份离开工作多年的道富后，加入浙大计算机学院王老师的公司，负责杭州市城管委的一个移动客户端项目。虽然收入有所增长，但技术方面依然吃的老本。技术上未有长进，不过见识还是宽广了许多。综合考虑后觉得政府项目不是我所喜欢的，于是2014年春节之后便开始关注一些新的机会。</p>

<p>2014年2月21日上午11点，蘑菇街主客户端，和其技术面试官聊得不开心；下午2点，金山网络的PhotoGrid产品，笔试题好多，答得有挫败感；下午4点，同花顺，感觉面试我的两批人，面相都比较苦逼，提供的Offer也不是很满意，直接就拒了他们。</p>

<h3>第二波求职，贼船</h3>

<p>后来四月份在拉勾上又投了几家公司，回复率比较高。去其中两家面过，一个是丽子美妆（原娜拉化妆品商城）。我很不喜欢这家公司，大老远去面试，结果说技术负责人出差了。但是和他们家的HR比较聊得来。另一家是绿城物业集团投资的团队，为绿城的园区做线下线上服务的。这跟我之前做智慧城市、智慧社区的经历还是比较契合的，而且考虑到绿城的招牌，五一节刚过便加入了这家公司。</p>

<p>三位工程师加班加点一个半月把产品做出来了，但很快就发现这个公司的诸多问题。12月份，最初的三位工程师之一、负责JAVA端开发的兄弟，离开了团队。下个月，我也将离开。</p>

<h3>第三波机会，憧憬</h3>

<p>十二月份，蘑菇街支付团队的技术负责人（东大校友）约我去聊聊，后来一路下来拿到了Offer；平安好房的学长（以前在柯达也是同事）帮我内推，也很顺利的拿到了Offer。</p>

<p>对比手头的两个机会，个人更倾向于平安。主要考虑到这么几个方面：<br/>
1. 薪资，上来就压价的HR vs. 给你涨价的HR<br/>
2. 团队，JAVA面试官 vs. 非常资深的iOS工程师<br/>
3. 距离，杭州>>>盐城 vs. 上海>>>盐城</p>

<p><strong>今年获得的最大教训是，不要冒然加入一个不知底细的小公司！</strong></p>

<p>工作了五六年（2008.07开始全职实习），依然在求职、换城市，说起来略感惭愧。不过，在毕业后的第一个五年里（2009~2014），完成了买房、结婚、生娃等一系列重大事项，另外还准备好了装修款，个人对此还是很满意满足的。毕竟这些对于一个毫无家庭根基的人来讲，并不是轻而易举之事。</p>

<h2>生活</h2>

<p>春节时在老家摆了喜酒，很简单的走了个过场。四月份签了一份外包合同，五月份交付。五月份把杭州公共自行车助手（iPhone客户端）转让给了上海一家公司。六月份把多年前写的一款iPhone小游戏转让给了上海同一家公司。哈，业余兼职也是我生活的一部分:-)</p>

<p>七月底，喜得一女。生之前若干次产检、陪产一周、后续复检，我已经对浙江省妇保相当熟悉了。我妈、岳母也来杭州帮忙照顾了一阵。十一月，老婆孩子随我妈一起回老家。</p>

<p>下半年忙于公司项目，无精力打造自己的APP。有了小孩之后，空暇时间捉襟见肘。看书时间也少了许多。</p>

<p>年底搬离住了五年的紫金港，损失了一个月的押金（两千多）。在朋友家打地铺以度过在杭的最后几周。</p>

<h2>学习</h2>

<p>今年读完的书有：<br/>
- Objective C Programming by BNR<br/>
- 明朝那些事儿 共7册</p>

<p>在读的书有：<br/>
- iOS 6 by tutorials THIRD EDITION<br/>
- 无为而治</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift 语言基础（下）]]></title>
    <link href="http://balloonsys.github.io/blog/2014/09/23/basics-of-swift-part-b/"/>
    <updated>2014-09-23T10:11:08+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/09/23/basics-of-swift-part-b</id>
    <content type="html"><![CDATA[<p>本文主要记录Swift中关于Optional Type、集合等知识点。</p>

<!--more-->


<h2>可选类型（Optional Type）</h2>

<p>处于安全的设计考量，在Swift中未初始化的String不可以println。声明时设为nil后，println也不行，因为nil不是STR。</p>

<p>所以引入Optional Type，可以理解为对另一个类型的装箱（由本人引自Java的术语）。String?便是一个Optional Type，它是对String的包装。声明时不需要赋值为nil：var str: String?。此时println打印出nil。如果赋值为“Hello World”，打印Optional(“Hello World”)。</p>

<h3>手动拆箱（Manual Unwrapping）</h3>

<p>若需要拆箱，可以if let unwrappedStr = str {}。如果str为nil，if分支的代码块不会执行。值得注意的是，1）想要获得Optional Type所封装的那个值，必须用if语句拆箱；2）unwrappedStr的作用域为if代码块。</p>

<h3>强制拆箱（Forced Unwrapping）</h3>

<p>如果明确的知道Optional Type包含一个值，则可以使用强制拆箱（Forced Unwrapping）。具体写法是这样的：println(str!)。不必经过前面提到的if就可以拿到被包含的值。</p>

<h3>隐式拆箱（Implicit Unwrapping）</h3>

<p>强制拆包是声明Optional Type时用？，访问被包含的值时加个！。而隐式拆箱与之不同的是，声明时用！，访问被包含的值时什么都不需要加，就好像没有使用过Optional Type似的。</p>

<h3>可选链（Optional Chaining）</h3>

<p>声明一个Optional Type：var str: String?
可选消息链：let upperStr = str?.uppercaseString</p>

<p>1）可选链可以级联多次，这样便客观的降低if嵌逃层级 <br/>
2）使用Optional Chaining代码更简洁</p>

<h2>集合</h2>

<p>1) 无论是数组还是字典，都是用[] <br/>
注：ObjC里字典用的是{} <br/>
2）默认情况下，数组只能放同一类型的元素，除非显示或隐式声明为[AnyObject]类型 <br/>
3）将字典某key对应的值设为nil，即为删除 <br/>
4）字典的value为Optional Type <br/>
5）数组、字典，都是拷贝赋值 <br/>
6）使用let声明的常量集合，不可以append、remove</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift 语言基础（上）]]></title>
    <link href="http://balloonsys.github.io/blog/2014/09/21/basics-of-swift-part-a/"/>
    <updated>2014-09-21T22:59:56+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/09/21/basics-of-swift-part-a</id>
    <content type="html"><![CDATA[<p>周五花了54刀买了RW网站上的Swift by Tutorials，共261页。平均一页1块多软妹币啊！！！朋友圈有评论说：“很庆幸，只需要看两三百页，得其精髓，最怕书长！”。深以为然！</p>

<!--more-->


<p>本系列文章，为Swift by Tutorials的读书笔记。</p>

<h2>从Hello World开始</h2>

<p>为了耍耍Swift，首先得打开Xcode 6。在弹出的工程模板里选哪一个呢？这是个问题！</p>

<p>暂时的答案是，一个都不选，关掉！然后在File/New菜单中选择Playground即可。</p>

<p>啥都不说了，在打开的playground编辑区，直接输入println(“Hello World”)吧，此时便可以在右侧看到即时效果。</p>

<p>如果想看程序的运行结果，可以在View/Assistant中选择Show Assistant Editor。</p>

<h2>变量&amp;常量</h2>

<p>声明一个变量的方式：var str: String = “Hello World”，其中类型可以省略。</p>

<p>需要注意的是，类型可以省略不写，不代表Swift是动态类型语言。比如尝试给str变量赋23这样的整数值，就会报错。其类型由首次赋值推断出，此过程为Type Inference。</p>

<p>前面我们解释了类型可以省略不写，现在我们谈谈此处省略的String。此String相当于Obj-C的NSMutableString，是可变的。所以你可以进行这样的操作，str = str + “, I love you!”。</p>

<p>那如何创建一个“不可变”的字符串呢？将var换成let即可。使用let后，我们既不可以str = “Hello Swift”，也不可以str.append。</p>

<h2>数值类型</h2>

<p>浮点数与整数运算，需要显式的转换类型。Int.max + 1会直接报错而不是变成一个负数。</p>

<h2>逻辑类型</h2>

<p>var knowsSwift: Bool = true。此处只可以赋值true或者false，不像其他语言可以使用0或非0值。</p>

<h2>元组</h2>

<p>var product = (“iPhone 6”, 6000)。要输出商品名，我们可以使用println(product.0)。如果加价，可以这么写：product.1 += 100。</p>

<p>如果将元组product拆解成单个元素以方便访问，可以这么做：let (name, price) = product。这时，我们除了使用product.0访问商品名，还可以直接用name。</p>

<p>我们在声明并赋值元组时，还可以指定“属性名”：var product = (name: “iPhone 6”, price: 6000)。</p>

<h2>字符串操作</h2>

<p>输出product的信息，我们可以这么做：println(&ldquo;Price of (product.name) is (product.price)&rdquo;)。此为Swift的String Interpolation特性。相对于NSLog的format参数，方便不少。</p>

<p>另外，我们在使用String Interpolation时，还可以直接操作相关的变量。比如println(&ldquo;Price of (product.name) is (product.price + 100)”)。</p>

<h2>控制流</h2>

<h3>for循环</h3>

<p>for i in 1…5 {println (“(i)”)}
其中…为闭区间操作符（Closed Range Operator），相当于Range(start: 1, end: 6)。</p>

<h3>while循环</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>var <span class="nv">i</span> <span class="o">=</span> 0
</span><span class='line'><span class="k">while </span>i &lt; 5 <span class="o">{</span>
</span><span class='line'>  println<span class="o">(</span>“<span class="se">\(</span>i<span class="o">)</span>”<span class="o">)</span>
</span><span class='line'>  i++
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>if语句</h3>

<p>即使待执行的只有一行代码，也需要{}。</p>

<h3>switch语句</h3>

<p>Swift中，switch可以使用任何类型，不需要break语句，如果case不完备则必须有default语句。</p>

<p>case可以这么写：case “up”, “down”: println(“you pressed up or down”)。case还可以这么写：case 1..&lt;10: println(“between 1 and 10, 10 not included”)。</p>

<p>— EOF —</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在CentOS 6.5环境下安装Redmine]]></title>
    <link href="http://balloonsys.github.io/blog/2014/09/07/install-redmine-on-centos-6-dot-5/"/>
    <updated>2014-09-07T16:33:08+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/09/07/install-redmine-on-centos-6-dot-5</id>
    <content type="html"><![CDATA[<p>GitLab的Issue管理比较弱，如果开发测试为同一人的话，用用也还好。对于一个团队来讲，还是搭建个Redmine吧。</p>

<!--more-->


<h2>准备</h2>

<p>在<a href="http://baike.baidu.com/view/6313045.htm">bitnami</a>上下载<a href="http://baike.baidu.com/view/2228665.htm">Redmine</a>的<a href="https://bitnami.com/redirect/to/40137/bitnami-redmine-2.5.2-2-linux-x64-installer.run">Linux版</a>。</p>

<h2>安装</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>chmod +x bitnami-redmine-2.5.2-2-linux-x64-installer.run
</span><span class='line'>sudo ./bitnami-redmine-2.5.2-2-linux-x64-installer.run
</span></code></pre></td></tr></table></div></figure>


<p>根据相应的提示，选择语言、所需的组件等，非常简单。端口么，本人设的8081，如果启用了防火墙，或许你还需要做如下配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo vi /etc/sysconfig/iptables
</span></code></pre></td></tr></table></div></figure>


<p>添加-A INPUT -m state &ndash;state NEW -m tcp -p tcp &ndash;dport 8081 -j ACCEPT这条记录即可。打开浏览器访问<a href="http://">http://</a><ip_address>:8081/redmine，应该就OKay了。</p>

<h2>集成</h2>

<p>要用Redmine替换GitLab内嵌的Issue跟踪功能，只需做如下配置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo vi /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml
</span></code></pre></td></tr></table></div></figure>


<p>然后在External issue trackers部分，配置一下Redmine地址即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>issues_tracker:
</span><span class='line'>    redmine:
</span><span class='line'>      title: <span class="s2">&quot;Redmine&quot;</span>
</span><span class='line'>      project_url: <span class="s2">&quot;http://&lt;ip_address&gt;:8081/redmine/projects/:issues_tracker_id&quot;</span>
</span><span class='line'>      issues_url: <span class="s2">&quot;http://&lt;ip_address&gt;:8081/redmine/issues/:id&quot;</span>
</span><span class='line'>      new_issue_url: <span class="s2">&quot;http://&lt;ip_address&gt;:8081/redmine/projects/:issues_tracker_id/issues/new&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在浏览器中访问GitLab具体某个项目，此时项目的设置页面里已经可以选择Issue跟踪系统了。我们选择Redmine，同时将Redmine里对应的项目名称填在Project name or id in issues tracker区域。</p>

<p>OK，Redmine的安装、与GitLab的集成，均已大功告成，在GitLab里点击Issue标签会自动跳转到Redmine。</p>

<h2>后记</h2>

<p>至于如何将每次commit消息里的Fixes #issue_id和Redmine里的issue关联，暂时还没有研究。</p>

<p>另外需要注意的是，直接在gitlab.yml中做的修改会随sudo gitlab-ctl reconfigure的执行而丢失。按照gitlab.yml文件顶部注释的说法，应在gitlab.rb文件中配置，但具体怎么在这个文件里配Redmine，暂时也没有研究。</p>

<p>&ldquo;暂时没有研究"的事实是，研究了一小会儿后无功而返，也不想再花更多时间在上面，毕竟不影响我正常使用GitLab及Redmine。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在CentOS 6.5环境下安装GitLab]]></title>
    <link href="http://balloonsys.github.io/blog/2014/09/06/install-gitlab-on-centos-6-dot-5/"/>
    <updated>2014-09-06T11:32:15+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/09/06/install-gitlab-on-centos-6-dot-5</id>
    <content type="html"><![CDATA[<p>公司买了一台阿里云服务器部署项目测试坏境。看着服务器那么高的配置，便打算在上面搭建GitLab，以告别间歇性龟速的Bitbucket服务。当然喽，作为个人私有项目托管，我依然推荐使用BB。</p>

<!--more-->


<h2>准备</h2>

<p>查看服务器系统环境，以下载对应的GitLab包。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>uname -r <span class="c">#查看内核版本</span>
</span><span class='line'>cat /etc/redhat-release <span class="c">#查看发行版本</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据服务器信息CentOS release 6.5 (Final)，到<a href="https://about.gitlab.com/downloads/">GitLab | Package downloads</a>下载对应的<a href="https://downloads-packages.s3.amazonaws.com/centos-6.5/gitlab-7.2.1_omnibus-1.el6.x86_64.rpm">RPM</a></p>

<p>用curl下载比较慢，所以我改用迅雷下载，然后scp到服务器主目录下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>tar -zcvf gitlab.tar.gz gitlab-7.2.1_omnibus-1.el6.x86_64.rpm
</span><span class='line'>scp gitlab.tar.gz user_name@ip_address:~/
</span></code></pre></td></tr></table></div></figure>


<p>登录服务器，解压rpm文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ssh &lt;YOUR_USERNAME&gt;@&lt;YOUR_SERVER_IP&gt;
</span><span class='line'>tar -zxvf gitlab.tar.gz
</span></code></pre></td></tr></table></div></figure>


<h2>安装</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo yum install openssh-server
</span><span class='line'>sudo yum install postfix
</span><span class='line'>sudo service postfix start
</span><span class='line'>sudo chkconfig postfix on
</span><span class='line'>sudo rpm -i gitlab-7.2.1_omnibus-1.el6.x86_64.rpm
</span></code></pre></td></tr></table></div></figure>


<h2>配置</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo -e /etc/gitlab/gitlab.rb
</span></code></pre></td></tr></table></div></figure>


<p>将external_url设成服务器ip地址，然后执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo gitlab-ctl reconfigure
</span><span class='line'>sudo lokkit -s http -s ssh
</span></code></pre></td></tr></table></div></figure>


<p>在浏览器地址栏输入服务器ip，以访问GitLab。管理员用户名为root，初始密码为5iveL!fe，首次登录后会要求改密码。</p>

<h2>问题</h2>

<p>当我在服务器安装之前，先在本地的虚拟机跑了一遍，很正常。但是当安装到真实的服务器时，访问GitLab遇到了502错误。</p>

<p>在命令行执行sudo gitlab-ctl tail可看到错误信息，原来是因为8080端口被项目测试环境占用，unicorn无法启动。</p>

<p>所以，很自然的想到去修改GitLab的配置文件。最终的配置信息如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>external_url <span class="s1">&#39;http://&lt;YOUR_SERVER_IP&gt;:8888&#39;</span>
</span><span class='line'>redis<span class="o">[</span><span class="s1">&#39;port&#39;</span><span class="o">]</span> <span class="o">=</span> 6379
</span><span class='line'>postgresql<span class="o">[</span><span class="s1">&#39;port&#39;</span><span class="o">]</span> <span class="o">=</span> 5432
</span><span class='line'>unicorn<span class="o">[</span><span class="s1">&#39;port&#39;</span><span class="o">]</span> <span class="o">=</span> 9999
</span><span class='line'>nginx<span class="o">[</span><span class="s1">&#39;listen_address&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;&lt;YOUR_SERVER_IP&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Limit backup lifetime to 7 days</span>
</span><span class='line'>gitlab_rails<span class="o">[</span><span class="s1">&#39;backup_keep_time&#39;</span><span class="o">]</span> <span class="o">=</span> 604800
</span></code></pre></td></tr></table></div></figure>


<p>修改完配置文件，再次执行sudo gitlab-ctl reconfigure，等执行完成后打开浏览器，此时应该就可以访问GitLab了。</p>

<p>若访问被防火墙拦截（比如我在Mac上访问虚拟机里安装的CentOS），则执行下面操作即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo vi /etc/sysconfig/iptables
</span></code></pre></td></tr></table></div></figure>


<p>然后加入-A INPUT -m state &ndash;state NEW -m tcp -p tcp &ndash;dport 8888 -j ACCEPT</p>

<h2>更多</h2>

<ol>
<li>启动GitLab组件: gitlab-ctl start</li>
<li>停止GitLab组件: gitlab-ctl stop</li>
<li>重启GitLab组件: gitlab-ctl restart</li>
</ol>


<h2>补记 Sep 19th</h2>

<p>今天pull代码时遇到“the requested url returned error 500”这样的错误，到服务端用sudo gitlab-ctl tail查看了下得知是因为“PostgreSQL&rsquo;s request for a shared memory segment exceeded available memory”。</p>

<p>解决的办法是在Gitlab配置文件里加上下面这一行，然后reconfigure即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>postgresql<span class="o">[</span><span class="s1">&#39;shared_buffers&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;400MB&quot;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hitTest示例]]></title>
    <link href="http://balloonsys.github.io/blog/2014/04/08/hit-test-sample/"/>
    <updated>2014-04-08T14:53:20+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/04/08/hit-test-sample</id>
    <content type="html"><![CDATA[<p>早上翻看Github本周排名靠前的Objective-C开源项目，瞄了几眼<a href="https://github.com/wpsteak/PWParallaxScrollView">PWParallaxScrollView</a>的代码。发现其在ScrollView中嵌入Button，然后为了使得Button能接受点击事件是借助- hitTest:withEvent:实现的。</p>

<!--more-->


<p>一番Google，大致知道hitTest是干嘛的了。顺道写个Sample，改变默认的消息响应流。</p>

<h2>准备</h2>

<p>建立一个Single VC的工程，添加两个有部分重叠的Button，分别关联上touchUpInSide处理方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonAPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;You pressed button A&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">buttonBPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;You pressed button B&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为Button B(tag为102)是叠在Button A(tag为101)上面的，所以在重叠区域点击，控制台输出的是You pressed button B。这种情况下，如果希望收到消息的是Button A呢？那就用hitTest吧！</p>

<h2>实现</h2>

<p>建立一个UIView的子类，然后重写- hitTest:withEvent:方法，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nf">hitTest:</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)</span><span class="nv">point</span> <span class="nf">withEvent:</span><span class="p">(</span><span class="n">UIEvent</span> <span class="o">*</span><span class="p">)</span><span class="nv">event</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">UIView</span><span class="o">*</span> <span class="n">subview</span> <span class="k">in</span> <span class="n">self</span><span class="p">.</span><span class="n">subviews</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">convertedPoint</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">convertPoint:</span><span class="n">point</span> <span class="nl">toView:</span><span class="n">subview</span><span class="p">];</span>
</span><span class='line'>        <span class="n">UIView</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">subview</span> <span class="nl">hitTest:</span><span class="n">convertedPoint</span> <span class="nl">withEvent:</span><span class="n">event</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">tag</span> <span class="o">==</span> <span class="mi">101</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">super</span> <span class="nl">hitTest:</span><span class="n">point</span> <span class="nl">withEvent:</span><span class="n">event</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>紧接着，把Button的父视图，即根视图view对应的类设为刚创建的类型。运行，测试，看到效果了吧?!</p>

<h2>后记</h2>

<p>源代码里有乾坤，不注意看就错过了:-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于模板引擎的新闻内容展示]]></title>
    <link href="http://balloonsys.github.io/blog/2014/04/05/template-engine-in-action/"/>
    <updated>2014-04-05T18:45:39+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/04/05/template-engine-in-action</id>
    <content type="html"><![CDATA[<p>在为杭州市城管委开发贴心城管客户端时，城管动态这个模块的新闻展示是把新闻分成标题、时间、贴图、正文等部分，分别展示内容的。</p>

<!--more-->


<p>这样做的局限性不言而喻，不能图文并茂随心所欲的在文章内部嵌入图片且图片数量有一定的限制，而且服务端在发布新闻时也不方便做文章格式的编辑等。</p>

<p>在设计西子快讯时，便尝试了基于模板引擎的新闻内容展示。其实这样做，开发工作量并不大，因为开源社区有了高质量的模板引擎。</p>

<h2>思路</h2>

<ol>
<li>根据新闻的ID从服务端获得News实例对象（含标题、附图、正文等信息）</li>
<li>将获得的新闻各属性信息填充到APP内的HTML模板文件中</li>
<li>HTML模板可以指定CSS样式（同样存放在APP内）</li>
<li>经过模板引擎的处理得到最终的HTML内容</li>
<li>将处理后的HTML内容加载到WebView控件显示即可</li>
</ol>


<h2>开发</h2>

<h3>HTML模板</h3>

<p>准备好一个名为template.html文件，需要动态替换的部分用模板标签标识。</p>

<h3>显示样式</h3>

<p>news.css也不给出了，找个前端设计师结合项目需要提供一个即可。手动替换掉template.html中的参数，加上自己的news.css，便可在桌面浏览器里测试下效果。一切OKay的话，请继续阅读本文。</p>

<h3>替换模板参数</h3>

<p>我选择的模板引擎是MGTemplateEngine，到Github下载源代码加入到Xcode工程里，然后编写如下几行代码即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">MGTemplateEngine</span> <span class="o">*</span><span class="n">engine</span> <span class="o">=</span> <span class="p">[</span><span class="n">MGTemplateEngine</span> <span class="n">templateEngine</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">engine</span> <span class="nl">setMatcher:</span><span class="p">[</span><span class="n">ICUTemplateMatcher</span> <span class="nl">matcherWithTemplateEngine:</span><span class="n">engine</span><span class="p">]];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">templatePath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource:</span><span class="s">@&quot;template&quot;</span> <span class="nl">ofType:</span><span class="s">@&quot;html&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">newsContentHTML</span> <span class="o">=</span> <span class="p">[</span><span class="n">engine</span> <span class="nl">processTemplateInFileAtPath:</span><span class="n">templatePath</span> <span class="nl">withVariables:</span><span class="err">@</span><span class="p">{</span><span class="s">@&quot;title&quot;</span><span class="o">:</span> <span class="s">@&quot;Template based News client&quot;</span><span class="p">,</span> <span class="s">@&quot;editor&quot;</span><span class="o">:</span> <span class="s">@&quot;Linkou Bian&quot;</span><span class="p">}];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">newsContentWebView</span> <span class="nl">loadHTMLString:</span><span class="n">newsContentHTML</span> <span class="nl">baseURL:</span><span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">resourceURL</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>processTemplateInFileAtPath:withVariables中得variables参数是个字典，key对应template.html中的参数。注意示例代码中并没有把variables参数写完整。</p>

<p>另外html中的body_content参数对应的字符串应带有HTML标签，这样处理后的html内容放到WebView中显示效果会相对好很多。西子快讯便是这样设计与实现的。</p>

<p>除了在新闻顶部固定的位置显示新闻配图外，我们也可以在body_content参数对应的字符串中提供img标签以在文章任意位置插入图片。</p>

<h3>操作新闻内的多媒体文件</h3>

<p>如果需要点击图片以全屏展示，实现起来也非常简单。首先在template.html中加入一段JavaScript，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">extend_image</span><span class="p">(</span><span class="nx">element</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">imgTag</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;IMG&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">url</span><span class="o">=</span><span class="nx">imgTag</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;src&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s2">&quot;image://?url=&quot;</span><span class="o">+</span><span class="nx">url</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在img标签外增加点击调用extend_image(this)相关的HTML代码即可。</p>

<p>用户点击图片后，WebView的委托方法webView:shouldStartLoadWithRequest:navigationType:会被调用。我们可以解析reqeust的URL字符串来做相应的处理。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">url</span> <span class="nl">hasPrefix:</span><span class="s">@&quot;image://&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">imageURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">url</span> <span class="nl">substringFromIndex:</span><span class="p">[</span><span class="s">@&quot;image://?url=&quot;</span> <span class="n">length</span><span class="p">]];</span>
</span><span class='line'>    <span class="c1">// Present a new view controller and display the image full sreen</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然西子快讯尚未支持视频播放，但我觉得也可以采用类似的方案处理。</p>

<h2>后记</h2>

<p>个人认为采用这种方式的灵活性主要体现在，<br/>
1. 可以定义多套显示风格（如白天、黑夜），然后将样式名传给模板<br/>
2. 可以预设多套字体、字号（medium、large等），然后将样式名传给模板<br/>
3. 基于自定义URL及WebView的delegate方法，实现HTML与ObjC的交互</p>

<p>另外，除了MGTemplateEngine外，还有其他的模板引擎可以使用，比如GRMustache。至于孰优孰劣，什么场合选择哪个，截止目前我并没有做任何研究，等接到下一个需要模板引擎的项目再说吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[做iOS外包开发用到的工具]]></title>
    <link href="http://balloonsys.github.io/blog/2014/04/04/ios-dev-tools/"/>
    <updated>2014-04-04T16:27:54+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/04/04/ios-dev-tools</id>
    <content type="html"><![CDATA[<p>这个虚拟的Balloonsys工作室，总算发展到两位工程师了。</p>

<!--more-->


<h2>发展历史</h2>

<p>2010年8月第一次为成都一家公司做兼职开发，仅持续两周<br/>
2012年9月帮杭州一家公司发布应用<br/>
2014年4月终于签下了第一份APP开发合同</p>

<h2>第三方服务</h2>

<p>为自己、为别人开发iPhone应用的过程中，也使用过不少第三方服务。一直持续使用的有：<br/>
1. 私有代码托管 <a href="https://bitbucket.org">https://bitbucket.org</a> <br/>
2. 收集崩溃日志 <a href="https://www.crashlytics.com">https://www.crashlytics.com</a> <br/>
3. 测试版本分发 <a href="https://testflightapp.com">https://testflightapp.com</a> <br/>
4. 数据统计分析 <a href="http://www.appannie.com">http://www.appannie.com</a></p>

<h2>软件工具</h2>

<p>当一个关于APP的Idea萌生后，我会在草稿本上大致画出轮廓，想好每一页的交互，然后用下面的软件工具落地： <br/>
1. 网络请求分析 <a href="http://www.portswigger.net/burp/download.html">http://www.portswigger.net/burp/download.html</a> <br/>
2. 软件原型设计 <a href="http://www.apple.com/cn/mac/keynote/">http://www.apple.com/cn/mac/keynote/</a> <br/>
3. 接口服务文档 <a href="http://www.apple.com/cn/mac/pages/">http://www.apple.com/cn/mac/pages/</a> <br/>
4. 模拟接口实现 <a href="http://www.sublimetext.com">http://www.sublimetext.com</a> <br/>
5. 测试一下接口 <a href="http://luckymarmot.com/paw">http://luckymarmot.com/paw</a> <br/>
6. 买点现成图标 <a href="https://www.iconfinder.com">https://www.iconfinder.com</a> <br/>
7. 编辑矢量图标 <a href="http://www.bohemiancoding.com/sketch/">http://www.bohemiancoding.com/sketch/</a></p>

<p>在Mac上启动Burp后，把iPhone的代理服务器设置为MBPR的IP，端口为Burp中设置的那个。这样就可以在Burp中方便的看到手机上的网络请求详情。通过这种方式，我获得了不少第三方应用的API，然后开发了两款“非官方”的客户端。</p>

<p>利用Keynote做原型设计，这是从公司的咨询顾问那里学来的。感觉速度快，效果也很不错。在开发西子快讯前，我便用Keynote做了一份演示原型。</p>

<p>通常后端服务返回JSON格式的数据，为方便的观察API的Response，我喜欢用Paw这个工具，个人感觉比Post Man好用很多。</p>

<p>做客户端开发，对图标的需求还是蛮大的，按钮、菜单、启动图标等等。Icon Finder这个网站不光提供免费的图标下载，还有付费的图标，也不贵，而且提供SVG格式。利用Sketch，可以轻松修改颜色、大小等。</p>

<h2>个人小结</h2>

<p>荀子在劝学篇里说，“君子生非异也，善假于物也”！没错，做APP开发就是要善假于物也！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于iCarousel构建新闻头条]]></title>
    <link href="http://balloonsys.github.io/blog/2014/03/24/news-headline-in-action/"/>
    <updated>2014-03-24T16:25:24+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/03/24/news-headline-in-action</id>
    <content type="html"><![CDATA[<p>市面上大部分新闻客户端的布局，都是顶部放一个可以左右滑动的头条，下方是新闻列表。像网易新闻的头条部分，通常是新闻与广告穿插。因为近期正在开发类似的一个APP，现总结头条部分的构建步骤。</p>

<!--more-->


<h2>技术选型</h2>

<p>去code4app.com上搜索ScrollView相关的代码，会找到一些类似的代码示例，比如这个<a href="http://code4app.com/ios/EScrollerView/51935e166803fac572000003">EScrollView</a>。如果是本着学习的出发点，借鉴其思路并酌情修改其代码以满足自身项目需求，也不是难事。但如果要用在商业项目里，并期望获得足够的灵活性可能还需花费很多精力。</p>

<p>经过一番Google，在Github里找到了<a href="https://github.com/nicklockwood/iCarousel">iCarousel</a>这个控件，其示例代码中含不少例子，不过大部分例子的效果都是CoverFlow风格。但其中的Paging Example给了我灵感，把iCarousel View的高度设小一点，再额外加个page control及text label不就刚好么？欣喜之余，快速打开该示例的代码仔细阅读。</p>

<p>下面详细介绍如何基于iCarousel构建新闻头条。</p>

<h2>iCarousel简介</h2>

<h3>定制iCarousel视图</h3>

<p>拖一个UIView到View Controller的顶部，大小为320X190，类名设置为iCarousel，连接到一个名为headlinesView的Outlet。</p>

<p>在viewDidLoad中调用如下方法，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setupHeadlinesView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">headlinesView</span><span class="p">.</span><span class="n">type</span> <span class="o">=</span> <span class="n">iCarouselTypeLinear</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">headlinesView</span><span class="p">.</span><span class="n">pagingEnabled</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">headlinesView</span><span class="p">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">headlinesView</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>此处关键的一个属性便是pagingEnabled，设置后刚好符合期望的效果。</p>

<h3>为iCarousel提供数据</h3>

<p>iCarousel采用类似于table view的设计方式，提供了不少datasource及delegate方法。</p>

<p>下面这个方法告诉iCarousel共有几个cell item，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nf">numberOfItemsInCarousel:</span><span class="p">(</span><span class="n">iCarousel</span> <span class="o">*</span><span class="p">)</span><span class="nv">carousel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">kCoundOfHeadlineNews</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当需要加载某个cell view时，会调用viewForItemAtIndex，我们需在该方法里确保用于显示新闻头条图片的imageView被构建并设置相应地image。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nf">carousel:</span><span class="p">(</span><span class="n">iCarousel</span> <span class="o">*</span><span class="p">)</span><span class="nv">carousel</span> <span class="nf">viewForItemAtIndex:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">index</span> <span class="nf">reusingView:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">view</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UIImageView</span> <span class="o">*</span><span class="n">headlineImageView</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create new view if no view is available for recycling</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">view</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">view</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">self</span><span class="p">.</span><span class="n">headlinesView</span><span class="p">.</span><span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>        <span class="n">headlineImageView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">headlineImageView</span> <span class="nl">setImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;Headline_Placehold&quot;</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">headlineImageView</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="n">kHeadlineImageViewTag</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">headlineImageView</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">headlineImageView</span> <span class="o">=</span> <span class="p">(</span><span class="n">UIImageView</span> <span class="o">*</span><span class="p">)[</span><span class="n">view</span> <span class="nl">viewWithTag:</span><span class="n">kHeadlineImageViewTag</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Load image for headline news</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">headlineNews</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">headlineImageView</span> <span class="nl">setImageWithURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">headlineNews</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="n">img</span><span class="p">]]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">view</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码中的headlineNews是一个数组，用来存从远程服务器获得的头条新闻（Model）列表，其中img属性（头条新闻的字段）为对应图片的URL。当加载cell view时headlineNews可能还没有数据，所以上述代码做了个判断，即if (index &lt; self.headlineNews.count)。</p>

<p>当远端数据加载完毕，我们可以调用[self.headlinesView reloadData]以更新界面。</p>

<p>另外，往Image View设置远程图片，可以用SDWebImage提供的方法setImageWithURL，该框架可以有效的管理图片的缓存。</p>

<h3>定制iCarousel的行为</h3>

<p>当头条新闻滑到最后一页时，通常需要能够回到第一页。iCarousel提供了一个delegate方法以定制该控件的属性。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nf">carousel:</span><span class="p">(</span><span class="n">iCarousel</span> <span class="o">*</span><span class="p">)</span><span class="nv">carousel</span> <span class="nf">valueForOption:</span><span class="p">(</span><span class="n">iCarouselOption</span><span class="p">)</span><span class="nv">option</span> <span class="nf">withDefault:</span><span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nv">value</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">option</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">iCarouselOptionWrap:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>点击某一个cell view时，需要展示新闻详情页面。跳转的逻辑可以放在carousel:didSelectItemAtIndex:中。</p>

<h2>添加新闻标题</h2>

<p>标题（Label）与当前页指示控件（page control）并不属于iCarousel的cell view，因为整个滑动过程中只有一个Label和一个Page Control。所以我们可以在Storyboard中拖放相应控件作为iCarousel的子视图，再设置属性即可。</p>

<p>当滑动后，到达新页面时，可以在carouselCurrentItemIndexDidChange:中设置Label及Current Page。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用Flask的RESTful插件简化API开发]]></title>
    <link href="http://balloonsys.github.io/blog/2014/03/12/update-restful-api-with-flask-restful-extension/"/>
    <updated>2014-03-12T13:45:07+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/03/12/update-restful-api-with-flask-restful-extension</id>
    <content type="html"><![CDATA[<p>今天尝试用Flask的RESTful插件改造昨天写的API，使之更清晰明了。</p>

<!--more-->


<h2>准备工作</h2>

<p>进入昨天创建的虚拟开发环境venv，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>. venv/bin/activate</span></code></pre></td></tr></table></div></figure>


<p>安装flask-restful，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install flask-restful</span></code></pre></td></tr></table></div></figure>


<h2>开始改造</h2>

<h3>代码基础机构</h3>

<p>首先搭好Flask-Restful的代码框架，然后往里面填写代码，避免思路被打断。</p>

<p>在app = Flask(<strong>name</strong>)下方加入一行api = Api(app)，该api实例将用来注册路由。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span><span class="p">,</span> <span class="n">abort</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">url_for</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask.ext.httpauth</span> <span class="kn">import</span> <span class="n">HTTPBasicAuth</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">flask.ext.restful</span> <span class="kn">import</span> <span class="n">Api</span><span class="p">,</span> <span class="n">Resource</span>
</span><span class='line'>
</span><span class='line'><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
</span><span class='line'><span class="n">api</span> <span class="o">=</span> <span class="n">Api</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</span><span class='line'><span class="n">auth</span> <span class="o">=</span> <span class="n">HTTPBasicAuth</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@auth.get_password</span>
</span><span class='line'><span class="k">def</span> <span class="nf">get_password</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">username</span> <span class="o">==</span> <span class="s">&#39;linkoubian&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;7c4a8d09ca3762af61e59520943dc26494f8941b&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@auth.error_handler</span>
</span><span class='line'><span class="k">def</span> <span class="nf">unauthorized</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">make_response</span><span class="p">(</span><span class="n">jsonify</span><span class="p">(</span> <span class="p">{</span> <span class="s">&#39;error&#39;</span><span class="p">:</span> <span class="s">&#39;Unauthorized access&#39;</span> <span class="p">}</span> <span class="p">),</span> <span class="mi">403</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># return 403 instead of 401 to prevent browsers from displaying the default auth dialog</span>
</span><span class='line'>
</span><span class='line'><span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">u&#39;Buy groceries&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;description&#39;</span><span class="p">:</span> <span class="s">u&#39;Milk, Cheese, Pizza, Fruit, Tylenol&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;done&#39;</span><span class="p">:</span> <span class="bp">False</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">u&#39;Learn Python&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;description&#39;</span><span class="p">:</span> <span class="s">u&#39;Need to find a good Python tutorial on the web&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;done&#39;</span><span class="p">:</span> <span class="bp">False</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TaskListAPI</span><span class="p">(</span><span class="n">Resource</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TaskAPI</span><span class="p">(</span><span class="n">Resource</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">api</span><span class="o">.</span><span class="n">add_resource</span><span class="p">(</span><span class="n">TaskListAPI</span><span class="p">,</span> <span class="s">&#39;/todo/tasks&#39;</span><span class="p">,</span> <span class="n">endpoint</span> <span class="o">=</span> <span class="s">&#39;tasks&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">api</span><span class="o">.</span><span class="n">add_resource</span><span class="p">(</span><span class="n">TaskAPI</span><span class="p">,</span> <span class="s">&#39;/todo/tasks/&lt;int:id&gt;&#39;</span><span class="p">,</span> <span class="n">endpoint</span> <span class="o">=</span> <span class="s">&#39;task&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>提取验证逻辑</h3>

<p>然后为TaskListAPI及TaskAPI这两个资源分别添加初始化方法，以处理数据验证等。</p>

<figure class='code'><figcaption><span>TaskListAPI的初始化方法</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span> <span class="o">=</span> <span class="n">reqparse</span><span class="o">.</span><span class="n">RequestParser</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="nb">str</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">help</span> <span class="o">=</span> <span class="s">&#39;No task title provided&#39;</span><span class="p">,</span> <span class="n">location</span> <span class="o">=</span> <span class="s">&#39;json&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&#39;description&#39;</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="nb">str</span><span class="p">,</span> <span class="n">default</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">location</span> <span class="o">=</span> <span class="s">&#39;json&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">(</span><span class="n">TaskListAPI</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>TaskAPI的初始化方法</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span> <span class="o">=</span> <span class="n">reqparse</span><span class="o">.</span><span class="n">RequestParser</span><span class="p">()</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&#39;title&#39;</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="nb">str</span><span class="p">,</span> <span class="n">location</span> <span class="o">=</span> <span class="s">&#39;json&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&#39;description&#39;</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="nb">str</span><span class="p">,</span> <span class="n">location</span> <span class="o">=</span> <span class="s">&#39;json&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&#39;done&#39;</span><span class="p">,</span> <span class="nb">type</span> <span class="o">=</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">location</span> <span class="o">=</span> <span class="s">&#39;json&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">super</span><span class="p">(</span><span class="n">TaskAPI</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意RequestParser默认是从request.values中取值的，所以此处我们要指定location为json，以从request.json中解析传递过来的数据。</p>

<h3>重构新增task的代码</h3>

<figure class='code'><figcaption><span>旧的代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">create_task</span><span class="p">():</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">request</span><span class="o">.</span><span class="n">json</span> <span class="ow">or</span> <span class="ow">not</span> <span class="s">&#39;title&#39;</span> <span class="ow">in</span> <span class="n">request</span><span class="o">.</span><span class="n">json</span><span class="p">:</span>
</span><span class='line'>        <span class="n">abort</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="n">tasks</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s">&#39;id&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">json</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&#39;description&#39;</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;description&#39;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="s">&#39;done&#39;</span><span class="p">:</span> <span class="bp">False</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">tasks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span> <span class="p">{</span> <span class="s">&#39;task&#39;</span><span class="p">:</span> <span class="n">make_public_task</span><span class="p">(</span><span class="n">task</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>新的代码</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">args</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="n">tasks</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s">&#39;id&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="n">args</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&#39;description&#39;</span><span class="p">:</span> <span class="n">args</span><span class="p">[</span><span class="s">&#39;description&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s">&#39;done&#39;</span><span class="p">:</span> <span class="bp">False</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">tasks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="s">&#39;task&#39;</span><span class="p">:</span> <span class="n">make_public_task</span><span class="p">(</span><span class="n">task</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不光数据验证相关的代码被移除了，description的默认值也不必在新代码里体现。由于Flask-Restful会自动将数据转成JSON格式，所以jsonify函数也可不必调用。</p>

<p>另外，Flask-Restful插件提供的marshal功能，可以优雅的完成make_public_task的功能。只需定义一个数据模板，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">task_fields</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="n">fields</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="n">fields</span><span class="o">.</span><span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;description&#39;</span><span class="p">:</span> <span class="n">fields</span><span class="o">.</span><span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;done&#39;</span><span class="p">:</span> <span class="n">fields</span><span class="o">.</span><span class="n">Boolean</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;uri&#39;</span><span class="p">:</span> <span class="n">fields</span><span class="o">.</span><span class="n">Url</span><span class="p">(</span><span class="s">&#39;task&#39;</span><span class="p">,</span> <span class="n">absolute</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后将make_public_task(task)替换成marshal(task, task_fields)即可。</p>

<h3>重构更新task的代码</h3>

<p>原来代码中有大段的验证逻辑，现在可以统统去掉，只需如下编写方法即可，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">t</span><span class="p">:</span> <span class="n">t</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="nb">id</span><span class="p">,</span> <span class="n">tasks</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">task</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">abort</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
</span><span class='line'>    <span class="n">task</span> <span class="o">=</span> <span class="n">task</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">args</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">reqparse</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">args</span><span class="o">.</span><span class="n">iteritems</span><span class="p">():</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">v</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">task</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="s">&#39;task&#39;</span><span class="p">:</span> <span class="n">marshal</span><span class="p">(</span><span class="n">task</span><span class="p">,</span> <span class="n">task_fields</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>说明</h2>

<p>本文是根据<a href="http://blog.miguelgrinberg.com/post/about-me">Miguel Grinberg</a>写的这篇<a href="http://blog.miguelgrinberg.com/post/designing-a-restful-api-using-flask-restful">文章</a>翻译并整理的。</p>
]]></content>
  </entry>
  
</feed>
