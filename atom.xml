<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Balloonsys Inc.]]></title>
  <link href="http://balloonsys.github.io/atom.xml" rel="self"/>
  <link href="http://balloonsys.github.io/"/>
  <updated>2014-02-27T20:06:47+08:00</updated>
  <id>http://balloonsys.github.io/</id>
  <author>
    <name><![CDATA[Balloonsys Inc.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[与Auto Layout相关的各种知识点]]></title>
    <link href="http://balloonsys.github.io/blog/2014/02/27/hacking-auto-layout/"/>
    <updated>2014-02-27T15:17:15+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/02/27/hacking-auto-layout</id>
    <content type="html"><![CDATA[<p>Auto Layout不光为设计不同尺寸的界面带来了便利，在应用的多语言支持方面也有广泛使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于View的用法简介]]></title>
    <link href="http://balloonsys.github.io/blog/2014/02/25/introduction-about-view/"/>
    <updated>2014-02-25T15:50:00+08:00</updated>
    <id>http://balloonsys.github.io/blog/2014/02/25/introduction-about-view</id>
    <content type="html"><![CDATA[<p>本文主要针对iOS的视图相关的用法作一些介绍。</p>

<h2>The Window</h2>

<p>当应用启动时，UIApplicationMain会创建一个appDelegate实例。App Delegate会“持有”一个window实例（strong型）。所以window对象的生命周期与应用一致。</p>

<p>获得window实例有三种方式：<br/>
1. view.window<br/>
2. [UIApplication sharedApplication].delegate.window <br/>
3. [UIApplication sharedApplication].keyWindow</p>

<p>需要注意的是keyWindow有可能发生变化，比如当显示UIAlertView时，keyWindow为该弹出框！</p>

<h2>Subview and Superview</h2>

<p>关于父子视图间的常见操作主要有：<br/>
1. 限制子视图只在父视图区域内绘制，可设置父视图的clipsToBounds属性<br/>
2. 判断一个视图是不是另一个的子孙视图，可以用isDescendantOfView:<br/>
3. 子视图从父视图中移除掉，会被“释放”。若后续需使用，可另行“持有”<br/>
4. 与视图结构相关的几个方法：<br/>
insertSubview:atIndex:<br/>
insertSubview:belowSubview:<br/>
exchangeSubviewAtIndex:withSubviewAtIndex:<br/>
bringSubviewToFront:<br/>
5. 将父视图的所有子视图移除掉，可以用下面这种写法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">view</span><span class="p">.</span><span class="n">subviews</span> <span class="nl">makeObjectPerformSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">removeFromSuperView</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Visibility and Opacity</h2>

<p>Alpha，可理解为相对于父视图的不透明度。所以即使一个视图的alpha值为1，它也有可能是透明的。</p>

<p>Opaque，不是用来影响视图的显示，而是用于绘图系统的一个hint值，以便绘制更加高效。</p>

<h2>Bounds, Center and Frame</h2>

<p>Bounds代表的是视图自身的坐标系，而frame表示的是该视图在父视图中的位置。</p>

<p>改变bounds的宽高，会影响其frame，保持不变的是center值。改变bounds的origin值，相当于说该视图坐标系左上角那个点的值被改变，因此其坐标系的原点移到其他位置了。而子视图是在父视图的坐标系里定位的，所以子视图会因父视图的origin变化而逆向变化。</p>

<p>Center是视图bounds的中心点在父视图中的位置。Center加bounds相当于frame。</p>

<p>假如v2是v1的子视图，要想把v2放在v1的中心，可以这么做，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">v2</span><span class="p">.</span><span class="n">center</span> <span class="o">=</span> <span class="p">[</span><span class="n">v1</span> <span class="nl">convertPoint:</span><span class="n">v1</span><span class="p">.</span><span class="n">center</span> <span class="nl">fromView:</span><span class="n">v1</span><span class="p">.</span><span class="n">superview</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Transform</h2>

<p>将视图v顺时针旋转45°，可以设置其transform属性为CGAffineTransformMakeRotation(45*M_PI/180.0)。此时v的frame是旋转后的v的外接矩形。其子视图虽然也跟着旋转，但子视图的frame并无变化，因为v的bounds不变（即v自身的坐标系不变）。</p>

<p>拉伸函数CGAffineTransformMakeScale会使得视图的frame发生变化，但其bounds保持不变。子视图的frame、bounds、center值均保持不变。</p>

<p>组合若干变换应用到视图上，下面代码先将v旋转，然后在沿着自身坐标系的x轴方向平移100个点。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeRotation</span><span class="p">(</span><span class="mi">45</span> <span class="o">*</span> <span class="n">M_PI</span><span class="o">/</span><span class="mf">180.0</span><span class="p">);</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformTranslate</span><span class="p">(</span><span class="n">v2</span><span class="p">.</span><span class="n">transform</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以使用CGAffineTransformConcat组合多个变换，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CGAffineTransform</span> <span class="n">r</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeRotation</span><span class="p">(</span><span class="mi">45</span> <span class="o">*</span> <span class="n">M_PI</span><span class="o">/</span><span class="mf">180.0</span><span class="p">);</span>
</span><span class='line'><span class="n">CGAffineTransform</span> <span class="n">t</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeTranslation</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformConcat</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">r</span><span class="p">);</span> <span class="c1">// not r,t</span>
</span></code></pre></td></tr></table></div></figure>


<p>撤销组合变换中的某个变换，只需再次叠加其反变换。比如需要将v在新位置逆时针旋转45°，只需执行下面这行代码，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">v</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformConcat</span><span class="p">(</span><span class="n">CGAffineTransformInvert</span><span class="p">(</span><span class="n">r</span><span class="p">),</span> <span class="n">v</span><span class="p">.</span><span class="n">transform</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Layout</h2>

<p>Xcode 5的视图编辑器支持预览不同尺寸不同方向的屏幕效果。打开视图文件，切换到Assistant Editor模式，即左边视图编辑器右边代码。在代码区域的上方导航条中，选择Preview。此时右下方会出现一组界面预览按钮。</p>

<p>Autoresizing发生在layoutSubviews执行之前，所以手动设置布局可放在layoutSubviews方法中。</p>

<p>自定义的view，如果需要支持Auto-layout，需要在requiresConstraintBasedLayout返回YES。</p>

<h3>Constraints</h3>

<p>约束是用NSLayoutConstraint表示的。两个视图之间存在约束，并不要求这两个视图有父子关系或兄弟关系，只需要有共同的祖先。</p>
]]></content>
  </entry>
  
</feed>
