<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Balloonsys Inc.]]></title>
  <link href="http://balloonsys.github.io/atom.xml" rel="self"/>
  <link href="http://balloonsys.github.io/"/>
  <updated>2016-11-23T16:14:16+08:00</updated>
  <id>http://balloonsys.github.io/</id>
  <author>
    <name><![CDATA[Linkou Bian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十八期）[草稿]]]></title>
    <link href="http://balloonsys.github.io/blog/2016/11/23/tech-notes-28/"/>
    <updated>2016-11-23T09:31:19+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/11/23/tech-notes-28</id>
    <content type="html"><![CDATA[<p>本期周报主要包括iPhone 6s 意外关机问题计划、APP 缓存数据线程安全问题探讨、如何用私有 API 让 WKWebView 支持 NSURLProtocol 子类、如何解决 JSONKit 引起 RN 的 Crash 等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://www.apple.com/cn/support/iphone6s-unexpectedshutdown/">iPhone 6s 意外关机问题计划</a> By Apple</h4>

<p>Apple 已经确认有部分 iPhone 6s 设备可能会意外关机，符合条件的可以免费更换电池。</p>

<h2>开发</h2>

<h4>1) <a href="http://blog.cnbang.net/tech/3262/">APP 缓存数据线程安全问题探讨</a> By 陈振焯</h4>

<p>对于 APP 缓存数据线程安全问题，分线程 cache 和数据不可变是比较常见的解决方案，都有着不同的实现代价。前者接口不友好，后者需要配合单向数据流之类的规则或框架才会变得好用。</p>

<h4>2) <a href="https://blog.yeatse.com/2016/10/26/support-nsurlprotocol-in-wkwebview/">让 WKWebView 支持 NSURLProtocol</a> By Yeatse</h4>

<p>WKWebView 还没有完善到能完全替代 UIWebView 的程度。比如 WKWebView 中的请求却完全不遵从自定义 NSURLProtocol 子类，本文介绍了如何用私有方法解决此痛点。</p>

<h4>3) <a href="https://github.com/johnezang/JSONKit/issues/176">JSONKit makes React Native Crash</a></h4>

<p>在 React Native 0.33 时，我们是通过<a href="https://github.com/facebook/react-native/issues/7055">修改 RN 源代码</a>规避 JSONKit 引起的 Crash 问题；升级到 RN 0.35 后，将 JSONKit.m 中的 *((void **)XXX) 替换成 object_getClass(XXX) 也可解决此问题。</p>

<h2>工具</h2>

<h4>1) <a href="http://mrpeak.cn/blog/mitmproxy/">免费抓包工具 mitmproxy</a> By MrPeak</h4>

<p>似乎知道 Charles 的同学更多一些，但其实 Charles 有的功能 mitmproxy 基本都有，mitmproxy 还免费，而且对于 terminal 用户来说使用起来更亲近。</p>

<h2>其他</h2>

<h4>1) <a href="https://techcrunch.com/2015/03/03/in-the-age-of-disintermediation-the-battle-is-all-for-the-customer-interface/">The Battle Is For The Customer Interface</a> By Tom Goodwin</h4>

<p>本文就是下面这段被无数人转载了的话的出处：</p>

<blockquote><p>Uber是最大的出租车公司，但并不拥有任何车；FB是最大的媒体公司，但不自己生产内容；阿里巴巴是最大的零售商，但没库存；Airbnb是最大的旅馆，但不拥有房产。</p></blockquote>

<p>互联网成就了这些公司，让他们有能力提供一层看似非常简单的用户界面，大规模地连接供需双方。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十七期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/11/18/tech-notes-27/"/>
    <updated>2016-11-18T15:05:15+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/11/18/tech-notes-27</id>
    <content type="html"><![CDATA[<p>本期周报主要包括如何实现在 TableView 中滑动播放视频、无法获取真实进度时如何做个优雅的进度动画、Sierra 显示隐藏文件的快捷方式、破窗效应等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://www.bloomberg.com/news/articles/2016-11-17/apple-is-said-to-cut-fees-video-services-will-pay-for-app-store">Apple to Cut Fees Video Services Will Pay for App Store</a> By Lucas Shaw</h4>

<p>苹果计划将 App Store 视频服务接入的费用从 30% 降到 15%，这意味着视频服务供应商在苹果各平台的运营成本将大幅降低。</p>

<h2>开发</h2>

<h4>1) <a href="http://www.jianshu.com/p/3946317760a6">滑动 TableView 自动播放视频</a> By NewPan</h4>

<p>本文介绍了如何实现在 TableView 中滑动播放视频，并且是没有任何卡顿的实现滑动播放视频。同时也将讲述如何确定哪一个 Cell 播放视频。</p>

<h4>2) <a href="http://mrpeak.cn/blog/http-upload-progress/">Http 文件上传进度为什么不准</a> By Peak</h4>

<p>我们调用第三方 http framework 上传文件的时候，都会有 API 回调告诉我们上传的具体进度，但这个进度值都是不准的。本文介绍了此情况下如何做个优雅的进度动画。</p>

<h2>工具</h2>

<h4>1) <a href="https://twitter.com/24says/status/780677320197574656">Sierra 显示隐藏文件</a> By 24Says</h4>

<p>macOS Sierra 里可以通过 CMD + Shift + . 直接在 Finder 里显示隐藏文件。</p>

<h4>2) <a href="https://github.com/BeauNouvelle/FaceAware">FaceAware</a> By Beau Nouvelle</h4>

<p>现在大部分 APP 里的个人中心页面，都会提供设置头像的功能，这个 Swift 库会根据脸部位置以最优的方式展示头像。</p>

<h2>其他</h2>

<h4>1) <a href="https://blog.codinghorror.com/the-broken-window-theory/">The Broken Window Theory</a> By Jeff Atwood</h4>

<p>环境中的不良现象如果被放任存在（如社区中某些建筑的窗户破了而没被修复），就会诱使人们仿效（人们就认为破窗户是正常的，就会破坏更多窗户），甚至变本加厉。公司里的垃圾代码不被及时修复，就会被更多人效仿。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十六期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/11/11/tech-notes-26/"/>
    <updated>2016-11-11T23:13:12+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/11/11/tech-notes-26</id>
    <content type="html"><![CDATA[<p>本期周报主要包括库克关于总统大选结果的内部信、携程在实践 React Native 时的优化经验、JSPatch 热修复文件的加载方案、App 销售报表工具等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://techcrunch.com/2016/11/10/tim-cook-apple-donald-trump-election-win/">Move Forward Together</a></h4>

<p>关于总统大选，苹果 CEO 库克致信美国员工。他表示，无论谁都无法阻挡苹果前进的脚步，唯有携手前进才能变得更好。</p>

<h2>开发</h2>

<h4>1) <a href="http://techshow.ctrip.com/archives/1459.html">携程是如何做 React Native 优化的</a> By 赵辛贵</h4>

<p>两周前去携程现场聆听了赵老师的分享，真的非常非常的赞。该讲座对我而言很有启发性，可以很好的指导我新技术框架如何研究、实践、改进。</p>

<h4>2) <a href="https://github.com/bang590/JSPatch/wiki/JSPatch-Loader-%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3">JSPatch Loader 使用文档</a> By 陈振焯</h4>

<p>集成 JSPatch 到 iOS 项目里的主要工作在于实现一套安全的热修复脚本下发与加载的机制。如果想自己实现而不是购买 JSPatch Platform 提供的服务，可以读一读作者写的这篇文章。</p>

<h2>工具</h2>

<h4>1) <a href="http://www.appwage.com">AppWage</a> By Hankinsoft</h4>

<p>这是一个开源的 iTunes Connect 报表工具，开发商的另一款收费软件 SQLPro for SQLite 我也一直在用。</p>

<h4>2) <a href="http://www.jianshu.com/p/05b68c84913a">iOS 性能调优</a></h4>

<p>提供了基于 Swift 3.0 模仿新浪微博的 Demo，里面针对于微博首页的复杂页面的优化做了很多的处理，页面的 FPS 一直保持在 59 ~ 60。</p>

<h2>其他</h2>

<h4>1) <a href="http://highscalability.com/blog/2016/6/20/the-technology-behind-apple-photos-and-the-future-of-deep-le.html">Apple Photos 背后的技术与用户的隐私</a> By highscalability</h4>

<p>Apple 使用 differential privacy 技术收集用户数据到云端训练 model，但从这些数据中无法识别出具体的个体；这些 model 下载到手机，依靠强大的手机性能进行分析，识别，归类你的照片；理论上分析的结果只留在你的手机上。</p>

<h4>2) <a href="http://randsinrepose.com/archives/the-process-myth">The Process Myth</a> By Michael Lopp</h4>

<p>工程师尤其看不惯公司里的各种规章制度、各种条条框框，所谓的 process；工程师们老爱问为什么，为什么会有这样那样的规定。公司里指定规章制度的人又都不给你解释为什么，“历来就如此，别问那么多为什么”。</p>

<blockquote><p>It’s a myth, but healthy process is awesome if it not only documents what we care about, but is willing to defend itself. It is required to stand up to scrutiny and when a process fails to do so, it must change.</p></blockquote>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十五期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/11/04/tech-notes-25/"/>
    <updated>2016-11-04T19:51:17+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/11/04/tech-notes-25</id>
    <content type="html"><![CDATA[<p>本期周报主要包括 App Store 新增支付宝付款、iOS 静态库及动态库开发经验总结、Today Widget 在低版本系统上的兼容开发经验等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.mac52ipod.cn/post/apple-app-store-support-alipay.php">App Store 应用商店支持支付宝付款</a> By bmwmengwei</h4>

<p>此新闻看标题即可，我已经从信用卡切换到支付宝了。因为之前老是弹出信用卡信息验证的页面，希望以后不再被打扰。</p>

<h4>2) <a href="http://www.ifanr.com/739044">苹果确认放弃独立显示屏业务</a></h4>

<p>The Verge 编辑 Nilay Patel 从苹果方面确认，苹果选择放弃独立显示屏业务，此后苹果的显示屏生产将全部交由 LG 等生产商伙伴负责。</p>

<h2>开发</h2>

<h4>1) <a href="http://balloonsys.com/blog/2016/11/04/static-vs-dynamic-lib/">iOS 静态库及动态库开发</a> By Linkou Bian</h4>

<p>本文总结在好房移动架构团队做 Framework 开发中的一些经验。特别是动态库部分的实践，干货满满。</p>

<h4>2) <a href="https://kristina.io/backwards-compatibility-with-ios-10-today-widgets/">Tips for Backwards Compatibility with iOS 10 Today Widgets</a> By Kristina Thai</h4>

<p>作者介绍了开发 Today Widgets 兼容 iOS 9 / 10 的三点经验，对做 Widget 开发的朋友还是有益处的。</p>

<h4>3) <a href="http://fanhang.me/ios/-ge-cai-gua-ying-swift2.2de-kai-fa-zhe-yan-zhong-de-swift-3.0he-ios-10">一个才适应 Swift 2.2 的开发者眼中的 Swift 3.0</a> By amoyio</h4>

<p>文中大部分内容之前的周报都有过分享，重点关注下 1.7、2.5、3.8、4.4、4.5 等。关于 Swift 3 的适配，本周也有其他工程师分享了经验，吐槽居多。</p>

<h2>工具</h2>

<h4>1) <a href="http://eprev.org/2015/08/06/change-os-x-network-location-based-on-the-wi-fi-network-name/">Network Location Changer</a> By Anton Eprev</h4>

<p>通常在公司需要使用内网的 DNS，而我在家往往希望使用阿里的 DNS，可以在网络首选项建立不同的 Location 以满足此需求。Anton 提供的这个脚本不光可以自动切换 Location 还提供了额外的功能。</p>

<h2>其他</h2>

<h4>1) <a href="https://steveblank.com/2016/10/24/why-tim-cook-is-steve-ballmer-and-why-he-still-has-his-job-at-apple">Why Tim Cook is Steve Ballmer and Why He Still Has His Job at Apple</a> By Steve Blank</h4>

<p>产品型、有远见的CEO离开公司后都传位给曾经执行力强但不懂做产品的下属，公司靠着前任CEO定下的牛逼的商业模式，再加上现任强执行力的CEO，盈利还能增长几年，只是不创新了。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 静态库及动态库开发]]></title>
    <link href="http://balloonsys.github.io/blog/2016/11/04/static-vs-dynamic-lib/"/>
    <updated>2016-11-04T18:48:51+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/11/04/static-vs-dynamic-lib</id>
    <content type="html"><![CDATA[<p>本文总结在好房移动架构团队做 Framework 开发中的一些经验。</p>

<!--more-->


<p>之前负责好房 APP 开发时，需要支持 iOS 7+，所以五月份设计统计 SDK 时只好采用静态库的方式。随着 iOS 10 的推出，iOS 7 的支持默认被移除，结合 APP 的用户设备分布，目前 APP 已改为支持 iOS 8+，所以上个月设计的 React Native 增量 Patch 更新 SDK 可采用动态库的方案。</p>

<p>至于 iOS 中静态库与动态库的差别，网上有很多文章介绍，本文不再赘述，而将重点放在这两种库的具体开发实现过程。</p>

<h2>静态库</h2>

<p>Google 的工程师已经写了一篇非常赞的<a href="https://github.com/jverkoey/iOS-Framework">文章</a>，好房统计 SDK 就是按照此方案一步步配置的。经验证，效果非常好。其提供的脚本也很精致，无冗余。</p>

<p>当然 Raywenderlich 的网站也有一篇<a href="https://www.raywenderlich.com/65964/create-a-framework-for-ios">文章</a>，方案类似，相比于 Google 程序员写的指南，多个实例。初次接触静态库开发的开发者可以读一读。</p>

<p>故此处也不再重复介绍。</p>

<h2>动态库</h2>

<p>Xcode自带的 framework 模板，创建的动态库（包含资源）可以在iOS 7上跑（真机测试过），但官方要求iOS 8+，可能提交 app store 验证不过。</p>

<p>更大的问题就是提交 app store 时会提示包含 x86_64, i386 &hellip; 截图<a href="http://ikennd.ac/pictures/iTC-Unsupported-Archs.png">在此</a>。该问题在 Xcode 6.3.2 之前及 7.1 上都有开发者遇到，PSPDFKit 这个库的开发者是在分发动态库时在 framework 里嵌入一个 shell 脚本，供使用方在 Xcode 里运行。我最终没有采用该方式。</p>

<p>关于动态库的更多讨论，有一篇<a href="http://stackoverflow.com/questions/30963294/creating-ios-osx-frameworks-is-it-necessary-to-codesign-them-before-distributin">文章</a>值得一看。</p>

<p>有上述背景知识，我们的动态库的具体做法：</p>

<h3>针对 Dynamic Library 工程中 Aggregate 构建目标的脚本</h3>

<p>仿照 jverkoey 文章中的 Aggregate 脚本，很 Easy 的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="nb">set</span> +u
</span><span class='line'>
</span><span class='line'><span class="c"># Avoid recursively calling this script.</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$SF_MASTER_SCRIPT_RUNNING</span> <span class="o">]]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nb">exit </span>0
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">set</span> -u
</span><span class='line'><span class="nb">export </span><span class="nv">SF_MASTER_SCRIPT_RUNNING</span><span class="o">=</span>1
</span><span class='line'>
</span><span class='line'><span class="nv">SF_TARGET_NAME</span><span class="o">=</span><span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span>
</span><span class='line'><span class="nv">SF_EXECUTABLE_PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span>
</span><span class='line'><span class="nv">SF_WRAPPER_NAME</span><span class="o">=</span><span class="s2">&quot;${SF_TARGET_NAME}.framework&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The following conditionals come from</span>
</span><span class='line'><span class="c"># https://github.com/kstenerud/iOS-Universal-Framework</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;$SDK_NAME&quot;</span> <span class="o">=</span>~ <span class="o">([</span>A-Za-z<span class="o">]</span>+<span class="o">)</span> <span class="o">]]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nv">SF_SDK_PLATFORM</span><span class="o">=</span><span class="k">${</span><span class="nv">BASH_REMATCH</span><span class="p">[1]</span><span class="k">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Could not find platform name from SDK_NAME: $SDK_NAME&quot;</span>
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;$SDK_NAME&quot;</span> <span class="o">=</span>~ <span class="o">([</span>0-9<span class="o">]</span>+.*<span class="nv">$)</span> <span class="o">]]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nv">SF_SDK_VERSION</span><span class="o">=</span><span class="k">${</span><span class="nv">BASH_REMATCH</span><span class="p">[1]</span><span class="k">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Could not find sdk version from SDK_NAME: $SDK_NAME&quot;</span>
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;$SF_SDK_PLATFORM&quot;</span> <span class="o">=</span> <span class="s2">&quot;iphoneos&quot;</span> <span class="o">]]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nv">SF_OTHER_PLATFORM</span><span class="o">=</span>iphonesimulator
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="nv">SF_OTHER_PLATFORM</span><span class="o">=</span>iphoneos
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;$BUILT_PRODUCTS_DIR&quot;</span> <span class="o">=</span>~ <span class="o">(</span>.*<span class="o">)</span><span class="nv">$SF_SDK_PLATFORM$ </span><span class="o">]]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nv">SF_OTHER_BUILT_PRODUCTS_DIR</span><span class="o">=</span><span class="s2">&quot;${BASH_REMATCH[1]}${SF_OTHER_PLATFORM}&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Could not find platform name from build products directory: $BUILT_PRODUCTS_DIR&quot;</span>
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>rm -r <span class="s2">&quot;${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/_CodeSignature&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Build the other platform.</span>
</span><span class='line'>xcrun xcodebuild -project <span class="s2">&quot;${PROJECT_FILE_PATH}&quot;</span> -target <span class="s2">&quot;${TARGET_NAME}&quot;</span> -configuration <span class="s2">&quot;${CONFIGURATION}&quot;</span> -sdk <span class="k">${</span><span class="nv">SF_OTHER_PLATFORM</span><span class="k">}${</span><span class="nv">SF_SDK_VERSION</span><span class="k">}</span> <span class="nv">BUILD_DIR</span><span class="o">=</span><span class="s2">&quot;${BUILD_DIR}&quot;</span> <span class="nv">OBJROOT</span><span class="o">=</span><span class="s2">&quot;${OBJROOT}&quot;</span> <span class="nv">BUILD_ROOT</span><span class="o">=</span><span class="s2">&quot;${BUILD_ROOT}&quot;</span> <span class="nv">SYMROOT</span><span class="o">=</span><span class="s2">&quot;${SYMROOT}&quot;</span> <span class="nv">$ACTION</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Smash the two static libraries into one fat binary and store it in the .framework</span>
</span><span class='line'>xcrun lipo -create <span class="s2">&quot;${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/${SF_EXECUTABLE_PATH}&quot;</span> <span class="s2">&quot;${SF_OTHER_BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/${SF_EXECUTABLE_PATH}&quot;</span> -output <span class="s2">&quot;${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/${SF_TARGET_NAME}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Copy the binary to the other architecture folder to have a complete framework in both.</span>
</span><span class='line'>cp -a <span class="s2">&quot;${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/${SF_TARGET_NAME}&quot;</span> <span class="s2">&quot;${SF_OTHER_BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/${SF_TARGET_NAME}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>业务方工程在 Embed Framework 之后增加<a href="https://github.com/realm/realm-cocoa/blob/f07d1af226b67c0aefb150d12da3fd34c5d64087/scripts/strip-frameworks.sh">脚本</a></h3>

<p>该脚本从动态库里移除不必要的处理器架构。因为改动了 ipa 中动态库的可执行文件，所以该 strip 脚本还需要重新对动态库中可执行文件签名。正因为会重新签名，Embed Framework 处不必勾选 Code Sign on Copy。</p>

<h2>第三方依赖</h2>

<p>我的做法是尽量不引入第三方代码到我的 Framework 中。但如果有些算法类的库，比如 ZipArchive 等，很多时候还是需要在 Framework 中用的。直接把第三方代码拉进来，可能会和业务方引入的代码冲突。怎么办？</p>

<p>Kamil Burczyk 在他的<a href="http://blog.sigmapoint.pl/avoiding-dependency-collisions-in-ios-static-library-managed-by-cocoapods/">文章</a>中给出了一种通过脚本改类名的方案。</p>

<p>我们的方案是<strong>在 Framework 的工程里，只引入第三方的头文件</strong>。要求业务方使用时确保引入第三方库。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016 年读过的那些书]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/30/reading-in-2016/"/>
    <updated>2016-10-30T13:04:09+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/30/reading-in-2016</id>
    <content type="html"><![CDATA[<p>本文记录一下 2016 年我阅读过的技术及非技术类书籍。</p>

<!--more-->


<h2>技术类</h2>

<h3><a href="https://www.raywenderlich.com/store/core-data-by-tutorials">Core Data by Tutorials SECOND EDITION</a></h3>

<p>搬来上海之前我对 Core Data 只有粗略的了解，并没有在项目中实际运用。今年五月份设计并实现统计 SDK 时首次实践了一把，然后基于此书系统的学习了下这个框架。Asynchronous fetching, Versionary and Migaration, Measuring and Boosting Performance, Multiple Managed Object Contexts 这几个主题极赞。</p>

<p><img src="https://img3.doubanio.com/lpic/s28523756.jpg" alt="Core Data by Tutorials SECOND EDITION" /></p>

<h3><a href="https://www.hackingwithswift.com/store/practical-ios10">Practical iOS 10</a></h3>

<p>今年 iOS 10 的第一个 beta 出来之后，我就跟着 Paul Hudson 的电子书熟悉新的 API 及框架。每个 beta 出来都会更新几章，总得来说也还行。</p>

<p><img src="http://a4.mzstatic.com/us/r30/Publication71/v4/2d/dc/54/2ddc5401-f9d7-3c05-c3d5-91afd3a45698/cover225x225.jpeg" alt="Practical iOS 10" /></p>

<h3><a href="https://www.manning.com/books/ionic-in-action">Ionic in Action</a></h3>

<p>六七月份时技术团队组织架构调整，业务研发部来了位斯坦福大学毕业的总经理，受其影响我在八月份调研了下 Ionic 在 iOS 上的运用。期间，我用该框架粗糙的实现了好房 APP 的首页。</p>

<p><img src="https://img3.doubanio.com/lpic/s28380910.jpg" alt="Ionic in Action" /></p>

<h3><a href="https://www.bignerdranch.com/we-write/swift-programming/">Swift Programming</a></h3>

<p>Swift 这本书是去年 12 月份购于美国亚马逊的，目前已经读完第一遍。虽然 Swift 3 已经出来了，阅读此书带来的益处仍然很大。非常喜欢 BNR 出品的技术书籍。</p>

<p><img src="https://img1.doubanio.com/lpic/s28372868.jpg" alt="Swift Programming" /></p>

<h3><a href="http://shop.oreilly.com/product/0636920041511.do">Learning React Native</a></h3>

<p>经过各种评估，团队认为 Ionic 并不适合我们。领导说，这个方案不行，那你得给我个可行的方案，于是引入了 React Native 这一明星框架。跟着 Twitter 工程师写的这本书可以很快上手，十月份的试点项目也顺利完成。</p>

<p>10 月 23 日在携程的园区里听其技术经理分享的 React Native 业务实践和性能优化受益颇多，接下来的一周我顺利完成了增量更新方案的设计与实现。</p>

<p><img src="https://img3.doubanio.com/lpic/s28268062.jpg" alt="Learning React Native" /></p>

<h2>文学类</h2>

<h3><a href="https://book.douban.com/subject/1752755/">第九个寡妇</a></h3>

<p>今年九月份在公司内部做了一次技术分享，主题是 iOS 模块化架构的探索。教师节那天收到人事行政部送的礼盒，其中有个 Kindle。拿到该 Kindle 的第一个周末就读完了一本严歌苓的小说。</p>

<p><img src="https://img3.doubanio.com/lpic/s26094273.jpg" alt="第九个寡妇" /></p>

<h3><a href="https://book.douban.com/subject/20258503/">土摩托看世界</a></h3>

<p>入门级 Kindle 的弊端是不适合昏暗或略拥挤的场合，这时候 iPhone 就派上了用场。所以这本游记类的书就这么 Kindle 看几章、iPhone 看几章，交替的读完。都说 Amazon 的云服务做的最好，可是 Kindle 和 Kindle for iPhone 之间的阅读位置并没有做好同步。</p>

<p><img src="https://img3.doubanio.com/lpic/s23006273.jpg" alt="土摩托看世界" /></p>

<h3><a href="https://book.douban.com/subject/26837288/">钓鱼的男孩</a></h3>

<p>十月下旬至十一月中旬，上下班搭乘地铁以及周末在家随手翻看完的。关于非洲的小说，看的第一部是大河湾。当然这本书是没法和大河湾比的，用来消遣却也还不赖。</p>

<p><img src="https://img5.doubanio.com/lpic/s28948246.jpg" alt="钓鱼的男孩" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十四期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/28/tech-notes-24/"/>
    <updated>2016-10-28T21:40:38+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/28/tech-notes-24</id>
    <content type="html"><![CDATA[<p>本期周报主要包括新款 MacBook Pro 的产品信息及其主要卖点 Touch Bar 相关的开发指南、如何高效计算文件的哈希值等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.mac52ipod.cn/post/apple-macbook-pro-2016-event-5-min-briefintroduction.php">MacBook Pro 发布会</a> By mac52ipod</h4>

<p>键盘第一排的功能键被换成了 Touch Bar ，其右侧加上了指纹识别。接口全部是 Thunderbolt 3 ，普通用户为了用手上的老外设，恐怕不得不买转接器。</p>

<h2>开发</h2>

<h4>1) <a href="http://blog.cee.moe/touchbar-tutorial.html">Touch Bar 入门开发指南</a> By Cee</h4>

<p>作者示范一个最简单的 Touch Bar 应用：在屏幕上随机生成两个 0 到 9 的整数，通过点击 TouchBar 中的按钮来比较两个数大小，并给出结果。</p>

<h4>2) <a href="http://www.joel.lopes-da-silva.com/2010/09/07/compute-md5-or-sha-hash-of-large-file-efficiently-on-ios-and-mac-os-x/">Compute hash of large file effeciently</a> By Joe Kun</h4>

<p>简单粗暴的方式是把文件全部加载到 NSData 对象，但对于大文件来说效果非常不好。作者介绍了基于 CFReadStream 的实现方案。本周我实现 React Native 的增量更新时需要计算下载下来的 Patch 文件 hash 值，采用的就是文中的方案。</p>

<h2>工具</h2>

<h4>1) <a href="https://github.com/mas-cli/mas">mas-cli</a> By Dmitry Rodionov</h4>

<p>Mac App Store 的命令行程序，支持 brew 安装。</p>

<h4>2) <a href="https://www.getpostman.com">Postman</a></h4>

<p>如果你不想花钱购买 Paw，那么值得试试 Postman 这个独立的 APP（不是 Chrome 的插件喔）。</p>

<h2>其他</h2>

<h4>1) <a href="https://juokaz.com/blog/becoming-a-cto">Becoming a CTO</a> By Juozas</h4>

<p>如果你还在写博客阐述为何说 PHP 太逊了，那你还没准备好做 CTO 哦。那些讨厌文山会海、不喜欢和非技术人员打交道的人，也不大可能会胜任 CTO 一职的。</p>

<blockquote><p>The CTO must protect the technology team from becoming a pure execution arm for ideas without tending to its own needs and its own ideas.</p></blockquote>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十三期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/19/tech-notes-23/"/>
    <updated>2016-10-19T20:54:10+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/19/tech-notes-23</id>
    <content type="html"><![CDATA[<p>本期周报主要包括 Mac 系列产品的最新消息、React Native 项目实战经验、React Native 增量升级方案、iOS 自动化打包等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.recode.net/2016/10/18/13323264/apple-new-macs-october-27">Apple plans to launch new Macs at an October 27 event</a> By Recode</h4>

<p>苹果上一次对 MacBook Pro 进行大幅度更新是在 2012 年。根据 Recode 的消息源，苹果将在 10 月 27 日发布新的 Mac 系列产品。</p>

<h2>开发</h2>

<h4>1) <a href="http://balloonsys.com/blog/2016/10/18/rn-put-it-all-together/">React Native 项目实战</a> By Linkou Bian</h4>

<p>本文以 Twitter 工程师 Bonnie Eisenman 撰写的 Learning React Native 一书的第九章内容为蓝本，总结了 React Native 项目实践的一些经验。</p>

<h4>2) <a href="https://github.com/cnsnake11/blog/blob/master/ReactNative%E5%BC%80%E5%8F%91%E6%8C%87%E5%AF%BC/ReactNative%E5%A2%9E%E9%87%8F%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88.md">React Native 增量升级方案</a> By cnsnake11</h4>

<p>一般使用 RN 编写的 app 的线上使用方式，是将 react-native bundle 命令打出bundle 文件和 assets 文件夹，直接内置到 app 中，app 在 controller 中直接加载 bundle 文件，当修改了代码或者图片的时候，只要app使用新的bundle文件和assets文件夹，就完成了一次在线升级。</p>

<h4>3) <a href="http://www.jianshu.com/p/131de575ef9e">列表和网格视图的相互切换</a> By LeeJay</h4>

<p>在很多电商 app 中，都有列表视图和网格视图的相互切换。很多人看到第一时间想到的是用 TableView 和 CollectionView 来做切换。作者给出了一个非常简单的方法。</p>

<h2>工具</h2>

<h4>1) <a href="http://liumh.com/2016/05/22/use-xcconfig-config-specific-variable/">Xcode 使用 xcconfig 文件配置环境</a> By Carya Liu</h4>

<p>使用 Xcode 的 Configurations Setting File 把所有的环境配置都整合到配置文件中，这样打不同环境下的安装包时，会自动选择对应的环境参数。</p>

<h4>2) <a href="http://liumh.com/2015/11/25/ios-auto-archive-ipa/">iOS 自动打包并发布脚本</a> By Carya Liu</h4>

<p>本文最终实现的是使用脚本打 Ad-hoc 包，并发布测试，当然稍微修改一下脚本参数就可以打其他类型的 ipa 包了。</p>

<h2>其他</h2>

<h4>1) <a href="https://zhuanlan.zhihu.com/p/22672061">互联网合并浪潮中，内部员工该何去何从？</a> By 林安</h4>

<p>通过采访那些亲身经历过公司合并的同学，给每一位身处这个时代的互联网人以警醒。当有一天，公司合并这件事落在你身上时，希望你能从这篇文章中汲取干货，从容面对、冷静处理。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native 项目实战]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/18/rn-put-it-all-together/"/>
    <updated>2016-10-18T15:02:29+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/18/rn-put-it-all-together</id>
    <content type="html"><![CDATA[<p>本文以 Twitter 工程师 Bonnie Eisenman 撰写的 Learning React Native 一书的第九章内容为蓝本，总结了 React Native 项目实践的一些经验。</p>

<!--more-->


<h2>项目组织结构</h2>

<p>所有的新增文件均放在项目根目录下的 src 里，主要有包含各页面的 components 子目录、数据模型的 data 子目录、负责数据存取的 stores 子目录、公共样式定义 styles 子目录、存放资源图片等的 resources 子目录等。</p>

<p><img src="https://c2.staticflickr.com/6/5781/30365572286_b0c35d2176_o.png" width="226" alt="RN Project Structure" /></p>

<p>index.ios.js 是 Native 应用的入口，该文件尽量简洁，指向 RN 项目里负责页面跳转的主文件 components/Zebreto.js。</p>

<h2>案例项目简介</h2>

<p>作者提供的示例项目包含三个页面，包含多副牌（Deck）的列表页、为选中的某副牌增加一张卡牌（Card）的页面、为某张卡牌选择答案（Review）的页面。</p>

<p>在列表页点击 Create Deck 按钮，按钮上方出现输入框，填写内容作为 Deck 的名称。点击 Deck 右侧按钮则进入增加卡牌页面，点击 Deck 左侧则进入 Review 的页面。</p>

<h2>构建基础组件</h2>

<h3>公共样式</h3>

<p>全局的颜色、字号等，可以在 js 里直接定义字典数据结构，然后 exports 以供外界访问。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">palette</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">pink</span><span class="o">:</span> <span class="s1">&#39;#FDA6CD&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">palette</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，像平安好房的应用可以参照上述结构定义 pa_orange 等色值。值得注意的是，我们也可以在一个 js 文件里定义多个字典，然后 exports 时将他们包含在花括号中即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span><span class="nx">fonts</span><span class="p">,</span> <span class="nx">color</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>在使用上述结构时，就需要这么 import 了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">fonts</span><span class="p">,</span> <span class="nx">color</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;&lt;PATH-OF-FILE&gt;&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>公共组件</h3>

<p>我们不直接用 Text 组件，而是包装成 HeadingText 和 NormalText 供项目里的不同页面使用。同样的，为了代码重用与使用便捷，我们封装 Button、Input、LabeldInput 等组件。</p>

<p>其中 Button 组件构建在 TouchableOpacity 基础之上，支持 func 类型的属性以在点击时调用使用方的方法，也支持 View.propTypes.style 类型的属性以方便定制其样式等。</p>

<p>需要注意的是，为了让 Button 组件能包含其他子组件，我们使用了一个 object 类型的属性，然后在 render 时输出 children 即可。</p>

<p>HeadingText 和 NormalText 建立在 Text 组件之上，自定义样式是通过 Text.propTypes.style 类型的属性支持的。注意此处类型不同于前面 Button 使用过的样式类型。</p>

<p>Input 组件建立在 TextInput 之上，LabeledInput 组合了 Input 和 NormalText 两个组件，体现了复用的理念。</p>

<h2>页面开发</h2>

<h3>Deck 列表页</h3>

<h4>数据建模</h4>

<p>在 React Native 项目试点过程中，尚不熟悉 JavaScript 的类相关语法。当时都是用的字典:[</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Deck</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Deck</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>数据在本地使用 AsyncStorage 存取，所有的存取方法均封装在 DeckStore.js 里。</p>

<h4>Reflux 架构</h4>

<p>作者使用 Reflux 架构实现数据的单项流动，主要的两个概念便是 Store 和 Action 了。</p>

<p>用户在 View 上操作，触发 Action，示例 View 的事件响应代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">DeckActions</span><span class="p">.</span><span class="nx">createDeck</span><span class="p">(</span><span class="nx">deck</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 createDeck 是在 actions.js 里定义的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">export</span> <span class="kd">var</span> <span class="nx">DeckActions</span> <span class="o">=</span> <span class="nx">Reflux</span><span class="p">.</span><span class="nx">createActions</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;createDeck&#39;</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Store 的 init 方法里监听 Action：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">decksStore</span> <span class="o">=</span> <span class="nx">Reflux</span><span class="p">.</span><span class="nx">createStore</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_decks</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">listenTo</span><span class="p">(</span><span class="nx">DeckActions</span><span class="p">.</span><span class="nx">createDeck</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">createDeck</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">createDeck</span><span class="p">(</span><span class="nx">deck</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_decks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">deck</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">emit</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_decks</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">decksStore</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在 createDeck 这一 action 触发后，Store 变回执行 createDeck 方法以更新 Store 中的数据，再通过 emit 方法通知出去。</p>

<p>View 里面监听 DeckStore 的消息，将通知携带来的数据模型存在 state 里以触发 render 方法的执行（更新 UI）。</p>

<p><img src="https://c2.staticflickr.com/6/5816/29772102074_b8ec9b3328_o.png" width="328" alt="Reflux Architecture" /></p>

<h4>页面组装</h4>

<p>src/components/Decks/index.js 是该页面的主文件，会包含一些子组件以完成整个页面的渲染。</p>

<p>在 index.js 的 render 方法里，将这一段代码封装在一个独立的工具方法，然后在 render 里面引用其返回的 UI 结构。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">_getDecks</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">decks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">decks</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">deck</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Deck</span> <span class="nx">deck</span><span class="o">=</span><span class="p">{</span><span class="nx">deck</span><span class="p">}</span> <span class="p">...</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用高阶函数 map 根据每个 deck 数据对象生成对应的 Deck 标签，作为数据返回。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_getDecks</span><span class="p">()}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">DeckCreation</span> <span class="p">...</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输入 Deck 名时比正常情况下多一行输入框，所以在 DeckCreation.js 中根据一个 state 变量分别返回不同的两个子组件：EnterDeck 和 CreateDeckButton。前者由公共组件 Input 和 CreateDeckButton 组合而成。CreateDeckButton 由公共组件 Button 和 NormalText 组合而成。</p>

<p>详细代码不在本文中提供，以思路为重。</p>

<h3>Card 新建页</h3>

<p>整体过程类似于 Decks 页面的构建。主要就是在 View 触发 CardActions.createCard 这一 Action，在 Card 的 Store 中监听以更新数据集合。</p>

<h3>Review 交互页</h3>

<p>本页面有两种场景，若存在尚未 Review 过的 Card 则显示可选择答案的 Review 页面，否则显示 Review 结果（正确率）。所以 src/components/Review/index.js 里分两种情况返回 UI 结构。</p>

<p>选择答案的 UI 结构，其封装在 ViewCard.js 中，做法类似于之前 Decks 利用 map 高阶函数的方案。Review 这一块稍微难懂一点的是其 Store 里根据录入的卡片构造选项的逻辑，但这其实已不是 React Native 的范围，耐心的多看一会儿就可以懂。</p>

<h2>问题与解决方案</h2>

<h3>Decks 页面不展示模拟数据</h3>

<p>我在完成 Decks 页面的展示时，就不等 Create Deck 功能的实现，就开始测试一下页面。比如在 components/Decks/index.js 的 getInitialState 中直接构造几个 Deck 对象。但是并没有展示出来:[</p>

<p>原因在于 Store 发出的消息，导致 View 的 state 里的数据立即被置空。我们可以临时在加个判断，为空就不 setState({decks}) 即可。</p>

<h3>Review 结果展示页告警</h3>

<p>该页使用公共组件 NormalText 并传递 color 给它，但作者提供的 NormalText 代码里使用的是 View.propTypes.style，应改为 Text.propTypes.style！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十二期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/12/tech-notes-22/"/>
    <updated>2016-10-12T14:04:38+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/12/tech-notes-22</id>
    <content type="html"><![CDATA[<p>本期周报主要包括 Dash 作者和 Apple 沟通的详情、移动端技术方案对比、React Native 组件间数据传递、用 Sketch 制作 GIF 动画等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://cn.reuters.com/article/apple-shenzhen-research-center-idCNKCS12C0DH">苹果宣布在深圳成立研发中心</a> By 路透香港</h4>

<p>苹果公司周三表示，将在中国的制造业中心深圳成立一个研发中心。在竞争日益激烈的情况下，苹果希望刺激在中国的增长。</p>

<h4>2) <a href="https://blog.kapeli.com/dash-and-apple-my-side-of-the-story">Dash and Apple: My Side of the Story</a> By Bogdan Popescu</h4>

<p>非常受欢迎的 API 文档浏览器 Dash 的作者公开了和苹果沟通的细节，看起来双方都没有错:-)</p>

<h2>开发</h2>

<h4>1) <a href="http://awhisper.github.io/2016/07/22/Weex-ReactNative-JSPatch/">Weex &amp; ReactNative &amp; JSPatch</a> By awhisper</h4>

<p>很不错的方案对比文章，既有引述，也有作者自己的见解。</p>

<h4>2) <a href="http://balloonsys.com/blog/2016/10/11/rn-components-communication/">React Native 组件间数据传递</a> By Linkou Bian</h4>

<p>在 React Native 项目试点过程中，封装的组件之间难免需要传递数据。本文总结了子组件如何将数据传递到使用方，以及对开发过程中遇到的一个 setState 问题的探究。</p>

<h4>3) <a href="http://inaka.net/blog/2016/09/16/function-naming-in-swift-3/">Function Naming In Swift 3</a> By Pablo Villar</h4>

<p>作者总结了自己在迁移 Swift 2.2 到 Swift 3 时关于函数命名的心得。另外，官方的 <a href="https://swift.org/documentation/api-design-guidelines/">Swift API 设计指南</a>，建议多读几遍。</p>

<h2>工具</h2>

<h4>1) <a href="https://github.com/markohlebar/Import">An Xcode Extension: Import</a> By Marko Hlebar</h4>

<p>当一个类文件很长，此时若需要 import 头文件的话需要滚动到最顶部，然后再回到刚才的代码行继续编码，这个体验还是很不好的。该 Extension 可以让你在任意位置输入 import 语句。</p>

<h4>2) <a href="https://github.com/magicismight/react-native-root-toast">React Native Toast</a> By Horcrux</h4>

<p>适用于 React Native 项目的 Toast 消息提示组件。</p>

<h2>其他</h2>

<h4>1) <a href="http://www.jianshu.com/p/45022427cf96">用 Sketch 制作 APP 下拉刷新的 GIF 动画</a> By wythetan</h4>

<p>用 Sketch 做 GIF 动画，是有个叫 AnimateMate 的很好用的插件。文中作者以分期乐的刷新动画为例进行讲解，推荐开发人员也读一读。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native 组件间数据传递]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/11/rn-components-communication/"/>
    <updated>2016-10-11T11:14:48+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/11/rn-components-communication</id>
    <content type="html"><![CDATA[<p>在 React Native 项目试点过程中，封装的组件之间难免需要传递数据。本文总结了子组件如何将数据传递到使用方，以及对开发过程中遇到的一个 setState 问题的探究。</p>

<!--more-->


<h2>设计一个可定制的组件</h2>

<p>当设计一个组件供团队使用，通常使用时需要向其传递一些信息。这个过程可以参考国庆节前写的<a href="http://balloonsys.com/blog/2016/09/30/create-your-first-reusable-react-native-component/">创建一个 React Native 分隔线组件</a>。</p>

<p>主要思路就是定义属性（propTypes），并提供默认属性值（getDefaultProps）。这里不再赘述。</p>

<h2>组件返回数据给使用方</h2>

<h3>应用场景</h3>

<p>假设我们的某个页面 P 使用到封装房产信息的 houseInfo 等组件，需要在 houseInfo 填写完房源总价 totalPrice 后能根据当前整个页面（含多个组件）的输入项去验证是否可以 enable 提交按钮，而且在点击提交时需要能访问到 houseInfo 等组件录入的数据（包括 totalPrice 等）。</p>

<h3>组件设计</h3>

<p>houseInfo 组件包含若干由 React Native 提供的 TextInput 组件，在 TextInput 的 onChangeText 事件绑定我们的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">onChangeText</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateTotalPrice</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用到的 _updateTotalPrice 是定义在该组件里的事件响应方法，使用最精简的写法设置状态机变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">_updateTotalPrice</span><span class="p">(</span><span class="nx">totalPrice</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">totalPrice</span><span class="p">},</span> <span class="k">this</span><span class="p">.</span><span class="nx">_onStateUpdated</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>特别需要注意的是，上述 setState 方法是异步执行的函数，将变化通知到组件的使用者的方法 _onStateUpdated 需要放在 setState 的第二个参数处，否则取 this.state.totalPrice 仍将是旧值。官方的解释如下：</p>

<blockquote><p>setState() does not immediately mutate this.state but creates a pending state transition. Accessing this.state after calling this method can potentially return the existing value.</p></blockquote>

<p>在实现 _onStateUpdated 方法之前，我们先声明一个函数类型的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">propTypes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">onGetHouseInfo</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样使用者就可以传递一个函数给该组件，该组件在合适的时机调用此方法即可传递数据给使用方。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">_onStateUpdated</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onGetHouseInfo</span><span class="p">({</span><span class="nx">totalPrice</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">totalPrice</span><span class="p">,</span>
</span><span class='line'>                                                           <span class="c1">// 其他输入项 ...</span>
</span><span class='line'>                              <span class="p">},</span> <span class="k">this</span><span class="p">.</span><span class="nx">_validate</span><span class="p">());</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们在传递输入的值时，还将本组件的验证结果传递出去，这样使用方即可综合各组件的 valid 值以控制提交按钮的状态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">_validate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">XXX</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用方</h3>

<p>我们在使用 houseInfo 等组件 render 表单页面 P，参考代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">HouseInfo</span> <span class="nx">onGetHouseInfo</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_getHouseInfo</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>此处的 _getHouseInfo 用于从组件接收数据，以存放在页面的 state 里面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">_getHouseInfo</span><span class="p">(</span><span class="nx">houseInfo</span><span class="p">,</span> <span class="nx">houseInfoValid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">houseInfo</span><span class="p">,</span> <span class="nx">houseInfoValid</span><span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>至于 state 的定义及初始化，放在 getInitialState 中即可，较为基础，此处略。</p>

<h2>收工</h2>

<p>👏👏👏</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十一期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/09/tech-notes-21/"/>
    <updated>2016-10-09T08:46:41+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/09/tech-notes-21</id>
    <content type="html"><![CDATA[<p>本期周报主要包括苹果云服务团队调整资讯、Swift 3 代码迁移经验小结、Xcode Asset Catalog 各种有用的特性、对 React Native 软件许可证解读等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://www.bloomberg.com/news/articles/2016-10-06/apple-is-said-to-plan-improved-cloud-services-by-unifying-teams">Apple Said to Plan Improved Cloud Services by Unifying Teams</a> By Bloomberg</h4>

<p>据 Bloomberg 的消息称，苹果打算将 Siri、Maps、iCould、Apple Pay、Apple News、Apple Music 以及部分 iTunes 业务的云服务团队统一起来，统一后的云服务将运行在一个新的代号为 Pie 的后端。</p>

<h4>2) <a href="https://blog.kapeli.com/apple-removed-dash-from-the-app-store#what-happened">Apple Has Removed Dash from the App Store</a> By Bogdan Popescu</h4>

<p>非常受欢迎的 API 文档浏览器 Dash 的作者在迁移开发者账号至企业账号过程中，突然遭遇应用被下架的厄运。经沟通后得知，苹果认为该应用的评论有操控之嫌，作者很受伤。</p>

<h2>开发</h2>

<h4>1) <a href="http://tech.glowing.com/cn/swift3/">Swift 3 代码迁移</a> By Glow</h4>

<p>Swift 1 确立了语言的基线：安全、快速、现代。Swift 2 展现了 Swift 应该是什么，未来怎么走：面向协议的编程、开源。而 Swift 3 更多是清扫和规范。</p>

<h4>2) <a href="http://blog.lessfun.com/blog/2016/09/21/ios-10-replaykit-live-and-broadcast-extension/">iOS 10 ReplayKit Live</a> By lessfun</h4>

<p>在 iOS 8 及以前，第三方 App 如果想要全局录屏，只能使用私有 API。升级到 iOS 9 后，官方新增了 ReplayKit，并且禁用了录屏的私有 API。iOS 10 在 ReplayKit 保存录屏视频的基础上，增加了视频流实时直播功能。</p>

<h2>工具</h2>

<h4>1) <a href="http://yulingtianxia.com/blog/2016/09/28/Let-s-Talk-About-project-pbxproj/">Let&rsquo;s Talk About project.pbxproj</a> By 杨萧玉</h4>

<p>project.pbxproj 文件被包含于 Xcode 工程文件 *.xcodeproj 之中，存储着 Xcode 工程的各项配置参数。本文谈了下 project.pbxproj 的知识，并总结了一些操作工程文件的优秀轮子。</p>

<h4>2) <a href="http://krakendev.io/blog/4-xcode-asset-catalog-secrets-you-need-to-know">Four Secrets about Xcode Asset Catalog</a> By Hector Matos</h4>

<p>之前做项目瘦身方案时，有做过图片资源迁移至 Asset Catalog 的工作。这篇文章包含 Xcode Asset Catalog 的四项重要特性。</p>

<h2>其他</h2>

<h4>1) <a href="https://arielelkin.github.io/articles/why-im-not-a-react-native-developer">Why I&rsquo;m not a React Native Developer</a> By Ariel Elkin</h4>

<p>关于 RN 许可协议的解读是我获得的最大收获:</p>

<blockquote><p>if I initiate any lawsuit alleging patent infringement against Facebook, my license to use React Native would be immediately terminated.</p></blockquote>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/09/30/tech-notes-20/"/>
    <updated>2016-09-30T11:20:12+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/09/30/tech-notes-20</id>
    <content type="html"><![CDATA[<p>本期周报主要包括如何创建一个 React Native 分隔线组件、UITableView 性能优化、如何设置AFNetwork 以支持 SSL，以及Xcode 8 代码签名等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://www.macstories.net/news/apple-starts-selling-app-store-search-ads-launching-october-5th/">Apple Starts Selling App Store Search Ads</a> By John Voorhees</h4>

<p>App Store 搜索广告功能将于 10 月 5 日正式推出。关于广告计费方式，苹果表示将采用 CPC 的计算形式，开发者只需要在用户点击广告才需要付费，具体支付金额由关键词竞拍结果决定。</p>

<h4>2) iPhone 可以直接用 Siri 打车</h4>

<p>苹果开放接口以后，Siri 有用多了。比如在 iOS 10 里，你可以通过 Siri 直接语音叫车，滴滴和优步都支持。</p>

<h2>开发</h2>

<h4>1) <a href="http://balloonsys.com/blog/2016/09/30/create-your-first-reusable-react-native-component/">创建一个 React Native 分隔线组件</a> By Linkou Bian</h4>

<p>在移动端表单页面里有不少分隔线绘制需求，构造一个组件以在不同页面复用是个很自然的做法。本文选取最最简单的分隔线介绍 React Native 实践过程中的代码编写思路。</p>

<h4>2) <a href="http://blog.lessfun.com/blog/2015/04/01/uitableview-performence-improve/">UITableView 性能优化</a></h4>

<p>UITableView 是 iOS 开发中最常用也很实用并且最容易出现性能问题的的一个控件，本文列出了一些性能优化点，用于提高列表滚动的流畅性。</p>

<h2>工具</h2>

<h4>1) <a href="http://nelson.logdown.com/posts/2015/04/29/how-to-properly-setup-afnetworking-security-connection/">如何正确设定 AFN 的安全连接</a> By Nelson Tai</h4>

<p>大部分 iOS 应用都是采用 AFNetwork 作为网络层的框架的，本文详细介绍了设置 SSL 的步骤。</p>

<h4>2) <a href="http://joeyio.com/2016/08/21/WWDC2016-401-Whats-new-in-Xcode-App-Signing/">What&rsquo;s New in Xcode App Signing</a></h4>

<p>Xcode 团队在 Xcode 8 中移除了 fix issue 之后还需要 fix issue 但是可能还是不能 fix issue 的 Fix Issue 按钮，并完全重新设计了 code signing 的交互，流程和架构。</p>

<h2>其他</h2>

<h4>1) <a href="http://www.jianshu.com/p/033a6b596155">技术 Leader 的多维度能力及成长路径</a></h4>

<p>如何成功转型? 我不想丢掉技术，如何在不丢掉技术的同时还能提升管理能力！本文是作者在这个过程中经历困惑和挣扎后的一些想法。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[创建一个 React Native 分隔线组件]]></title>
    <link href="http://balloonsys.github.io/blog/2016/09/30/create-your-first-reusable-react-native-component/"/>
    <updated>2016-09-30T10:24:06+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/09/30/create-your-first-reusable-react-native-component</id>
    <content type="html"><![CDATA[<p>在移动端表单页面里有不少分隔线绘制需求，构造一个组件以在不同页面复用是个很自然的做法。</p>

<!--more-->


<h2>目标</h2>

<p>期望在各页面导入 require 该组件后，直接使用如下的方式绘制分隔线：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Line</span> <span class="nx">height</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span> <span class="nx">paddingLeft</span><span class="o">=</span><span class="p">{</span><span class="mi">10</span><span class="p">}</span> <span class="nx">paddingRight</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span> <span class="nx">backgroundColor</span><span class="o">=</span><span class="s1">&#39;white&#39;</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然也为上述四个属性提供默认值，如果默认值符合需求，则只需：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Line</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>所需技术</h2>

<h3>创建类</h3>

<p>我采用的是 ES 5 的语法创建类的，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">Line</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Line</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 render 方法类似于 Native 开发中视图的绘制方法。我们稍后在其 return 中加上构建与 React Native 基础组件之上的 XML 代码。</p>

<h3>添加属性</h3>

<p>构建该分隔线组件给客户程序使用，需要让别人知道支持哪些属性，比如线的高度、左右缩进、背景色及线的颜色等。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">propTypes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">height</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">paddingLeft</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">paddingRight</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lineColor</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">,</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了用起来方便，我们还可以给这些属性提供默认值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">getDefaultProps</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">height</span><span class="o">:</span> <span class="mf">0.5</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">paddingLeft</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">paddingRight</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">backgroundColor</span><span class="o">:</span> <span class="s1">&#39;#FFFFFF&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">lineColor</span><span class="o">:</span> <span class="s1">&#39;#D3D3D3&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<h3>绘制控件</h3>

<p>具体的绘制代码在 render 方法中完成。如前面所述，我们将用到 React Native 提供的基础组件，所以我们需要在代码顶部导入。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">View</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时我们就可以在 render 方法的 return 语句中加上下面代码以完成分隔线的绘制了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;View</span> <span class="na">style=</span><span class="s">{}</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;View</span> <span class="na">style=</span><span class="s">{}</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/View&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>外层的 View 的 style 属性设置为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span><span class="nx">backgroundColor</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">backgroundColor</span><span class="p">,</span> <span class="nx">height</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span> <span class="nx">paddingLeft</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">paddingLeft</span><span class="p">,</span> <span class="nx">paddingRight</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">paddingRight</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>内层的 View 的 style 属性设置为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span><span class="nx">flex</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">backgroundColor</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">lineColor</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>本文选取最最简单的分隔线介绍 React Native 实践过程中的代码编写思路，完成的其他控件有表单填写进度等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第十九期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/09/24/tech-notes-19/"/>
    <updated>2016-09-24T06:37:43+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/09/24/tech-notes-19</id>
    <content type="html"><![CDATA[<p>本期周报主要包括 Sierra 系统的新功能介绍，React Native 开发工具的选型与配置、调试方法及原理、如何集成到现有 APP 项目中，以及腾讯的 HttpDNS 服务详解等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.ifanr.com/app/720477">Mac 最新系统 Sierra 发布</a> By 王崇旭</h4>

<p>苹果发布了 Mac 最新系统 macOS Sierra 正式版，本文梳理出了最值得留意的功能。其中最吸引我的是通用剪贴板，你值得拥有！</p>

<h4>2) <a href="https://www.theguardian.com/technology/2016/sep/20/apple-patent-recycled-paper-bag">Apple patents bold new innovation – a paper bag</a></h4>

<p>苹果给自家的环保纸袋注册了专利，重新定义了购物袋:-)</p>

<h2>开发</h2>

<h4>1) <a href="https://github.com/huxiaoqiao/React-Native-Study/blob/master/Blog/iOS%E7%8E%B0%E6%9C%89%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90React%20Native.md">iOS 现有项目集成 React Native</a> By huxiaoqiao</h4>

<p>除了文中介绍的在现有工程里集成 React Native 的具体步骤，我建议在实践时可以采用 git submodule 的方式在 iOS 工程根目录下管理独立的 React Native 相关代码库。</p>

<h4>2) <a href="https://medium.com/@shaheenghiassy/deep-diving-react-native-debugging-ea406ed3a691">Deep Diving React Native Debugging</a> By Shaheen Ghiassy</h4>

<p>作者深入分析了 React Native 程序调试相关的原理与步骤。</p>

<h1>3) <a href="https://www.raywenderlich.com/126063/react-native-tutorial">React Native Tutorial: Building Apps with JavaScript</a> By Tom Elliott</h1>

<p>著名的 Raywenderlich 博客发的一篇 React Native 教程，详细介绍了如何开发一个房产搜索应用。</p>

<h2>工具</h2>

<h4>1) <a href="http://inessential.com/2016/09/22/memory_graph_debugger_tips">Memory Graph Debugger Tips</a> By Brent Simmons</h4>

<p>作者试用 Memory Graph Debugger 一天总结的一些经验，非常值得一读。</p>

<h4>2) <a href="http://www.jianshu.com/p/8e9df5f85bca">React Native 开发 IDE 选型及配置</a> By asce1885</h4>

<p>最终我选择的是 Atom + Nuclide 的方案，同时也把平常用的很多的 Sublime 做了相应的配置。安装完成后建议先摸索下调试相关的玩法。</p>

<h2>其他</h2>

<h4>1) <a href="http://mp.weixin.qq.com/s?__biz=MzA3ODgyNzcwMw==&amp;mid=201837080&amp;idx=1&amp;sn=b2a152b84df1c7dbd294ea66037cf262">鹅厂网事: HttpDNS 服务详解</a> By 廖伟健</h4>

<p>腾讯公司的GSLB 团队推出了一种全新的域名解析调度系统 HttpDNS 以专治LocalDNS 解析异常以及流量调度不准。</p>

<h4>2) <a href="https://zi.com/w/a/b223XP">为什么应该开始使用 React Native 了</a> By 周楷雯</h4>

<p>我并不建议你直接用 React Native 重写你的 App，像 Swift 一样，你可以先用 React Native 来实现一部分页面，让那些体力活的 UI 构建变的越快而充满乐趣。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第十八期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/09/17/tech-notes-18/"/>
    <updated>2016-09-17T09:56:15+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/09/17/tech-notes-18</id>
    <content type="html"><![CDATA[<p>本期周报主要包括 iOS 10 隐藏特性、设计趋势、正式版发布以来的一些数据，App 和 Extension 之间如何共享数据与功能，Xcode 8 适配经验分享，UI Testing 等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://blog.mixpanel.com/2016/09/08/apple-ios-10-data/">iOS 10 Adoption Rate Nears 20% In Just Two Days</a> By mixpanel</h4>

<p>Mixpanel 的 1830 亿条数据显示，iOS 10 正式发布首日有 14.81% 的设备已升级至最新版，两天内达到 21.02% 的比率。另外，美国移动运营商 T-Mobile CEO 称前四天 iPhone 7 预订量已达到 iPhone 6 同期的 4 倍。</p>

<h4>2) <a href="https://www.cnet.com/how-to/ios-10-hidden-features/">23 hidden features in iOS 10</a> By Jason Cipriani</h4>

<p>很多版本的很多功能可能被很多人忽视了，看看发布会上没有提到的特性有助于更大程度的利用好移动设备。</p>

<h2>开发</h2>

<h4>1) <a href="https://www.raizlabs.com/dev/2016/09/preparing-ios-app-for-extensions/">Preparing Your iOS App for Extensions</a> By Nick Bonatsakis</h4>

<p>Extension 是一个独立于 App 的进程，作者通过将代码放到独立的 Framework 中详述如何做到 App 和 Extension 之间数据和功能的共享。</p>

<h4>2) <a href="http://www.jianshu.com/p/e9c313df746f">iOS 推送全解析</a> By pikacode</h4>

<p>本文旨在对 iOS 推送进行一个完整的剖析，如果你之前对推送一无所知，那么在你认真地阅读了全文后必将变成一个推送老手，你将会对其中的各种细节和原理有充分的理解。</p>

<h4>3) <a href="http://www.jianshu.com/p/f8151d556930">iOS 10 的适配问题</a></h4>

<p>作者总结的总结的一些关于 iOS 10 适配方面的问题。</p>

<h2>工具</h2>

<h4>1) <a href="http://masilotti.com/ui-testing-cheat-sheet/">UI Testing Cheat Sheet and Examples</a> By Joe Masilotti</h4>

<p>本周把玩去年增加的 UI Testing 相关的功能时，发现当时 WWDC 视频里做的代码录制在 Xcode 7 最新版以及 Xcode 8 里有些压根就不 work 啊。另外感觉 UI Testing 并没有那么 exciting ！</p>

<h4>2) 如何禁止 Xcode 8 模拟器疯狂输出系统日志 By Russell Ivanovic</h4>

<p>增加环境变量 OS_ACTIVITY_MODE = disable 即可。</p>

<h2>其他</h2>

<h4>1) <a href="https://isux.tencent.com/ios-10-design-trends.html">从 iOS 10 设计指南变化看设计的新趋势</a> By ISUX</h4>

<p>本文主要针对已经发布的 iOS 10 的人机界面设计指南来对比分析新老版本的 iOS 系统在设计上哪些改变，有哪些设计趋势值得我们注意。</p>

<h4>2) <a href="http://yuguo.us/weblog/shut-up-and-take-the-money/">为什么有些人赚钱那么轻松</a> By 余果</h4>

<p>外行并不太能影响专业人士的价格，他们自己在跟自己竞争。对于真正的专业主义者，没有行业低迷这种概念存在。随波逐流的，一直是水面上的浮萍。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第十七期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/09/10/tech-notes-17/"/>
    <updated>2016-09-10T17:44:51+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/09/10/tech-notes-17</id>
    <content type="html"><![CDATA[<p>本期周报主要包括苹果自动驾驶汽车项目的最新动向，移动客户端基于 WebP 的流量优化技术剖析，Xcode 8 新增的调试工具用法等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://tech2ipo.com/10032335">iPhone 年年焕新计划</a> By tech2ipo</h4>

<p>北京时间 9 月 8 日凌晨，苹果发布了最新一代的 iPhone 7 和 7P，这次发布会带来的另一个亮点是「年年焕新」计划。本文将帮你核算参与「年年焕新计划」永远用新 iPhone 究竟要多少钱。</p>

<h4>2) <a href="http://www.nytimes.com/2016/09/10/technology/apple-is-said-to-be-rethinking-strategy-on-self-driving-cars.html?_r=0">Apple Is Said to Be Rethinking Strategy on Self-Driving Cars</a> By Daisuke</h4>

<p>纽约时报的文章称，苹果自动驾驶汽车项目经历了调整，部分业务被撤销、几十名员工被解雇。今年七月开始由 Bob Mansfield 领导后，苹果改变了该项目的关注点，从对汽车设计和生产的强调转向了对自主驾驶汽车底层技术的开发。</p>

<h2>开发</h2>

<h4>1) <a href="https://segmentfault.com/a/1190000006266276">iOS 客户端基于 WebP 的流量优化</a> By Curiousity</h4>

<p>WebP 是一种同时提供了有损压缩与无损压缩的图片文件格式。据说淘宝客户端在两年前就使用了 WebP（主要是 Native 使用），后来 H5 全面使用，WebView 的 WebP 采用插件的方式支持。</p>

<p>注：本文比<a href="http://www.jianshu.com/p/25505a6c5d74">第十三期周报</a>中分享的相关文章更深入！</p>

<h4>2) <a href="http://qiaotongxin.cc/2016/08/22/20160822/">百度外卖 APP 头像动画效果</a> By 乔同新</h4>

<p>某日，作者发现百度外卖的 APP 个人中心头像波浪效果很是吸引人，遂就思考如何实现这种『浪』的效果。</p>

<h2>工具</h2>

<h4>1) <a href="https://chengwey.com/ios-10-by-tutorials-bi-ji-er/">Xcode 8 Debugging Improvements</a> By chengwey</h4>

<p>Xcode 8 增加了几项功能，让我们调试起来更加得心应手。Xcode 8 提供的调试工具可以标记竞争危害（Race Conditions）、内存泄露、以及运行时的布局约束问题。</p>

<h4>2) <a href="https://medium.com/ios-os-x-development/my-ios-development-toolkit-2016-ba7601b68085#.pebx7hm9c">My iOS Development Toolkit 2016</a> By Sebastian</h4>

<p>作者分享了他在用的 iOS 开发工具、Web 服务、框架，以及经常浏览的技术博客等。</p>

<h2>其他</h2>

<h4>1) <a href="http://tech.glowing.com/cn/tan-tan-yi-dong-ying-yong-de-an-quan-xing-shi-jian/">移动应用的安全性实践</a> By Glow</h4>

<p>本文将从用户注册流程出发，逐步介绍 Glow 在提高数据安全性方面采用的一些策略方法，供读者参考。</p>

<h4>2) <a href="https://medium.com/the-year-of-the-looking-glass/how-to-do-a-product-critique-98b657050638">How to do a Product Critique</a> By Julie Zhuo</h4>

<p>这是 Facebook 产品设计总监的文章，通过对于评价产品的每个步骤的介绍，帮助产品经理更好的理解用户，提升自己的产品直觉。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第十六期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/09/03/tech-notes-16/"/>
    <updated>2016-09-03T10:08:14+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/09/03/tech-notes-16</id>
    <content type="html"><![CDATA[<p>本期周报主要包括 App Store 的最新规则，做一款 App 前需要考虑的方方面面，以及 Surge 开发者分享的他所使用的软硬件工具等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://tech2ipo.com/10032212">苹果对 App Store 进行大清理</a> By tech2ipo</h4>

<p>9月2日凌晨，收到 Apple 的邮件说将下架不能与 iPhone 和 iPad 兼容及不能正常运行的应用，或者没有遵循更新后 App Store 指南的应用。另外，苹果还指出，应用名称长度不得超过 50 个字符。</p>

<h4>2) <a href="http://www.arinchina.com/news/show-4227.html">苹果新获 59 项专利</a> By Trista</h4>

<p>美国专利商标局正式公布了苹果公司新获批的 59 项专利，包括 12 项设计专利以及可弯曲 OLED 显示屏专利、头戴显示器专利、iOS 设备防震系统专利、家庭自动化系统专利等。</p>

<h2>开发</h2>

<h4>1) <a href="http://www.cnblogs.com/smileEvday/p/iOS_PixelVsPoint.html">iOS 绘制1个像素的线</a> By 枫叶</h4>

<p>第一想法可能是直接根据当前屏幕的 scale 计算出1像素的线对应的 Point，然后设置线宽（或者高）为1个像素。但在设备上测试时会发现渲染出来的线宽并不是1个像素。</p>

<h4>2) <a href="http://limboy.me/tech/2016/07/06/starting-an-app.html">做一个 App 前需要考虑的几件事</a> By 李忠</h4>

<p>随着工具链的完善，语言的升级以及各种优质教程的涌现，做一个 App 的成本也越来越低了。尽管如此，有些事情最好前期就做起来，避免当 App 有了一定规模后，再感慨当初为什么没有多留点心。</p>

<h4>3) <a href="http://www.jianshu.com/p/61a9030adeef">仿微信小视屏</a> By Damonwong</h4>

<p>对于一个类似微信小视屏的功能，大致需要完成的功能无非就是视频录制和视频播放两块。本文是作者视频相关功能开发的实践笔记。</p>

<h2>工具</h2>

<h4>1) <a href="http://www.jianshu.com/p/70ed36cf8a98">Xcode 7 中的调试技巧</a></h4>

<p>Xcode 7 中苹果为我们增加了两个重要的 Debug 相关功能。一个是 Address Sanitizer，另一个是打开 Organizer 窗口的 Crashes 标签页，会自动下载 Crash 信息，右侧的详细信息可以看到是哪行代码导致的崩溃。</p>

<h4>2) <a href="http://blog.imjun.net/2016/08/25/iOS%E7%AC%A6%E5%8F%B7%E8%A1%A8%E6%81%A2%E5%A4%8D-%E9%80%86%E5%90%91%E6%94%AF%E4%BB%98%E5%AE%9D/">iOS 符号表恢复&amp;逆向支付宝</a> By 杨君</h4>

<p>符号表历来是逆向工程中的必争之地，而 iOS 应用在上线前都会裁去符号表，以避免被逆向分析。本文会介绍一个作者写的工具，用于恢复 iOS 应用的符号表。</p>

<h2>其他</h2>

<h4>1) <a href="http://dangrover.com/blog/2016/04/20/bots-wont-replace-apps.html">Better apps will replace apps</a> By Dan Grover</h4>

<p>作者是 Facebook 产品经理，之前在微信工作。他在文中谈了对 Facebook、微软的聊天机器人的理解。</p>

<h4>2) <a href="http://liqi.io/liuyachen/">Surge 开发者使用的软硬件</a></h4>

<p>Surge 的开发者刘亚晨，职业角色是 iOS 自由开发者和技术顾问。这篇访谈中他分享了自己使用的硬件和软件。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第十五期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/08/27/tech-notes-15/"/>
    <updated>2016-08-27T10:34:36+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/08/27/tech-notes-15</id>
    <content type="html"><![CDATA[<p>本期周报主要包括如何将设计稿中的像素转化为开发稿中的约束、类方法与实例方法 Swizzling 的区别，以及 APP 视觉改版高效产出经验分享等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://sspai.com/35297">非国行 iPhone 也可享受保修政策</a></h4>

<p>2016 年 8 月 25 日，Apple 售后接到了一个通知：可以为国内顾客与出游中顾客提供更多国际版 iPhone 的相同产品维修和整机更换服务。</p>

<h2>开发</h2>

<h4>1) <a href="http://blog.callmewhy.com/2016/08/24/autolayout-design-aesthetic/">Auto Layout 设计美学</a> By wanghai</h4>

<p>文章虽然是关于 Auto Layout 的，但是其实最核心的部分是如何将设计稿中的像素转化为开发稿中的约束，而这点在所有开发场合中都是通用的。</p>

<h4>2) <a href="http://www.tanhao.me/code/160723.html/">Method Swizzling 的各种姿势</a> By tanhao</h4>

<p>对于类方法的动态添加，需要将方法添加到 MetaClass 中,因为实例方法记录在 class 的 method-list 中, 类方法是记录在 meta-class 中的 method-list 中的。</p>

<h2>工具</h2>

<h4>1) Mac 小技巧</h4>

<p>局域网 IP 怎么查？Mac 下最快的方法，按住 option 点 Wifi 图标。</p>

<h4>2) <a href="https://wangjwchn.github.io/blog/Display-animated-image-on-iOS-device">Display animated image on iOS device</a> By 王佳玮</h4>

<p>一个用 Swift 实现的 GIF&amp;APNG 引擎，低内存、低 CPU 占用。</p>

<h2>其他</h2>

<h4>1) <a href="https://zi.com/w/a/763ePM?id=763ePM">Rush - 视觉改版回顾和高效产出经验</a> By Tim Wu</h4>

<p>文中建立规范部分提到的规范控件库非常有意义，对于研发来说可以形成控件库。有多少公司的设计师能做到这一点？随心所欲惯了！</p>

<h4>2) <a href="https://github.com/wg689/Solve-App-Store-Review-Problem">Solve App Store Review Problem</a></h4>

<p>罗列了不少审核被拒及应对办法，作者的认真劲儿赞一个！</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第十四期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/08/21/tech-notes-14/"/>
    <updated>2016-08-21T09:20:09+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/08/21/tech-notes-14</id>
    <content type="html"><![CDATA[<p>本期周报主要包括库克任苹果 CEO 五周年专访、iOS 10 Day by Day 系列文章、JSON Web Token 的 Objective-C 库等诸多干货资源。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.reuters.com/article/us-apple-china-idUSKCN10R14G">Apple to boost China investments as demand slows</a> By Paul Carsten</h4>

<p>Cook 拜会中国国务院副总理张高丽时宣布苹果将在中国设立研发中心，整合中国的工程及经营团队，显示苹果藉由加码中国市场，试图扭转中国市场的困境。</p>

<h4>2) <a href="http://www.geekpark.net/topics/216414">库克任苹果 CEO 五周年专访</a> By Techsina</h4>

<p>文中包含很多关于价值观、企业国际税等话题。大部分资讯看标题就够了，但强烈建议细细的品读下该专访的全文。</p>

<h2>开发</h2>

<h4>1) <a href="https://www.shinobicontrols.com/blog/ios-10-day-by-day-index">iOS 10 Day by Day</a> By Sam Burnstone</h4>

<p>自 iOS 7 Day by Day 始，就关注 shinobicontrols 上推出的该系列文章。每周一到两篇，对跟进 iOS 10 新特性的开发技术非常有益。</p>

<h4>2) <a href="http://www.jianshu.com/p/f8224779ca63">App 定位和地图的那些坑</a> By hrchen</h4>

<p>开发App时会遇到各种坑，本文分享在iOS/Android系统中定位和地图中遇到的坑，以及携程 App 的解决方案。</p>

<h4>3) <a href="http://itony.me/129.html">iOS 如何放大按钮点击热区</a> By Tony</h4>

<p>我们有时做自定义Button的时候，设计图上的给出按钮尺寸明显偏小，需要放大按钮的点击热区。本文分享的是来自 WWDC 2012 Session 216 的方案。</p>

<h2>工具</h2>

<h4>1) <a href="https://www.decosoftware.com">Deco IDE</a> By decosoftware</h4>

<p>Deco 区别于其他 IDE 最显著的特性是支持常用控件的拖拽生成代码和可视化编辑，这些控件既有 React Native 原生控件，也有一些知名的开源控件。</p>

<h4>2) <a href="https://github.com/yourkarma/JWT">A JSON Web Token implementation in Objective-C</a> By Karma</h4>

<p>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. 在 Objective-C 里如何实现 JWT 可使用 Karma 提供的轮子。</p>

<h2>其他</h2>

<h4>1) <a href="http://www.jianshu.com/p/fad64911a1f6">主流APP图片选择功能对比</a> By 蓝桥</h4>

<p>针对新浪微博、微信、QQ空间等应用的图片处理方式，从拍照、选择图片、完成选择这三个方面归纳移动应用的图片选择上传的最佳产品体验。</p>

<h4>2) <a href="https://www.codementor.io/react-js/tutorial/react-native-vs-ionic">React Native vs Ionic</a> By Frédéric Massart</h4>

<p>近日看到某司某所谓的 Android 架构师在技术选型时写的 RN 与 Weex 对比文章，且不说候选对象用 Weex 而不是诸如 Ionic 等，其文中对 RN 的多处表述也是滑稽的很。从本周开始，在 RN 及 Ionic 上花些时间。</p>

<p>@end</p>
]]></content>
  </entry>
  
</feed>
