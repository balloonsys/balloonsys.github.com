<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Balloonsys Inc.]]></title>
  <link href="http://balloonsys.github.io/atom.xml" rel="self"/>
  <link href="http://balloonsys.github.io/"/>
  <updated>2016-12-30T16:06:31+08:00</updated>
  <id>http://balloonsys.github.io/</id>
  <author>
    <name><![CDATA[Linkou Bian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第三十三期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/12/30/tech-notes-33/"/>
    <updated>2016-12-30T18:09:58+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/12/30/tech-notes-33</id>
    <content type="html"><![CDATA[<p>本期周报主要包括手机 QQ 牛逼的 iOS 动态化方案、拼图验证控件的实现的原理、AFNetworking 3.0 源代码阅读笔记、Xcode 8.2 Simulator 新特性介绍等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.theverge.com/2016/12/24/14074654/apple-consumer-reports-macbook-pro-battery-test">Inconsistent MacBook Pro battery test results</a></h4>

<p>全新 MacBook Pro 的续航飘忽不定，经过多次测试发现，MacBook Pro 的续航有时可以达到 10 多个小时，而有时却只有 3 个多小时。苹果全球营销高级副总裁 Phil Schiller 表示，苹果正在与《消费者报告》合作，解决 MacBook Pro 电池飘忽不定的问题。</p>

<h2>开发</h2>

<h4>1) <a href="http://mp.weixin.qq.com/s/DhGR6J5fx04BPi-kMsMBJg">手机 QQ 的 iOS 动态化方案</a> By OCSTeam</h4>

<p>在iOS的发展历程上，涌现了很多动态化方案，有历史悠久的 WaxPatch 动态化方案，有远近闻名的JSPatch动态化方案。文中手机 QQ 团队向大家介绍一款堪称『史上最疯狂』的 iOS 动态化方案。</p>

<h4>2) <a href="http://tutuge.me/2016/12/25/TTGPuzzleVerify/">拼图验证控件的实现</a> By 燕泽堃</h4>

<p>拼图验证控件用以让用户通过水平、垂直，或者直接拖动拼图块，完成拼图图案，达到验证目的。作者来自阿里，对其开发的 TTGPuzzleVerify 控件做了整体设计思路和实现原理的分享。</p>

<h4>3) <a href="http://balloonsys.com/blog/2016/12/27/afnetworking-in-a-nutshell/">AFNetworking 3.0 源码阅读笔记</a> By Linkou Bian</h4>

<p>上周阅读了 AFNetworking 3.0 的源代码，对阅读中遇到的问题进行了些思考，整理成此文。干货 &amp; 原创，值得一读。</p>

<h2>工具</h2>

<h4>1) <a href="https://medium.com/@hollanderbart/new-features-in-xcode-8-2-simulator-fc64a4014a5f">New features in Xcode 8.2 Simulator</a> By Bart den Hollander</h4>

<p>Xcode 8.2 新增了两项新特性，一是 xcrun 命令可以对模拟器截屏及录制，二是可以通过拖拽的方式安装 app 到模拟器。</p>

<h4>2) <a href="http://balloonsys.com/blog/2016/12/27/spotify-proxy-on-mac/">Mac Spotify</a> By Linkou Bian</h4>

<p>Mac 为了无障碍上网，开着 Surge；想用 Spotify 听听歌，却因公司网络而无法登录，怎么办？</p>

<h2>其他</h2>

<h4>1) <a href="http://mp.weixin.qq.com/s/XpjTQd-p9pNpkQich1ZZ_w">中国企业就是这样倒闭的</a></h4>

<p>整天瞎分析个屁! 什么他妈的流程问题、职责问题、界面问题、考核问题，明明就是机构臃肿问题！</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AFNetworking 3.0 源码阅读笔记]]></title>
    <link href="http://balloonsys.github.io/blog/2016/12/27/afnetworking-in-a-nutshell/"/>
    <updated>2016-12-27T09:36:53+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/12/27/afnetworking-in-a-nutshell</id>
    <content type="html"><![CDATA[<p>上周阅读了 AFNetworking 3.0 的源代码，对阅读中遇到的问题进行了些思考，整理成此文。</p>

<!--more-->


<h2>AFURLSessionManager (核心类)</h2>

<h4>1. AFHTTPSessionManager 和 AFURLSessionManager 的关系？</h4>

<p>前者是后者的子类，封装了和 HTTP Method 相关的接口。核心代码均在后者的实现中，包括 Session 的创建、Session 回调方法的实现、Task 和 Task 委托对象 (AFURLSessionManagerTaskDelegate) 的映射关系等。</p>

<p>值得关注的是 request serializer 是定义在 AFHTTPSessionManager 中的，而 response serializer 是定义在 AFURLSessionManager 中的。</p>

<h4>2. 创建 Session 时指定的 delegate queue 为何设置  maxConcurrentOperationCount 为 1？</h4>

<p>delegate queue 是 session 的回调方法执行时所在的 queue，并不影响 HTTP 请求的并发执行 (由 Session Configuration 的 HTTPMaximumConnectionsPerHost 控制)。查看 Session 的几个 Delegate 方法，我们可以看到，会涉及到对 task 的 delegate 处理（get / remove 等），而 task 和 task 的 delegate 是由 mutable 的字典管理的，处理时需要用到 lock 以支持多线程安全。所以，这个 delegate queue 本质上还是得一个任务一个任务的处理。</p>

<p>前面讨论了为何设置 maxConcurrentOperationCount 为 1，那这样是否影响 APP 的网络层处理效率？其实不会的。在 - (void)URLSession:(NSURLSession <em>)session task:(NSURLSessionTask </em>)task didCompleteWithError:(NSError *)error 的实现里我们可以看到，对 response 的处理 (使用 response serializer) 是放在一个 concurrent queue (见 url_session_manager_processing_queue 方法) 里的。</p>

<h4>3. 为何设计 completion group 和 completion queue 这两个属性？</h4>

<p>纵观 AFN 的内部，我们只看到 AFURLSessionManagerTaskDelegate 的 - (void)URLSession:(NSURLSession <em>)session task:(NSURLSessionTask </em>)task didCompleteWithError:(nullable NSError *)error 方法中把 completion handler 的执行放在 completion group / queue 里，而且如果没有专门指定的话就用私有的默认 group 及 main queue。所以通常应用层的 success / failure block 在主线程调用。</p>

<p>当我们需要在多个 request 均处理完毕这个时间点，执行一些自定义的操作，那就可以给 session manager 指定专门的 completion group / queue 来实现。</p>

<h4>4. 和 AFURLSessionManagerTaskDelegate 中的 URL Session 相关的几个同名方法什么关系？</h4>

<p>Session 的 delegate 是 URL Session Manager，所以 Session 相关的回调都是到 URL Session Manager 的相关方法里。Task Delegate 里的同名方法是由 Manager 里的回调再调用的，可以搜索 delegate URLSession: 查阅。</p>

<h4>5. 实现文件里还定义了辅助类 AFURLSessionManagerTaskDelegate 及 _AFURLSessionTaskSwizzling 各自的作用是什么？</h4>

<p>前者保存了 task 的进度 (upload、download、completion) 相关的处理块。其进度信息是根据 session 委托方法传递过来的数据，计算后保存到 NSProgress 对象里的。</p>

<p>后者是为规避 NSURLSession Task 跟 KVO 相关的一个 bug，将 resume / suspend 方法改写了下。因为 class cluster 的原因，作者创建了一个 NSURLSessionDataTask 对象，使用 while 对其 super 一层层的查找。</p>

<h4>6. _AFURLSessionTaskSwizzling 中的 state 方法有何作用？为何直接 assert(NO, @&ldquo;&hellip;&rdquo;)？</h4>

<p>此处的 state 方法纯粹是为了使用 @selector(state) 以及 [self state] 时能顺利通过编译器的检查。af_resume 中调用的 [self state] 其实是 NSURLSessionDataTask 的 state 方法，_AFURLSessionTaskSwizzling 的 state 方法不会被调用，也不应该调用，所以作者使用了 assert(NO, @&ldquo;&hellip;&rdquo;)。</p>

<h4>7. Session Manager 为何实现 Coding 协议？</h4>

<p>我估计是为了支持 background session，同样值得关注的是 AFURLSessionManager 的初始化方法里调用 session 的 getTasksWithCompletionHandler 方法处理一遍 task delegate（乍一看也是不明所以，但如果是支持 background session，那就有那么点说的通了）。</p>

<h4>8. 创建 task 时为何使用  url_session_manager_create_task_safely 方法再包装一层？</h4>

<p>iOS 8 修复了一个 bug，多线程下创建的 task 小概率拥有同样的 task identifier。但是 AFNetworking 使用 task identifier 和 task delegate 映射，需要 task identifier 唯一。</p>

<p>所以对于早前有这个 bug 的 iOS 版本，使用 dispatch_sync 来同步创建 task 以规避问题。</p>

<h4>9. Session Manager 是否有内存泄露的问题？</h4>

<p>之所以提出这样的问题，是因为 Session Manager 拥有 Session，而 Session 对其 delegate 是强引用，而 Session Manager 就是这个 delegate，于是便 retain cycle 了。</p>

<p>查看苹果的文档得知『If you do not invalidate the session by calling the invalidateAndCancel or finishTasksAndInvalidate method, your app leaks memory until it exits.』</p>

<p>这也是为何 AFN 提供 - (void)invalidateSessionCancelingTasks: 接口。</p>

<h2>AFHTTPSessionManager</h2>

<h4>10. 应用层的 success / failure block 是否需要预防 block 的 retain cycle 问题？</h4>

<p>和 AFNetworking 2.0 里的 URL Connection 方案一致，不需要。以前是在 AFURLConnectionOperation 里通过  [strongSelf setCompletionBlock:nil] 释放对 completion block 的持有。</p>

<p>现在是在 Session Manager 里通过 [self removeDelegateForTask:task] 移除 task delegate 以释放对 completion handler 的持有。</p>

<h4>11. POST 相关接口的差异？</h4>

<p>仅仅 POST 一个普通的字典到服务端使用 data task，若需要 POST 一个文件 (URL / Data) 到服务端则需要使用 multipart form request 及 upload task 实现。后者字典里的普通数据，也是放在请求的 Content-Disposition: form-data; name= XXX 部分，constructing body block 里若 append 文件 (比如图片) 的话是放在 Content-Disposition: form-data; name=&ldquo;XXX&rdquo;; filename=&ldquo;XXX.png&rdquo; 部分 (下一行会指定类型，如 Content-Type: image/png)。</p>

<h4>12. POST 多张图片的 request 如何构造其 body 的？</h4>

<p>body 的构造依赖于 AFStreamingMultipartFormData 对象，待上传的单个图片会被封装到 AFHTTPBodyPart 里，然后 append 到 AFStreamingMultipartFormData → AFMultipartBodyStream → HTTPBodyParts 中。注意 AFMultipartBodyStream 继承自 NSInputStream，可直接设置到 request 中 (见 AFStreamingMultipartFormData → requestByFinalizingMultipartFormData)。</p>

<p>AFMultipartBodyStream 重写了- (NSInteger)read:(uint8_t *)buffer maxLength:(NSUInteger)length 方法，将图片按切片的方式读到 buffer 中。每一个 AFHTTPBodyPart 的构成大致包含 Boundary、Header、Body 等几个子部分，AFHTTPBodyPart 的 read 方法会按这些部分（如果存在）逐个读取出来。</p>

<h2>AFHTTPRequestSerializer</h2>

<h4>13. AFHTTPRequestSerializer 和 AFURLRequestSerialization 之间是什么关系？</h4>

<p>后者是协议，定义了一个将字典数据序列化到 request 中以得到新的 request 这么一个方法。AFHTTPRequestSerializer 实现了这个协议，使用  AFQueryStringFromParameters 方法将字典处理成 key1=value1&amp;key2=value2 这样的形式。</p>

<p>因为字典里可能嵌套包含数组或字典，AFQueryStringPairsFromKeyAndValue 方法使用了递归的思想。虽然这段代码是可以把多层嵌套转成扁平的 KV，我们通常不会嵌套字典，否则服务端无法解析。</p>

<p>除了协议约束的方法之外，AFHTTPRequestSerializer 还实现了对 multipart request 的序列化方法，实现原理见 AFHTTPSessionManager 的第 3 点。</p>

<h2>AFJSONResponseSerializer</h2>

<h4>14. AFJSONResponseSerializer 和 AFURLResponseSerialization 之间是什么关系？</h4>

<p>后者是协议，定义了一个从 response 里解析出 response object 的方法。继承自 AFHTTPResponseSerializer 的 AFJSONResponseSerializer，使用 NSJSONSerialization 完成对 JSON 数据的解析。</p>

<h4>15. AFJSONResponseSerializer 有一个属性叫 removesKeysWithNullValues，有什么用？</h4>

<p>在服务器返回的 json 数据若出现 &ldquo;somevalue&rdquo;:null，会被解析成 NSNull 的对象。我们向这个 NSNull 对象发送消息的时候就会 crash。AFJSONResponseSerializer 提供的这个属性可以控制是否将此类数据过滤掉。</p>

<h2>AFSecurityPolicy</h2>

<h4>16. 定义的三种 SSL Pinning Mode 分别有什么作用？</h4>

<p>AFSSLPinningModeNone：默认值，完全信任服务器，相当于仅支持 HTTP 请求
AFSSLPinningModeCertificate：会比对服务端传过来的证书和 APP 内的证书
AFSSLPinningModePublicKey：仅比较服务端传过来的证书携带的公钥和本地证书里的公钥是否一致</p>

<p>好房 APP 使用的是 AFNetworking 2.x，且将 validatesCertificateChain 置为了 NO，所以好房 APP 并不会严格的比对服务端传过来的证书和 APP 内的证书的内容。之所以这么设置，是因为服务端传来的是个证书链，本地证书只会和其中的一个证书 match，但 AFNetworking 2.x 的实现里要求和服务端证书链里所有的证书都匹配，APP 里不可能放入服务端可能用到的所有证书，所以只好选择不验证证书链。</p>

<p>AFNetworking 3.0 对 AFSSLPinningModeCertificate 的实现有所调整，只要有一个 match 就认为 OK，所以也不再提供 validatesCertificateChain 这个属性了。</p>

<h4>17. 如何选择适合的 Pinning Mode 呢？</h4>

<p>AFSSLPinningModeCertificate 比较安全，他会比对服务端和客户端的证书是否匹配。随 APP 打包的证书是带有效期的。如果只是比较 Public Key，则不会受有效期的影响。个人觉得使用 Public Key 的方案基本足够了。</p>

<h2>AFNetworkReachabilityManager</h2>

<h4>18. 略，主要看看对 IPV 6 的支持。</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Spotify 代理设置]]></title>
    <link href="http://balloonsys.github.io/blog/2016/12/27/spotify-proxy-on-mac/"/>
    <updated>2016-12-27T09:23:52+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/12/27/spotify-proxy-on-mac</id>
    <content type="html"><![CDATA[<p>Mac 为了无障碍上网，开着 Surge；想用 Spotify 听听歌，却因公司网络而无法登录，怎么办？</p>

<!--more-->


<p>开启 Surge 会自动配置 HTTP / Socket 代理。代理服务器为本机，即 127.0.0.1，端口分别为 6152 / 6153。</p>

<p>打开 Spotify for Mac 打开高级设置项，选择 Socket 5 代理，填写并保存代理服务器信息。</p>

<p>如果依旧无法使用 Facebook 账号登录，请在 /etc/hosts 文件中，将 login.spotilocal.com 映射到 127.0.0.1 即可。也可以在 Spotify Web 设置设备登录密码。</p>

<p>如果还有问题，可以尝试借用手机热点先登录成功。有时无法播放，请查看 Spotify 是不是直接连 IP 地址。如果是的话，请在 Surge 规则文件里添加 IP-CIDR 以覆盖对应的 IP 段，终极大法。</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第三十二期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/12/23/tech-notes-32/"/>
    <updated>2016-12-23T09:33:13+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/12/23/tech-notes-32</id>
    <content type="html"><![CDATA[<p>本期周报主要包括 HTTP 缓存机制及 iOS 的实现、Operation Queues 的相关知识、APP 启用 HTTPS 支持的基础知识、滴滴 iOS 动态化方案等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.theverge.com/2016/12/21/14037686/apple-macbook-macos-focus-mobile-features-ios">macOS is becoming legacy software</a> By Vlad Savov</h4>

<p>The Verge 引述 Bloomberg 熟悉 Apple 內部运作人士报导，Apple 已经再沒有独立的 Mac OS Team。</p>

<h2>开发</h2>

<h4>1) <a href="http://qnoid.com/2016/04/10/A-primer-in-HTTP-caching-and-its-native-support-by-iOS.html">HTTP 缓存机制及 iOS 的实现</a> By qnoid</h4>

<p>缓存机制的表述，在苹果的文档中都有。但是，判断 response 是否足够 fresh 的介绍是作者的原创。</p>

<h4>2) <a href="http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/">iOS 并发编程之 Operation Queues</a> By 雷纯锋</h4>

<p>在 iOS 开发中，我们主要可以通过 Operation Queues、Dispatch Queues 和 Dispatch Sources 来提高应用的并发性。本文主要介绍 Operation Queues 的相关知识。</p>

<p>注：本周精读了 AFNetworking 3.0 源代码，上述两篇文章都是在读代码过程中查阅过的资料。</p>

<h4>3) <a href="https://autolayout.club/2016/12/22/%E5%86%99%E7%BB%99-iOS-%E5%BC%80%E5%8F%91%E8%80%85%E7%9C%8B%E7%9A%84-HTTPS-%E6%8C%87%E5%8D%97/">写给 iOS 开发者看的 HTTPS 指南</a> By 吕文翰</h4>

<p>苹果在 WWDC 2016 上宣布年底将要求所有 APP 适配 ATS，不过本周四又宣布将这个 deadline 推迟了。本文着重介绍 APP 启用 HTTPS 支持的过程中跟 APP 相关的部分，剩余的协议细节将一笔带过。</p>

<h2>工具</h2>

<h4>1) <a href="http://mp.weixin.qq.com/s/qRW_akbU3TSd0SxpF3iQmQ">DynamicCocoa - 滴滴 iOS 动态化方案</a> By 孙源</h4>

<p>DynamicCocoa 可以让现有的 Objective-C 代码转换生成中间代码（JS），下发后动态执行。据说，手机 QQ 的方案是通过 clang 把 OC 代码编译成自己定制的字节码动态下发，然后开发一个虚拟机去执行（惊呆了）。</p>

<h4>2) <a href="http://www.jianshu.com/p/a5c5e9aa5913">XMNetworking</a> By 康祖彬</h4>

<p>XMNetworking 是一个轻量的、简单易用但功能强大的网络库，基于 AFNetworking 3.0 封装。</p>

<h2>其他</h2>

<h4>1) <a href="https://www.facebook.com/notes/mark-zuckerberg/building-jarvis/10154361492931634">扎克伯格写的 Jarvis AI</a> By Zuckerberg</h4>

<p>虽然大部分技术都是现成的（facebook 开源项目和一些自动化家用硬件），但是他整合技术和学习能力实在太恐怖了。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第三十一期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/12/16/tech-notes-31/"/>
    <updated>2016-12-16T18:16:40+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/12/16/tech-notes-31</id>
    <content type="html"><![CDATA[<p>本期周报主要包括 SDWebImage 支持 URL 不变时更新图片内容的方案、HTTP 的构成、Swift 版表单框架、Facebook 首位华人工程师的经验分享等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://jingyan.baidu.com/article/dca1fa6f73c875f1a540524e.html">无法安装 macOS Sierra 10.12 更新</a></h4>

<p>本周我尝试将 macOS Sierra 升级到 10.12 时遇到始终无法安装的问题，报验证失败的错。后来参考本文，关闭时间与互联网同步、把系统声音静音、再把任务栏正在运行的软件都退出，之后成功安装。</p>

<h2>开发</h2>

<h4>1) <a href="http://blog.handy.wang/blog/2016/01/29/sdwebimagehuan-cun-zhi-tu-pian-urlbu-bian/">SDWebImage 支持 URL 不变时更新图片内容</a> By Handy.Wang</h4>

<p>文末的第 5 个参考链接技术价值更高，相比而言作者写的文章算『术』。要了解 SDWebImage 的原理，非常推荐读一读其源代码。</p>

<h4>2) <a href="http://mrpeak.cn/blog/http-constitution/">扒一扒 HTTP 的构成</a> By mrpeak</h4>

<p>各平台上的一些第三方库都对 HTTP 做了进一步的封装，让 HTTP 变得更加亲民，但往往拿来就用的技术，很容易忽视其背后隐藏的细节。</p>

<h2>工具</h2>

<h4>1) <a href="https://github.com/xmartlabs/Eureka">Eureka - Elegant form builder in Swift</a> By xmartlabs</h4>

<p>拥有近 5000 个 star 的表单框架，如果需要 Obj-C 版本，可以看看该开发商的 XLForm 项目。</p>

<h4>2) <a href="https://github.com/12207480/DOPDropDownMenu-Enhanced">DOPDropDownMenu 增强版</a></h4>

<p>下拉选择控件在大部分国内应用里都有，作者在 DOPDropDownMenu 的基础上添加了双列表的应用，优化了代码，增强了稳定性。</p>

<h2>其他</h2>

<h4>1) <a href="http://blog.tezign.com/2016/01/09/why-facebook-become-an-empire/">婴儿期的 Facebook 吃了什么才变帝国</a> By 赵海平</h4>

<p>作者是 Facebook 的第一位华人员工，履历牛逼闪闪。他认为在做 startup 的时候，最重要的就是找到你产品的核心价值，而这个核心价值不用到最完美的时刻就应该可以体现出来。</p>

<h4>2) <a href="http://blog.professorbeekums.com/2016/12/what-makes-senior-software-developer.html">怎么判断一个人是不是高级软件工程师</a> By Beekums</h4>

<p>如果你能完全信任一个工程师，他/她办事你放心，那他/她就是高级工程师。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第三十期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/12/11/tech-notes-30/"/>
    <updated>2016-12-11T10:38:37+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/12/11/tech-notes-30</id>
    <content type="html"><![CDATA[<p>本期周报主要包括 iOS 项目的 HTTPS 迁移实战、基于 CTMediator 的组件化方案、以及给同事 Feedback 的 OFNR 模型等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://techcrunch.com/2016/12/05/idc-wearables/">Fitbit’s up and Apple’s down</a> By Brian Heater</h4>

<p>IDC 刚刚发布了全球可穿戴设备市场的最新数据，看起来 Fitbit 势头正旺。在智能手表销量下滑的情况下，可穿戴设备市场的整体规模却出现了增长。</p>

<h2>开发</h2>

<h4>1) <a href="http://www.jianshu.com/p/94f5d3830301">iOS 迁移到 HTTPS</a> By Vincent</h4>

<p>本文介绍了作者自建证书完成 AFNetworking 3.0 单向验证设置、WKWebView 及 SDWebImage 如何设置支持 HTTPS 等内容。</p>

<h4>2) <a href="http://casatwy.com/modulization_in_action.html">基于 CTMediator 的组件化方案</a> By 田伟宇</h4>

<p>作者自称希望这篇文章能够终结业界持续近一年的关于组件化方案的无谓讨论和错误讨论。</p>

<h2>工具</h2>

<h4>1) <a href="https://itunes.apple.com/cn/app/rested-simple-http-requests/id421879749?mt=12">RESTed - Simple HTTP Requests</a> By Patrick Rogers</h4>

<p>Restful API 测试工具首推 Paw 吧，由 @nixzhu 在推特提及的 RESTed 也是简洁好用，而且免费。</p>

<h2>其他</h2>

<h4>1) <a href="http://ramblinjan.com/development/2016/12/05/Your-Hiring-Process-is-your-engineering-process/">Your Hiring Process is Also Your Engineering Process</a> By Jan Jorgensen</h4>

<p>面试是双向的，公司面试求职者、求职者也挑公司。面试流程拖拖拉拉、找来不相干的人做面试官、面试官傲慢无理等，直接反映了这家公司做事的风格。</p>

<h4>2) <a href="http://blog.d3in.org/post/153942984306/negative-feedback-antipatterns">如何给同事批评建议</a> By Charles-Axel Dein</h4>

<p>年底了，大家又得做 Performance Review 了。给同事写好的、表扬形式的 review 是很容易的，但写实质性的批评建议却不容易，怕得罪人。本文给了一些正面例子与反面例子。</p>

<p>给同事 Feedback 的 OFNR 模型：Observation（对方做了啥事）、Feeling（你对这件事的感受）、Need（你觉得怎样才是对的）、Request（对方应怎么改进）。</p>

<h5>@end</h5>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十九期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/12/02/tech-notes-29/"/>
    <updated>2016-12-02T09:34:52+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/12/02/tech-notes-29</id>
    <content type="html"><![CDATA[<p>本期周报主要包括全民 K 歌 RN 的接入实践中分包与加载的方案、安全的处理 JSON 中的空值、A/B 测试里常见的辛普森悖论等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://support.apple.com/zh-cn/HT205928">Apple Music 推出学生优惠</a> By Apple</h4>

<p>如果您就读于颁发学位的大专或大学，您就能以折扣会员价加入 Apple Music，最长可享受 48 个月的优惠。这段时间不需要是连续的。</p>

<h2>开发</h2>

<h4>1) <a href="http://geek.csdn.net/news/detail/122668">全民 K 歌 React Native 最佳实践</a> By 袁聪</h4>

<p>全民 K 歌去年十月份完成了 RN 的接入实践，本文介绍了如何去实践根据业务分包、以及客户端怎么去加载这两方面内容。</p>

<h4>2) <a href="http://honglu.me/2015/04/11/json%E4%B8%AD%E5%A4%B4%E7%96%BC%E7%9A%84null/">json 中头疼的 null</a> By 鸿禄</h4>

<p>在服务器返回 json 数据的时候，时常会出现值为 null 的键值对。json 解析的时候，就会把这个 null 解析成 NSNull 的对象，我们向这个 NSNull 对象发送消息的时候就会遇到 crash 的问题。本文介绍了应对之策。</p>

<h2>工具</h2>

<h4>1) <a href="https://github.com/joeldev/JLRoutes">JLRoutes</a> By Joel Levin</h4>

<p>本周看了 JLRoutes 的源代码，拿来做 APP 的 URL 路由非常不错。不经意间会发现有些代码段就是插入排序算法。</p>

<h2>其他</h2>

<h4>1) <a href="http://www.appadhoc.com/blog/simpson-paradox-in-abtesting/">浅谈 A/B 测试里常见的辛普森悖论</a> By appadhoc</h4>

<p>辛普森悖论 (Simpson’s Paradox) 是英国统计学家 E.H.Simpson 于 1951 年提出的悖论。即在某个条件下的两组数据，在分别讨论时都会满足某种性质，可是一旦合并起来进行考虑，却可能导致相反的结论。</p>

<h4>2) <a href="https://medium.com/swlh/building-and-motivating-engineering-teams-24fd56910039">拉扯一支士气高昂的工程团队</a> By Camille Fournier</h4>

<p>三个要素：Money，别玩虚的，给足工资，正常人都爱钱；Purpose，让工程师一起做产品决策；Respect，像对待成年人一样对待工程师，尊敬他们，把他们当合伙人，而不是把他们当小孩、哄他们开心、让他们听话。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十八期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/11/23/tech-notes-28/"/>
    <updated>2016-11-23T09:31:19+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/11/23/tech-notes-28</id>
    <content type="html"><![CDATA[<p>本期周报主要包括iPhone 6s 意外关机问题计划、APP 缓存数据线程安全问题探讨、如何用私有 API 让 WKWebView 支持 NSURLProtocol 子类、如何解决 JSONKit 引起 RN 的 Crash 等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://www.apple.com/cn/support/iphone6s-unexpectedshutdown/">iPhone 6s 意外关机问题计划</a> By Apple</h4>

<p>Apple 已经确认有部分 iPhone 6s 设备可能会意外关机，符合条件的可以免费更换电池。</p>

<h2>开发</h2>

<h4>1) <a href="http://blog.cnbang.net/tech/3262/">APP 缓存数据线程安全问题探讨</a> By 陈振焯</h4>

<p>对于 APP 缓存数据线程安全问题，分线程 cache 和数据不可变是比较常见的解决方案，都有着不同的实现代价。前者接口不友好，后者需要配合单向数据流之类的规则或框架才会变得好用。</p>

<h4>2) <a href="https://blog.yeatse.com/2016/10/26/support-nsurlprotocol-in-wkwebview/">让 WKWebView 支持 NSURLProtocol</a> By Yeatse</h4>

<p>WKWebView 还没有完善到能完全替代 UIWebView 的程度。比如 WKWebView 中的请求却完全不遵从自定义 NSURLProtocol 子类，本文介绍了如何用私有方法解决此痛点。</p>

<h4>3) <a href="https://github.com/johnezang/JSONKit/issues/176">JSONKit makes React Native Crash</a></h4>

<p>在 React Native 0.33 时，我们是通过<a href="https://github.com/facebook/react-native/issues/7055">修改 RN 源代码</a>规避 JSONKit 引起的 Crash 问题；升级到 RN 0.35 后，将 JSONKit.m 中的 *((void **)XXX) 替换成 object_getClass(XXX) 也可解决此问题。</p>

<h2>工具</h2>

<h4>1) <a href="http://mrpeak.cn/blog/mitmproxy/">免费抓包工具 mitmproxy</a> By MrPeak</h4>

<p>似乎知道 Charles 的同学更多一些，但其实 Charles 有的功能 mitmproxy 基本都有，mitmproxy 还免费，而且对于 terminal 用户来说使用起来更亲近。</p>

<h4>2) <a href="http://www.waerfa.com/icloud-calendar-spam-clean-methods">iCloud 日历垃圾广告清理办法探讨</a> By Waerfa</h4>

<p>近期被黑五的日历垃圾广告干扰，采用文中的『建立分类、设置垃圾广告为刚建立的分类、删除分类』大法清理干净。</p>

<h2>其他</h2>

<h4>1) <a href="https://techcrunch.com/2015/03/03/in-the-age-of-disintermediation-the-battle-is-all-for-the-customer-interface/">The Battle Is For The Customer Interface</a> By Tom Goodwin</h4>

<p>本文就是下面这段被无数人转载了的话的出处：</p>

<blockquote><p>Uber是最大的出租车公司，但并不拥有任何车；FB是最大的媒体公司，但不自己生产内容；阿里巴巴是最大的零售商，但没库存；Airbnb是最大的旅馆，但不拥有房产。</p></blockquote>

<p>互联网成就了这些公司，让他们有能力提供一层看似非常简单的用户界面，大规模地连接供需双方。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十七期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/11/18/tech-notes-27/"/>
    <updated>2016-11-18T15:05:15+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/11/18/tech-notes-27</id>
    <content type="html"><![CDATA[<p>本期周报主要包括如何实现在 TableView 中滑动播放视频、无法获取真实进度时如何做个优雅的进度动画、Sierra 显示隐藏文件的快捷方式、破窗效应等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://www.bloomberg.com/news/articles/2016-11-17/apple-is-said-to-cut-fees-video-services-will-pay-for-app-store">Apple to Cut Fees Video Services Will Pay for App Store</a> By Lucas Shaw</h4>

<p>苹果计划将 App Store 视频服务接入的费用从 30% 降到 15%，这意味着视频服务供应商在苹果各平台的运营成本将大幅降低。</p>

<h2>开发</h2>

<h4>1) <a href="http://www.jianshu.com/p/3946317760a6">滑动 TableView 自动播放视频</a> By NewPan</h4>

<p>本文介绍了如何实现在 TableView 中滑动播放视频，并且是没有任何卡顿的实现滑动播放视频。同时也将讲述如何确定哪一个 Cell 播放视频。</p>

<h4>2) <a href="http://mrpeak.cn/blog/http-upload-progress/">Http 文件上传进度为什么不准</a> By Peak</h4>

<p>我们调用第三方 http framework 上传文件的时候，都会有 API 回调告诉我们上传的具体进度，但这个进度值都是不准的。本文介绍了此情况下如何做个优雅的进度动画。</p>

<h2>工具</h2>

<h4>1) <a href="https://twitter.com/24says/status/780677320197574656">Sierra 显示隐藏文件</a> By 24Says</h4>

<p>macOS Sierra 里可以通过 CMD + Shift + . 直接在 Finder 里显示隐藏文件。</p>

<h4>2) <a href="https://github.com/BeauNouvelle/FaceAware">FaceAware</a> By Beau Nouvelle</h4>

<p>现在大部分 APP 里的个人中心页面，都会提供设置头像的功能，这个 Swift 库会根据脸部位置以最优的方式展示头像。</p>

<h2>其他</h2>

<h4>1) <a href="https://blog.codinghorror.com/the-broken-window-theory/">The Broken Window Theory</a> By Jeff Atwood</h4>

<p>环境中的不良现象如果被放任存在（如社区中某些建筑的窗户破了而没被修复），就会诱使人们仿效（人们就认为破窗户是正常的，就会破坏更多窗户），甚至变本加厉。公司里的垃圾代码不被及时修复，就会被更多人效仿。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十六期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/11/11/tech-notes-26/"/>
    <updated>2016-11-11T23:13:12+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/11/11/tech-notes-26</id>
    <content type="html"><![CDATA[<p>本期周报主要包括库克关于总统大选结果的内部信、携程在实践 React Native 时的优化经验、JSPatch 热修复文件的加载方案、App 销售报表工具等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://techcrunch.com/2016/11/10/tim-cook-apple-donald-trump-election-win/">Move Forward Together</a></h4>

<p>关于总统大选，苹果 CEO 库克致信美国员工。他表示，无论谁都无法阻挡苹果前进的脚步，唯有携手前进才能变得更好。</p>

<h2>开发</h2>

<h4>1) <a href="http://techshow.ctrip.com/archives/1459.html">携程是如何做 React Native 优化的</a> By 赵辛贵</h4>

<p>两周前去携程现场聆听了赵老师的分享，真的非常非常的赞。该讲座对我而言很有启发性，可以很好的指导我新技术框架如何研究、实践、改进。</p>

<h4>2) <a href="https://github.com/bang590/JSPatch/wiki/JSPatch-Loader-%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3">JSPatch Loader 使用文档</a> By 陈振焯</h4>

<p>集成 JSPatch 到 iOS 项目里的主要工作在于实现一套安全的热修复脚本下发与加载的机制。如果想自己实现而不是购买 JSPatch Platform 提供的服务，可以读一读作者写的这篇文章。</p>

<h2>工具</h2>

<h4>1) <a href="http://www.appwage.com">AppWage</a> By Hankinsoft</h4>

<p>这是一个开源的 iTunes Connect 报表工具，开发商的另一款收费软件 SQLPro for SQLite 我也一直在用。</p>

<h4>2) <a href="http://www.jianshu.com/p/05b68c84913a">iOS 性能调优</a></h4>

<p>提供了基于 Swift 3.0 模仿新浪微博的 Demo，里面针对于微博首页的复杂页面的优化做了很多的处理，页面的 FPS 一直保持在 59 ~ 60。</p>

<h2>其他</h2>

<h4>1) <a href="http://highscalability.com/blog/2016/6/20/the-technology-behind-apple-photos-and-the-future-of-deep-le.html">Apple Photos 背后的技术与用户的隐私</a> By highscalability</h4>

<p>Apple 使用 differential privacy 技术收集用户数据到云端训练 model，但从这些数据中无法识别出具体的个体；这些 model 下载到手机，依靠强大的手机性能进行分析，识别，归类你的照片；理论上分析的结果只留在你的手机上。</p>

<h4>2) <a href="http://randsinrepose.com/archives/the-process-myth">The Process Myth</a> By Michael Lopp</h4>

<p>工程师尤其看不惯公司里的各种规章制度、各种条条框框，所谓的 process；工程师们老爱问为什么，为什么会有这样那样的规定。公司里指定规章制度的人又都不给你解释为什么，“历来就如此，别问那么多为什么”。</p>

<blockquote><p>It’s a myth, but healthy process is awesome if it not only documents what we care about, but is willing to defend itself. It is required to stand up to scrutiny and when a process fails to do so, it must change.</p></blockquote>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十五期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/11/04/tech-notes-25/"/>
    <updated>2016-11-04T19:51:17+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/11/04/tech-notes-25</id>
    <content type="html"><![CDATA[<p>本期周报主要包括 App Store 新增支付宝付款、iOS 静态库及动态库开发经验总结、Today Widget 在低版本系统上的兼容开发经验等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.mac52ipod.cn/post/apple-app-store-support-alipay.php">App Store 应用商店支持支付宝付款</a> By bmwmengwei</h4>

<p>此新闻看标题即可，我已经从信用卡切换到支付宝了。因为之前老是弹出信用卡信息验证的页面，希望以后不再被打扰。</p>

<h4>2) <a href="http://www.ifanr.com/739044">苹果确认放弃独立显示屏业务</a></h4>

<p>The Verge 编辑 Nilay Patel 从苹果方面确认，苹果选择放弃独立显示屏业务，此后苹果的显示屏生产将全部交由 LG 等生产商伙伴负责。</p>

<h2>开发</h2>

<h4>1) <a href="http://balloonsys.com/blog/2016/11/04/static-vs-dynamic-lib/">iOS 静态库及动态库开发</a> By Linkou Bian</h4>

<p>本文总结在好房移动架构团队做 Framework 开发中的一些经验。特别是动态库部分的实践，干货满满。</p>

<h4>2) <a href="https://kristina.io/backwards-compatibility-with-ios-10-today-widgets/">Tips for Backwards Compatibility with iOS 10 Today Widgets</a> By Kristina Thai</h4>

<p>作者介绍了开发 Today Widgets 兼容 iOS 9 / 10 的三点经验，对做 Widget 开发的朋友还是有益处的。</p>

<h4>3) <a href="http://fanhang.me/ios/-ge-cai-gua-ying-swift2.2de-kai-fa-zhe-yan-zhong-de-swift-3.0he-ios-10">一个才适应 Swift 2.2 的开发者眼中的 Swift 3.0</a> By amoyio</h4>

<p>文中大部分内容之前的周报都有过分享，重点关注下 1.7、2.5、3.8、4.4、4.5 等。关于 Swift 3 的适配，本周也有其他工程师分享了经验，吐槽居多。</p>

<h2>工具</h2>

<h4>1) <a href="http://eprev.org/2015/08/06/change-os-x-network-location-based-on-the-wi-fi-network-name/">Network Location Changer</a> By Anton Eprev</h4>

<p>通常在公司需要使用内网的 DNS，而我在家往往希望使用阿里的 DNS，可以在网络首选项建立不同的 Location 以满足此需求。Anton 提供的这个脚本不光可以自动切换 Location 还提供了额外的功能。</p>

<h2>其他</h2>

<h4>1) <a href="https://steveblank.com/2016/10/24/why-tim-cook-is-steve-ballmer-and-why-he-still-has-his-job-at-apple">Why Tim Cook is Steve Ballmer and Why He Still Has His Job at Apple</a> By Steve Blank</h4>

<p>产品型、有远见的CEO离开公司后都传位给曾经执行力强但不懂做产品的下属，公司靠着前任CEO定下的牛逼的商业模式，再加上现任强执行力的CEO，盈利还能增长几年，只是不创新了。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 静态库及动态库开发]]></title>
    <link href="http://balloonsys.github.io/blog/2016/11/04/static-vs-dynamic-lib/"/>
    <updated>2016-11-04T18:48:51+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/11/04/static-vs-dynamic-lib</id>
    <content type="html"><![CDATA[<p>本文总结在好房移动架构团队做 Framework 开发中的一些经验。</p>

<!--more-->


<p>之前负责好房 APP 开发时，需要支持 iOS 7+，所以五月份设计统计 SDK 时只好采用静态库的方式。随着 iOS 10 的推出，iOS 7 的支持默认被移除，结合 APP 的用户设备分布，目前 APP 已改为支持 iOS 8+，所以上个月设计的 React Native 增量 Patch 更新 SDK 可采用动态库的方案。</p>

<p>至于 iOS 中静态库与动态库的差别，网上有很多文章介绍，本文不再赘述，而将重点放在这两种库的具体开发实现过程。</p>

<h2>静态库</h2>

<p>Google 的工程师已经写了一篇非常赞的<a href="https://github.com/jverkoey/iOS-Framework">文章</a>，好房统计 SDK 就是按照此方案一步步配置的。经验证，效果非常好。其提供的脚本也很精致，无冗余。</p>

<p>当然 Raywenderlich 的网站也有一篇<a href="https://www.raywenderlich.com/65964/create-a-framework-for-ios">文章</a>，方案类似，相比于 Google 程序员写的指南，多个实例。初次接触静态库开发的开发者可以读一读。</p>

<p>故此处也不再重复介绍。</p>

<h2>动态库</h2>

<p>Xcode自带的 framework 模板，创建的动态库（包含资源）可以在iOS 7上跑（真机测试过），但官方要求iOS 8+，可能提交 app store 验证不过。</p>

<p>更大的问题就是提交 app store 时会提示包含 x86_64, i386 &hellip; 截图<a href="http://ikennd.ac/pictures/iTC-Unsupported-Archs.png">在此</a>。该问题在 Xcode 6.3.2 之前及 7.1 上都有开发者遇到，PSPDFKit 这个库的开发者是在分发动态库时在 framework 里嵌入一个 shell 脚本，供使用方在 Xcode 里运行。我最终没有采用该方式。</p>

<p>关于动态库的更多讨论，有一篇<a href="http://stackoverflow.com/questions/30963294/creating-ios-osx-frameworks-is-it-necessary-to-codesign-them-before-distributin">文章</a>值得一看。</p>

<p>有上述背景知识，我们的动态库的具体做法：</p>

<h3>针对 Dynamic Library 工程中 Aggregate 构建目标的脚本</h3>

<p>仿照 jverkoey 文章中的 Aggregate 脚本，很 Easy 的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="nb">set</span> +u
</span><span class='line'>
</span><span class='line'><span class="c"># Avoid recursively calling this script.</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$SF_MASTER_SCRIPT_RUNNING</span> <span class="o">]]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nb">exit </span>0
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">set</span> -u
</span><span class='line'><span class="nb">export </span><span class="nv">SF_MASTER_SCRIPT_RUNNING</span><span class="o">=</span>1
</span><span class='line'>
</span><span class='line'><span class="nv">SF_TARGET_NAME</span><span class="o">=</span><span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span>
</span><span class='line'><span class="nv">SF_EXECUTABLE_PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span>
</span><span class='line'><span class="nv">SF_WRAPPER_NAME</span><span class="o">=</span><span class="s2">&quot;${SF_TARGET_NAME}.framework&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The following conditionals come from</span>
</span><span class='line'><span class="c"># https://github.com/kstenerud/iOS-Universal-Framework</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;$SDK_NAME&quot;</span> <span class="o">=</span>~ <span class="o">([</span>A-Za-z<span class="o">]</span>+<span class="o">)</span> <span class="o">]]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nv">SF_SDK_PLATFORM</span><span class="o">=</span><span class="k">${</span><span class="nv">BASH_REMATCH</span><span class="p">[1]</span><span class="k">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Could not find platform name from SDK_NAME: $SDK_NAME&quot;</span>
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;$SDK_NAME&quot;</span> <span class="o">=</span>~ <span class="o">([</span>0-9<span class="o">]</span>+.*<span class="nv">$)</span> <span class="o">]]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nv">SF_SDK_VERSION</span><span class="o">=</span><span class="k">${</span><span class="nv">BASH_REMATCH</span><span class="p">[1]</span><span class="k">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Could not find sdk version from SDK_NAME: $SDK_NAME&quot;</span>
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;$SF_SDK_PLATFORM&quot;</span> <span class="o">=</span> <span class="s2">&quot;iphoneos&quot;</span> <span class="o">]]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nv">SF_OTHER_PLATFORM</span><span class="o">=</span>iphonesimulator
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="nv">SF_OTHER_PLATFORM</span><span class="o">=</span>iphoneos
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="s2">&quot;$BUILT_PRODUCTS_DIR&quot;</span> <span class="o">=</span>~ <span class="o">(</span>.*<span class="o">)</span><span class="nv">$SF_SDK_PLATFORM$ </span><span class="o">]]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'><span class="nv">SF_OTHER_BUILT_PRODUCTS_DIR</span><span class="o">=</span><span class="s2">&quot;${BASH_REMATCH[1]}${SF_OTHER_PLATFORM}&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Could not find platform name from build products directory: $BUILT_PRODUCTS_DIR&quot;</span>
</span><span class='line'><span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>rm -r <span class="s2">&quot;${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/_CodeSignature&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Build the other platform.</span>
</span><span class='line'>xcrun xcodebuild -project <span class="s2">&quot;${PROJECT_FILE_PATH}&quot;</span> -target <span class="s2">&quot;${TARGET_NAME}&quot;</span> -configuration <span class="s2">&quot;${CONFIGURATION}&quot;</span> -sdk <span class="k">${</span><span class="nv">SF_OTHER_PLATFORM</span><span class="k">}${</span><span class="nv">SF_SDK_VERSION</span><span class="k">}</span> <span class="nv">BUILD_DIR</span><span class="o">=</span><span class="s2">&quot;${BUILD_DIR}&quot;</span> <span class="nv">OBJROOT</span><span class="o">=</span><span class="s2">&quot;${OBJROOT}&quot;</span> <span class="nv">BUILD_ROOT</span><span class="o">=</span><span class="s2">&quot;${BUILD_ROOT}&quot;</span> <span class="nv">SYMROOT</span><span class="o">=</span><span class="s2">&quot;${SYMROOT}&quot;</span> <span class="nv">$ACTION</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Smash the two static libraries into one fat binary and store it in the .framework</span>
</span><span class='line'>xcrun lipo -create <span class="s2">&quot;${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/${SF_EXECUTABLE_PATH}&quot;</span> <span class="s2">&quot;${SF_OTHER_BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/${SF_EXECUTABLE_PATH}&quot;</span> -output <span class="s2">&quot;${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/${SF_TARGET_NAME}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Copy the binary to the other architecture folder to have a complete framework in both.</span>
</span><span class='line'>cp -a <span class="s2">&quot;${BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/${SF_TARGET_NAME}&quot;</span> <span class="s2">&quot;${SF_OTHER_BUILT_PRODUCTS_DIR}/${SF_WRAPPER_NAME}/${SF_TARGET_NAME}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>业务方工程在 Embed Framework 之后增加<a href="https://github.com/realm/realm-cocoa/blob/f07d1af226b67c0aefb150d12da3fd34c5d64087/scripts/strip-frameworks.sh">脚本</a></h3>

<p>该脚本从动态库里移除不必要的处理器架构。因为改动了 ipa 中动态库的可执行文件，所以该 strip 脚本还需要重新对动态库中可执行文件签名。正因为会重新签名，Embed Framework 处不必勾选 Code Sign on Copy。</p>

<h2>第三方依赖</h2>

<p>我的做法是尽量不引入第三方代码到我的 Framework 中。但如果有些算法类的库，比如 ZipArchive 等，很多时候还是需要在 Framework 中用的。直接把第三方代码拉进来，可能会和业务方引入的代码冲突。怎么办？</p>

<p>Kamil Burczyk 在他的<a href="http://blog.sigmapoint.pl/avoiding-dependency-collisions-in-ios-static-library-managed-by-cocoapods/">文章</a>中给出了一种通过脚本改类名的方案。</p>

<p>我们的方案是<strong>在 Framework 的工程里，只引入第三方的头文件</strong>。要求业务方使用时确保引入第三方库。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016 年读过的那些书]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/30/reading-in-2016/"/>
    <updated>2016-10-30T13:04:09+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/30/reading-in-2016</id>
    <content type="html"><![CDATA[<p>本文记录一下 2016 年我阅读过的技术及非技术类书籍。</p>

<!--more-->


<h2>技术类</h2>

<h3><a href="https://www.raywenderlich.com/store/core-data-by-tutorials">Core Data by Tutorials SECOND EDITION</a></h3>

<p>搬来上海之前我对 Core Data 只有粗略的了解，并没有在项目中实际运用。今年五月份设计并实现统计 SDK 时首次实践了一把，然后基于此书系统的学习了下这个框架。Asynchronous fetching, Versionary and Migaration, Measuring and Boosting Performance, Multiple Managed Object Contexts 这几个主题极赞。</p>

<p><img src="https://img3.doubanio.com/lpic/s28523756.jpg" alt="Core Data by Tutorials SECOND EDITION" /></p>

<h3><a href="https://www.hackingwithswift.com/store/practical-ios10">Practical iOS 10</a></h3>

<p>今年 iOS 10 的第一个 beta 出来之后，我就跟着 Paul Hudson 的电子书熟悉新的 API 及框架。每个 beta 出来都会更新几章，总得来说也还行。</p>

<p><img src="http://a4.mzstatic.com/us/r30/Publication71/v4/2d/dc/54/2ddc5401-f9d7-3c05-c3d5-91afd3a45698/cover225x225.jpeg" alt="Practical iOS 10" /></p>

<h3><a href="https://www.manning.com/books/ionic-in-action">Ionic in Action</a></h3>

<p>六七月份时技术团队组织架构调整，业务研发部来了位斯坦福大学毕业的总经理，受其影响我在八月份调研了下 Ionic 在 iOS 上的运用。期间，我用该框架粗糙的实现了好房 APP 的首页。</p>

<p><img src="https://img3.doubanio.com/lpic/s28380910.jpg" alt="Ionic in Action" /></p>

<h3><a href="https://www.bignerdranch.com/we-write/swift-programming/">Swift Programming</a></h3>

<p>Swift 这本书是去年 12 月份购于美国亚马逊的，目前已经读完第一遍。虽然 Swift 3 已经出来了，阅读此书带来的益处仍然很大。非常喜欢 BNR 出品的技术书籍。</p>

<p><img src="https://img1.doubanio.com/lpic/s28372868.jpg" alt="Swift Programming" /></p>

<h3><a href="http://shop.oreilly.com/product/0636920041511.do">Learning React Native</a></h3>

<p>经过各种评估，团队认为 Ionic 并不适合我们。领导说，这个方案不行，那你得给我个可行的方案，于是引入了 React Native 这一明星框架。跟着 Twitter 工程师写的这本书可以很快上手，十月份的试点项目也顺利完成。</p>

<p>10 月 23 日在携程的园区里听其技术经理分享的 React Native 业务实践和性能优化受益颇多，接下来的一周我顺利完成了增量更新方案的设计与实现。</p>

<p><img src="https://img3.doubanio.com/lpic/s28268062.jpg" alt="Learning React Native" /></p>

<h2>文学类</h2>

<h3><a href="https://book.douban.com/subject/1752755/">第九个寡妇</a></h3>

<p>今年九月份在公司内部做了一次技术分享，主题是 iOS 模块化架构的探索。教师节那天收到人事行政部送的礼盒，其中有个 Kindle。拿到该 Kindle 的第一个周末就读完了一本严歌苓的小说。</p>

<p><img src="https://img3.doubanio.com/lpic/s26094273.jpg" alt="第九个寡妇" /></p>

<h3><a href="https://book.douban.com/subject/20258503/">土摩托看世界</a></h3>

<p>入门级 Kindle 的弊端是不适合昏暗或略拥挤的场合，这时候 iPhone 就派上了用场。所以这本游记类的书就这么 Kindle 看几章、iPhone 看几章，交替的读完。都说 Amazon 的云服务做的最好，可是 Kindle 和 Kindle for iPhone 之间的阅读位置并没有做好同步。</p>

<p><img src="https://img3.doubanio.com/lpic/s23006273.jpg" alt="土摩托看世界" /></p>

<h3><a href="https://book.douban.com/subject/26837288/">钓鱼的男孩</a></h3>

<p>十月下旬至十一月中旬，上下班搭乘地铁以及周末在家随手翻看完的。关于非洲的小说，看的第一部是大河湾。当然这本书是没法和大河湾比的，用来消遣却也还不赖。</p>

<p><img src="https://img5.doubanio.com/lpic/s28948246.jpg" alt="钓鱼的男孩" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十四期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/28/tech-notes-24/"/>
    <updated>2016-10-28T21:40:38+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/28/tech-notes-24</id>
    <content type="html"><![CDATA[<p>本期周报主要包括新款 MacBook Pro 的产品信息及其主要卖点 Touch Bar 相关的开发指南、如何高效计算文件的哈希值等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.mac52ipod.cn/post/apple-macbook-pro-2016-event-5-min-briefintroduction.php">MacBook Pro 发布会</a> By mac52ipod</h4>

<p>键盘第一排的功能键被换成了 Touch Bar ，其右侧加上了指纹识别。接口全部是 Thunderbolt 3 ，普通用户为了用手上的老外设，恐怕不得不买转接器。</p>

<h2>开发</h2>

<h4>1) <a href="http://blog.cee.moe/touchbar-tutorial.html">Touch Bar 入门开发指南</a> By Cee</h4>

<p>作者示范一个最简单的 Touch Bar 应用：在屏幕上随机生成两个 0 到 9 的整数，通过点击 TouchBar 中的按钮来比较两个数大小，并给出结果。</p>

<h4>2) <a href="http://www.joel.lopes-da-silva.com/2010/09/07/compute-md5-or-sha-hash-of-large-file-efficiently-on-ios-and-mac-os-x/">Compute hash of large file effeciently</a> By Joe Kun</h4>

<p>简单粗暴的方式是把文件全部加载到 NSData 对象，但对于大文件来说效果非常不好。作者介绍了基于 CFReadStream 的实现方案。本周我实现 React Native 的增量更新时需要计算下载下来的 Patch 文件 hash 值，采用的就是文中的方案。</p>

<h2>工具</h2>

<h4>1) <a href="https://github.com/mas-cli/mas">mas-cli</a> By Dmitry Rodionov</h4>

<p>Mac App Store 的命令行程序，支持 brew 安装。</p>

<h4>2) <a href="https://www.getpostman.com">Postman</a></h4>

<p>如果你不想花钱购买 Paw，那么值得试试 Postman 这个独立的 APP（不是 Chrome 的插件喔）。</p>

<h2>其他</h2>

<h4>1) <a href="https://juokaz.com/blog/becoming-a-cto">Becoming a CTO</a> By Juozas</h4>

<p>如果你还在写博客阐述为何说 PHP 太逊了，那你还没准备好做 CTO 哦。那些讨厌文山会海、不喜欢和非技术人员打交道的人，也不大可能会胜任 CTO 一职的。</p>

<blockquote><p>The CTO must protect the technology team from becoming a pure execution arm for ideas without tending to its own needs and its own ideas.</p></blockquote>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十三期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/19/tech-notes-23/"/>
    <updated>2016-10-19T20:54:10+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/19/tech-notes-23</id>
    <content type="html"><![CDATA[<p>本期周报主要包括 Mac 系列产品的最新消息、React Native 项目实战经验、React Native 增量升级方案、iOS 自动化打包等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://www.recode.net/2016/10/18/13323264/apple-new-macs-october-27">Apple plans to launch new Macs at an October 27 event</a> By Recode</h4>

<p>苹果上一次对 MacBook Pro 进行大幅度更新是在 2012 年。根据 Recode 的消息源，苹果将在 10 月 27 日发布新的 Mac 系列产品。</p>

<h2>开发</h2>

<h4>1) <a href="http://balloonsys.com/blog/2016/10/18/rn-put-it-all-together/">React Native 项目实战</a> By Linkou Bian</h4>

<p>本文以 Twitter 工程师 Bonnie Eisenman 撰写的 Learning React Native 一书的第九章内容为蓝本，总结了 React Native 项目实践的一些经验。</p>

<h4>2) <a href="https://github.com/cnsnake11/blog/blob/master/ReactNative%E5%BC%80%E5%8F%91%E6%8C%87%E5%AF%BC/ReactNative%E5%A2%9E%E9%87%8F%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88.md">React Native 增量升级方案</a> By cnsnake11</h4>

<p>一般使用 RN 编写的 app 的线上使用方式，是将 react-native bundle 命令打出bundle 文件和 assets 文件夹，直接内置到 app 中，app 在 controller 中直接加载 bundle 文件，当修改了代码或者图片的时候，只要app使用新的bundle文件和assets文件夹，就完成了一次在线升级。</p>

<h4>3) <a href="http://www.jianshu.com/p/131de575ef9e">列表和网格视图的相互切换</a> By LeeJay</h4>

<p>在很多电商 app 中，都有列表视图和网格视图的相互切换。很多人看到第一时间想到的是用 TableView 和 CollectionView 来做切换。作者给出了一个非常简单的方法。</p>

<h2>工具</h2>

<h4>1) <a href="http://liumh.com/2016/05/22/use-xcconfig-config-specific-variable/">Xcode 使用 xcconfig 文件配置环境</a> By Carya Liu</h4>

<p>使用 Xcode 的 Configurations Setting File 把所有的环境配置都整合到配置文件中，这样打不同环境下的安装包时，会自动选择对应的环境参数。</p>

<h4>2) <a href="http://liumh.com/2015/11/25/ios-auto-archive-ipa/">iOS 自动打包并发布脚本</a> By Carya Liu</h4>

<p>本文最终实现的是使用脚本打 Ad-hoc 包，并发布测试，当然稍微修改一下脚本参数就可以打其他类型的 ipa 包了。</p>

<h2>其他</h2>

<h4>1) <a href="https://zhuanlan.zhihu.com/p/22672061">互联网合并浪潮中，内部员工该何去何从？</a> By 林安</h4>

<p>通过采访那些亲身经历过公司合并的同学，给每一位身处这个时代的互联网人以警醒。当有一天，公司合并这件事落在你身上时，希望你能从这篇文章中汲取干货，从容面对、冷静处理。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native 项目实战]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/18/rn-put-it-all-together/"/>
    <updated>2016-10-18T15:02:29+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/18/rn-put-it-all-together</id>
    <content type="html"><![CDATA[<p>本文以 Twitter 工程师 Bonnie Eisenman 撰写的 Learning React Native 一书的第九章内容为蓝本，总结了 React Native 项目实践的一些经验。</p>

<!--more-->


<h2>项目组织结构</h2>

<p>所有的新增文件均放在项目根目录下的 src 里，主要有包含各页面的 components 子目录、数据模型的 data 子目录、负责数据存取的 stores 子目录、公共样式定义 styles 子目录、存放资源图片等的 resources 子目录等。</p>

<p><img src="https://c2.staticflickr.com/6/5781/30365572286_b0c35d2176_o.png" width="226" alt="RN Project Structure" /></p>

<p>index.ios.js 是 Native 应用的入口，该文件尽量简洁，指向 RN 项目里负责页面跳转的主文件 components/Zebreto.js。</p>

<h2>案例项目简介</h2>

<p>作者提供的示例项目包含三个页面，包含多副牌（Deck）的列表页、为选中的某副牌增加一张卡牌（Card）的页面、为某张卡牌选择答案（Review）的页面。</p>

<p>在列表页点击 Create Deck 按钮，按钮上方出现输入框，填写内容作为 Deck 的名称。点击 Deck 右侧按钮则进入增加卡牌页面，点击 Deck 左侧则进入 Review 的页面。</p>

<h2>构建基础组件</h2>

<h3>公共样式</h3>

<p>全局的颜色、字号等，可以在 js 里直接定义字典数据结构，然后 exports 以供外界访问。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">palette</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">pink</span><span class="o">:</span> <span class="s1">&#39;#FDA6CD&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">palette</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，像平安好房的应用可以参照上述结构定义 pa_orange 等色值。值得注意的是，我们也可以在一个 js 文件里定义多个字典，然后 exports 时将他们包含在花括号中即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span><span class="nx">fonts</span><span class="p">,</span> <span class="nx">color</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>在使用上述结构时，就需要这么 import 了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">fonts</span><span class="p">,</span> <span class="nx">color</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;&lt;PATH-OF-FILE&gt;&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>公共组件</h3>

<p>我们不直接用 Text 组件，而是包装成 HeadingText 和 NormalText 供项目里的不同页面使用。同样的，为了代码重用与使用便捷，我们封装 Button、Input、LabeldInput 等组件。</p>

<p>其中 Button 组件构建在 TouchableOpacity 基础之上，支持 func 类型的属性以在点击时调用使用方的方法，也支持 View.propTypes.style 类型的属性以方便定制其样式等。</p>

<p>需要注意的是，为了让 Button 组件能包含其他子组件，我们使用了一个 object 类型的属性，然后在 render 时输出 children 即可。</p>

<p>HeadingText 和 NormalText 建立在 Text 组件之上，自定义样式是通过 Text.propTypes.style 类型的属性支持的。注意此处类型不同于前面 Button 使用过的样式类型。</p>

<p>Input 组件建立在 TextInput 之上，LabeledInput 组合了 Input 和 NormalText 两个组件，体现了复用的理念。</p>

<h2>页面开发</h2>

<h3>Deck 列表页</h3>

<h4>数据建模</h4>

<p>在 React Native 项目试点过程中，尚不熟悉 JavaScript 的类相关语法。当时都是用的字典:[</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Deck</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Deck</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>数据在本地使用 AsyncStorage 存取，所有的存取方法均封装在 DeckStore.js 里。</p>

<h4>Reflux 架构</h4>

<p>作者使用 Reflux 架构实现数据的单项流动，主要的两个概念便是 Store 和 Action 了。</p>

<p>用户在 View 上操作，触发 Action，示例 View 的事件响应代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">DeckActions</span><span class="p">.</span><span class="nx">createDeck</span><span class="p">(</span><span class="nx">deck</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>而 createDeck 是在 actions.js 里定义的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">export</span> <span class="kd">var</span> <span class="nx">DeckActions</span> <span class="o">=</span> <span class="nx">Reflux</span><span class="p">.</span><span class="nx">createActions</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;createDeck&#39;</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Store 的 init 方法里监听 Action：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">decksStore</span> <span class="o">=</span> <span class="nx">Reflux</span><span class="p">.</span><span class="nx">createStore</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_decks</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">listenTo</span><span class="p">(</span><span class="nx">DeckActions</span><span class="p">.</span><span class="nx">createDeck</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">createDeck</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">createDeck</span><span class="p">(</span><span class="nx">deck</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_decks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">deck</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">emit</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_decks</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">decksStore</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样在 createDeck 这一 action 触发后，Store 变回执行 createDeck 方法以更新 Store 中的数据，再通过 emit 方法通知出去。</p>

<p>View 里面监听 DeckStore 的消息，将通知携带来的数据模型存在 state 里以触发 render 方法的执行（更新 UI）。</p>

<p><img src="https://c2.staticflickr.com/6/5816/29772102074_b8ec9b3328_o.png" width="328" alt="Reflux Architecture" /></p>

<h4>页面组装</h4>

<p>src/components/Decks/index.js 是该页面的主文件，会包含一些子组件以完成整个页面的渲染。</p>

<p>在 index.js 的 render 方法里，将这一段代码封装在一个独立的工具方法，然后在 render 里面引用其返回的 UI 结构。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">_getDecks</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">decks</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">decks</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">deck</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Deck</span> <span class="nx">deck</span><span class="o">=</span><span class="p">{</span><span class="nx">deck</span><span class="p">}</span> <span class="p">...</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用高阶函数 map 根据每个 deck 数据对象生成对应的 Deck 标签，作为数据返回。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">View</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_getDecks</span><span class="p">()}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">DeckCreation</span> <span class="p">...</span><span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输入 Deck 名时比正常情况下多一行输入框，所以在 DeckCreation.js 中根据一个 state 变量分别返回不同的两个子组件：EnterDeck 和 CreateDeckButton。前者由公共组件 Input 和 CreateDeckButton 组合而成。CreateDeckButton 由公共组件 Button 和 NormalText 组合而成。</p>

<p>详细代码不在本文中提供，以思路为重。</p>

<h3>Card 新建页</h3>

<p>整体过程类似于 Decks 页面的构建。主要就是在 View 触发 CardActions.createCard 这一 Action，在 Card 的 Store 中监听以更新数据集合。</p>

<h3>Review 交互页</h3>

<p>本页面有两种场景，若存在尚未 Review 过的 Card 则显示可选择答案的 Review 页面，否则显示 Review 结果（正确率）。所以 src/components/Review/index.js 里分两种情况返回 UI 结构。</p>

<p>选择答案的 UI 结构，其封装在 ViewCard.js 中，做法类似于之前 Decks 利用 map 高阶函数的方案。Review 这一块稍微难懂一点的是其 Store 里根据录入的卡片构造选项的逻辑，但这其实已不是 React Native 的范围，耐心的多看一会儿就可以懂。</p>

<h2>问题与解决方案</h2>

<h3>Decks 页面不展示模拟数据</h3>

<p>我在完成 Decks 页面的展示时，就不等 Create Deck 功能的实现，就开始测试一下页面。比如在 components/Decks/index.js 的 getInitialState 中直接构造几个 Deck 对象。但是并没有展示出来:[</p>

<p>原因在于 Store 发出的消息，导致 View 的 state 里的数据立即被置空。我们可以临时在加个判断，为空就不 setState({decks}) 即可。</p>

<h3>Review 结果展示页告警</h3>

<p>该页使用公共组件 NormalText 并传递 color 给它，但作者提供的 NormalText 代码里使用的是 View.propTypes.style，应改为 Text.propTypes.style！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十二期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/12/tech-notes-22/"/>
    <updated>2016-10-12T14:04:38+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/12/tech-notes-22</id>
    <content type="html"><![CDATA[<p>本期周报主要包括 Dash 作者和 Apple 沟通的详情、移动端技术方案对比、React Native 组件间数据传递、用 Sketch 制作 GIF 动画等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="http://cn.reuters.com/article/apple-shenzhen-research-center-idCNKCS12C0DH">苹果宣布在深圳成立研发中心</a> By 路透香港</h4>

<p>苹果公司周三表示，将在中国的制造业中心深圳成立一个研发中心。在竞争日益激烈的情况下，苹果希望刺激在中国的增长。</p>

<h4>2) <a href="https://blog.kapeli.com/dash-and-apple-my-side-of-the-story">Dash and Apple: My Side of the Story</a> By Bogdan Popescu</h4>

<p>非常受欢迎的 API 文档浏览器 Dash 的作者公开了和苹果沟通的细节，看起来双方都没有错:-)</p>

<h2>开发</h2>

<h4>1) <a href="http://awhisper.github.io/2016/07/22/Weex-ReactNative-JSPatch/">Weex &amp; ReactNative &amp; JSPatch</a> By awhisper</h4>

<p>很不错的方案对比文章，既有引述，也有作者自己的见解。</p>

<h4>2) <a href="http://balloonsys.com/blog/2016/10/11/rn-components-communication/">React Native 组件间数据传递</a> By Linkou Bian</h4>

<p>在 React Native 项目试点过程中，封装的组件之间难免需要传递数据。本文总结了子组件如何将数据传递到使用方，以及对开发过程中遇到的一个 setState 问题的探究。</p>

<h4>3) <a href="http://inaka.net/blog/2016/09/16/function-naming-in-swift-3/">Function Naming In Swift 3</a> By Pablo Villar</h4>

<p>作者总结了自己在迁移 Swift 2.2 到 Swift 3 时关于函数命名的心得。另外，官方的 <a href="https://swift.org/documentation/api-design-guidelines/">Swift API 设计指南</a>，建议多读几遍。</p>

<h2>工具</h2>

<h4>1) <a href="https://github.com/markohlebar/Import">An Xcode Extension: Import</a> By Marko Hlebar</h4>

<p>当一个类文件很长，此时若需要 import 头文件的话需要滚动到最顶部，然后再回到刚才的代码行继续编码，这个体验还是很不好的。该 Extension 可以让你在任意位置输入 import 语句。</p>

<h4>2) <a href="https://github.com/magicismight/react-native-root-toast">React Native Toast</a> By Horcrux</h4>

<p>适用于 React Native 项目的 Toast 消息提示组件。</p>

<h2>其他</h2>

<h4>1) <a href="http://www.jianshu.com/p/45022427cf96">用 Sketch 制作 APP 下拉刷新的 GIF 动画</a> By wythetan</h4>

<p>用 Sketch 做 GIF 动画，是有个叫 AnimateMate 的很好用的插件。文中作者以分期乐的刷新动画为例进行讲解，推荐开发人员也读一读。</p>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native 组件间数据传递]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/11/rn-components-communication/"/>
    <updated>2016-10-11T11:14:48+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/11/rn-components-communication</id>
    <content type="html"><![CDATA[<p>在 React Native 项目试点过程中，封装的组件之间难免需要传递数据。本文总结了子组件如何将数据传递到使用方，以及对开发过程中遇到的一个 setState 问题的探究。</p>

<!--more-->


<h2>设计一个可定制的组件</h2>

<p>当设计一个组件供团队使用，通常使用时需要向其传递一些信息。这个过程可以参考国庆节前写的<a href="http://balloonsys.com/blog/2016/09/30/create-your-first-reusable-react-native-component/">创建一个 React Native 分隔线组件</a>。</p>

<p>主要思路就是定义属性（propTypes），并提供默认属性值（getDefaultProps）。这里不再赘述。</p>

<h2>组件返回数据给使用方</h2>

<h3>应用场景</h3>

<p>假设我们的某个页面 P 使用到封装房产信息的 houseInfo 等组件，需要在 houseInfo 填写完房源总价 totalPrice 后能根据当前整个页面（含多个组件）的输入项去验证是否可以 enable 提交按钮，而且在点击提交时需要能访问到 houseInfo 等组件录入的数据（包括 totalPrice 等）。</p>

<h3>组件设计</h3>

<p>houseInfo 组件包含若干由 React Native 提供的 TextInput 组件，在 TextInput 的 onChangeText 事件绑定我们的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">onChangeText</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateTotalPrice</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用到的 _updateTotalPrice 是定义在该组件里的事件响应方法，使用最精简的写法设置状态机变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">_updateTotalPrice</span><span class="p">(</span><span class="nx">totalPrice</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">totalPrice</span><span class="p">},</span> <span class="k">this</span><span class="p">.</span><span class="nx">_onStateUpdated</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>特别需要注意的是，上述 setState 方法是异步执行的函数，将变化通知到组件的使用者的方法 _onStateUpdated 需要放在 setState 的第二个参数处，否则取 this.state.totalPrice 仍将是旧值。官方的解释如下：</p>

<blockquote><p>setState() does not immediately mutate this.state but creates a pending state transition. Accessing this.state after calling this method can potentially return the existing value.</p></blockquote>

<p>在实现 _onStateUpdated 方法之前，我们先声明一个函数类型的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">propTypes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">onGetHouseInfo</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">func</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样使用者就可以传递一个函数给该组件，该组件在合适的时机调用此方法即可传递数据给使用方。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">_onStateUpdated</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">onGetHouseInfo</span><span class="p">({</span><span class="nx">totalPrice</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">totalPrice</span><span class="p">,</span>
</span><span class='line'>                                                           <span class="c1">// 其他输入项 ...</span>
</span><span class='line'>                              <span class="p">},</span> <span class="k">this</span><span class="p">.</span><span class="nx">_validate</span><span class="p">());</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们在传递输入的值时，还将本组件的验证结果传递出去，这样使用方即可综合各组件的 valid 值以控制提交按钮的状态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">_validate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">XXX</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用方</h3>

<p>我们在使用 houseInfo 等组件 render 表单页面 P，参考代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">HouseInfo</span> <span class="nx">onGetHouseInfo</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_getHouseInfo</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>此处的 _getHouseInfo 用于从组件接收数据，以存放在页面的 state 里面：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">_getHouseInfo</span><span class="p">(</span><span class="nx">houseInfo</span><span class="p">,</span> <span class="nx">houseInfoValid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">houseInfo</span><span class="p">,</span> <span class="nx">houseInfoValid</span><span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>至于 state 的定义及初始化，放在 getInitialState 中即可，较为基础，此处略。</p>

<h2>收工</h2>

<p>👏👏👏</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十一期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/10/09/tech-notes-21/"/>
    <updated>2016-10-09T08:46:41+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/10/09/tech-notes-21</id>
    <content type="html"><![CDATA[<p>本期周报主要包括苹果云服务团队调整资讯、Swift 3 代码迁移经验小结、Xcode Asset Catalog 各种有用的特性、对 React Native 软件许可证解读等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://www.bloomberg.com/news/articles/2016-10-06/apple-is-said-to-plan-improved-cloud-services-by-unifying-teams">Apple Said to Plan Improved Cloud Services by Unifying Teams</a> By Bloomberg</h4>

<p>据 Bloomberg 的消息称，苹果打算将 Siri、Maps、iCould、Apple Pay、Apple News、Apple Music 以及部分 iTunes 业务的云服务团队统一起来，统一后的云服务将运行在一个新的代号为 Pie 的后端。</p>

<h4>2) <a href="https://blog.kapeli.com/apple-removed-dash-from-the-app-store#what-happened">Apple Has Removed Dash from the App Store</a> By Bogdan Popescu</h4>

<p>非常受欢迎的 API 文档浏览器 Dash 的作者在迁移开发者账号至企业账号过程中，突然遭遇应用被下架的厄运。经沟通后得知，苹果认为该应用的评论有操控之嫌，作者很受伤。</p>

<h2>开发</h2>

<h4>1) <a href="http://tech.glowing.com/cn/swift3/">Swift 3 代码迁移</a> By Glow</h4>

<p>Swift 1 确立了语言的基线：安全、快速、现代。Swift 2 展现了 Swift 应该是什么，未来怎么走：面向协议的编程、开源。而 Swift 3 更多是清扫和规范。</p>

<h4>2) <a href="http://blog.lessfun.com/blog/2016/09/21/ios-10-replaykit-live-and-broadcast-extension/">iOS 10 ReplayKit Live</a> By lessfun</h4>

<p>在 iOS 8 及以前，第三方 App 如果想要全局录屏，只能使用私有 API。升级到 iOS 9 后，官方新增了 ReplayKit，并且禁用了录屏的私有 API。iOS 10 在 ReplayKit 保存录屏视频的基础上，增加了视频流实时直播功能。</p>

<h2>工具</h2>

<h4>1) <a href="http://yulingtianxia.com/blog/2016/09/28/Let-s-Talk-About-project-pbxproj/">Let&rsquo;s Talk About project.pbxproj</a> By 杨萧玉</h4>

<p>project.pbxproj 文件被包含于 Xcode 工程文件 *.xcodeproj 之中，存储着 Xcode 工程的各项配置参数。本文谈了下 project.pbxproj 的知识，并总结了一些操作工程文件的优秀轮子。</p>

<h4>2) <a href="http://krakendev.io/blog/4-xcode-asset-catalog-secrets-you-need-to-know">Four Secrets about Xcode Asset Catalog</a> By Hector Matos</h4>

<p>之前做项目瘦身方案时，有做过图片资源迁移至 Asset Catalog 的工作。这篇文章包含 Xcode Asset Catalog 的四项重要特性。</p>

<h2>其他</h2>

<h4>1) <a href="https://arielelkin.github.io/articles/why-im-not-a-react-native-developer">Why I&rsquo;m not a React Native Developer</a> By Ariel Elkin</h4>

<p>关于 RN 许可协议的解读是我获得的最大收获:</p>

<blockquote><p>if I initiate any lawsuit alleging patent infringement against Facebook, my license to use React Native would be immediately terminated.</p></blockquote>

<p>@end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平安好房iOS开发团队技术周报（第二十期）]]></title>
    <link href="http://balloonsys.github.io/blog/2016/09/30/tech-notes-20/"/>
    <updated>2016-09-30T11:20:12+08:00</updated>
    <id>http://balloonsys.github.io/blog/2016/09/30/tech-notes-20</id>
    <content type="html"><![CDATA[<p>本期周报主要包括如何创建一个 React Native 分隔线组件、UITableView 性能优化、如何设置AFNetwork 以支持 SSL，以及Xcode 8 代码签名等内容。</p>

<!--more-->


<h2>资讯</h2>

<h4>1) <a href="https://www.macstories.net/news/apple-starts-selling-app-store-search-ads-launching-october-5th/">Apple Starts Selling App Store Search Ads</a> By John Voorhees</h4>

<p>App Store 搜索广告功能将于 10 月 5 日正式推出。关于广告计费方式，苹果表示将采用 CPC 的计算形式，开发者只需要在用户点击广告才需要付费，具体支付金额由关键词竞拍结果决定。</p>

<h4>2) iPhone 可以直接用 Siri 打车</h4>

<p>苹果开放接口以后，Siri 有用多了。比如在 iOS 10 里，你可以通过 Siri 直接语音叫车，滴滴和优步都支持。</p>

<h2>开发</h2>

<h4>1) <a href="http://balloonsys.com/blog/2016/09/30/create-your-first-reusable-react-native-component/">创建一个 React Native 分隔线组件</a> By Linkou Bian</h4>

<p>在移动端表单页面里有不少分隔线绘制需求，构造一个组件以在不同页面复用是个很自然的做法。本文选取最最简单的分隔线介绍 React Native 实践过程中的代码编写思路。</p>

<h4>2) <a href="http://blog.lessfun.com/blog/2015/04/01/uitableview-performence-improve/">UITableView 性能优化</a></h4>

<p>UITableView 是 iOS 开发中最常用也很实用并且最容易出现性能问题的的一个控件，本文列出了一些性能优化点，用于提高列表滚动的流畅性。</p>

<h2>工具</h2>

<h4>1) <a href="http://nelson.logdown.com/posts/2015/04/29/how-to-properly-setup-afnetworking-security-connection/">如何正确设定 AFN 的安全连接</a> By Nelson Tai</h4>

<p>大部分 iOS 应用都是采用 AFNetwork 作为网络层的框架的，本文详细介绍了设置 SSL 的步骤。</p>

<h4>2) <a href="http://joeyio.com/2016/08/21/WWDC2016-401-Whats-new-in-Xcode-App-Signing/">What&rsquo;s New in Xcode App Signing</a></h4>

<p>Xcode 团队在 Xcode 8 中移除了 fix issue 之后还需要 fix issue 但是可能还是不能 fix issue 的 Fix Issue 按钮，并完全重新设计了 code signing 的交互，流程和架构。</p>

<h2>其他</h2>

<h4>1) <a href="http://www.jianshu.com/p/033a6b596155">技术 Leader 的多维度能力及成长路径</a></h4>

<p>如何成功转型? 我不想丢掉技术，如何在不丢掉技术的同时还能提升管理能力！本文是作者在这个过程中经历困惑和挣扎后的一些想法。</p>

<p>@end</p>
]]></content>
  </entry>
  
</feed>
